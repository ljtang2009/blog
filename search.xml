<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 标签插件演示 (2) -- 代码块</title>
    <url>/2022/12/code-block/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>这是 标签插件 代码块 演示.</p>
<span id="more"></span>

<div class="tabs" id="code-block"><ul class="nav-tabs"><li class="tab active"><a href="#code-block-1">Hexo 标签插件 代码块</a></li><li class="tab"><a href="#code-block-2">Markdown 代码语法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code-block-1"><h2 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h2><figure class="highlight plaintext"><figcaption><span>Array.map</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h2><figure class="highlight plaintext"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="code-block-2"><h2 id="单词或短语"><a href="#单词或短语" class="headerlink" title="单词或短语"></a>单词或短语</h2><p>At the command prompt, type <code>nano</code>.</p>
<h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><p><code>Use `code` in your Markdown file.</code></p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight html"><figcaption><span>title1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Code Block</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (2) -- EditorConfig</title>
    <url>/2022/12/editorconfig/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://editorconfig.org/">EditorConfig</a> 是一个跨IDE的确定一致的编码风格插件。</p>
<span id="more"></span>

<p>在代码仓库根目录下添加文件:</p>
<figure class="highlight plaintext"><figcaption><span>.editorconfig</span><a href="/downloads/code/editorconfig/.editorconfig">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"># EditorConfig is awesome: https://EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = crlf</span><br><span class="line">charset = utf-8</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">insert_final_newline = true</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>EditorConfig</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 标签插件演示 (4) -- 引用文章</title>
    <url>/2022/12/article-quote/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>这是 标签插件 引用文章 演示.</p>
<h2 id="Hexo-标签插件-引用文章"><a href="#Hexo-标签插件-引用文章" class="headerlink" title="Hexo 标签插件 引用文章"></a>Hexo 标签插件 引用文章</h2><h3 id="链接使用文章的标题"><a href="#链接使用文章的标题" class="headerlink" title="链接使用文章的标题"></a>链接使用文章的标题</h3><a href="/2022/12/hello-world/" title="Hello World">Hello World</a>

<span id="more"></span>

<h3 id="链接使用自定义文字"><a href="#链接使用自定义文字" class="headerlink" title="链接使用自定义文字"></a>链接使用自定义文字</h3><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">引用块改名</a>

<h3 id="对标题的特殊字符进行转义"><a href="#对标题的特殊字符进行转义" class="headerlink" title="对标题的特殊字符进行转义"></a>对标题的特殊字符进行转义</h3><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">How to use &lt;b&gt; 代码块</a>

<h3 id="禁止对标题的特殊字符进行转义"><a href="#禁止对标题的特殊字符进行转义" class="headerlink" title="禁止对标题的特殊字符进行转义"></a>禁止对标题的特殊字符进行转义</h3><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码"><b>bold</b> 包含代码</a>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Demo</tag>
        <tag>Article Quote</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (4) -- ESLint</title>
    <url>/2022/12/eslint/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://eslint.org/">ESLint</a> 代码检查工具。</p>
<p>使用 <a href="https://github.com/AlloyTeam/eslint-config-alloy">AlloyTeam ESLint 规则</a> 配置 ESlint.</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="tabs" id="install"><ul class="nav-tabs"><li class="tab active"><a href="#install-1">TypeScript</a></li><li class="tab"><a href="#install-2">TypeScript Vue</a></li></ul><div class="tab-content"><div class="tab-pane active" id="install-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-alloy</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="install-2"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/eslint-parser @typescript-eslint/eslint-plugin @typescript-eslint/parser @vue/eslint-config-typescript eslint eslint-config-alloy eslint-plugin-vue vue-eslint-parser</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在代码仓库根目录下添加文件:</p>
<div class="tabs" id="config"><ul class="nav-tabs"><li class="tab active"><a href="#config-1">TypeScript</a></li><li class="tab"><a href="#config-2">TypeScript Vue</a></li></ul><div class="tab-content"><div class="tab-pane active" id="config-1"><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_PROD</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;alloy&#x27;</span>, <span class="string">&#x27;alloy/typescript&#x27;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="comment">// browser: true,</span></span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globals</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">/* #region ESLint rules */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Possible Errors</span></span><br><span class="line">    <span class="comment">// 这些规则与 JavaScript 代码中可能的错误或逻辑错误有关：</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: [<span class="variable constant_">IS_PROD</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;warn&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;no-duplicate-imports&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 禁止重复导入模块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Suggestions</span></span><br><span class="line">    <span class="comment">// 这些规则建议了不同的做事方式:</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: [<span class="variable constant_">IS_PROD</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;warn&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* #endregion */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* #region @type-eslint rules */</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/prefer-optional-chain&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-require-imports&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/explicit-member-accessibility&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">/* #endregion */</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="config-2"><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_PROD</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;alloy&#x27;</span>, <span class="string">&#x27;alloy/vue&#x27;</span>, <span class="string">&#x27;alloy/typescript&#x27;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: &#123;</span><br><span class="line">      <span class="attr">js</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span>,</span><br><span class="line">      <span class="attr">jsx</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">ts</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">      <span class="attr">tsx</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Leave the template parser unspecified, so that it could be determined by `&lt;script lang=&quot;...&quot;&gt;`</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globals</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">/* #region ESLint rules */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Possible Errors</span></span><br><span class="line">    <span class="comment">// 这些规则与 JavaScript 代码中可能的错误或逻辑错误有关：</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: [<span class="variable constant_">IS_PROD</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;warn&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;no-duplicate-imports&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 禁止重复导入模块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Suggestions</span></span><br><span class="line">    <span class="comment">// 这些规则建议了不同的做事方式:</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: [<span class="variable constant_">IS_PROD</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;warn&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* #endregion */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* #region @type-eslint rules */</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/prefer-optional-chain&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-require-imports&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/explicit-member-accessibility&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">/* #endregion */</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="添加-ESlint-命令"><a href="#添加-ESlint-命令" class="headerlink" title="添加 ESlint 命令"></a>添加 ESlint 命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm pkg set scripts.eslint=&quot;eslint . --ext .js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts,.vue&quot;</span><br></pre></td></tr></table></figure>

<h2 id="VSCode-添加-ESlint-自动验证"><a href="#VSCode-添加-ESlint-自动验证" class="headerlink" title="VSCode 添加 ESlint 自动验证"></a>VSCode 添加 ESlint 自动验证</h2><p>修改 <code>.vscode/settings.json</code> 文件：</p>
<figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加-ignore"><a href="#添加-ignore" class="headerlink" title="添加 ignore"></a>添加 ignore</h2><p>在代码仓库根目录下添加文件:</p>
<figure class="highlight plaintext"><figcaption><span>.eslintignore</span></figcaption><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">dist</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 标签插件演示 (6) -- 文章摘要和截断</title>
    <url>/2022/12/excerpt/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
<span id="more"></span>

<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.<br>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.<br>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Demo</tag>
        <tag>Excerpt</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (1) -- husky &amp; commitlint</title>
    <url>/2022/12/git-commit-lint/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<ul>
<li><a href="https://typicode.github.io/husky/">husky</a> 用于生成 Git hooks.</li>
<li><a href="https://commitlint.js.org/">commitlint</a> 用于 规范 commit message.</li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev husky @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure>

<h2 id="启用-Git-hooks"><a href="#启用-Git-hooks" class="headerlink" title="启用 Git hooks"></a>启用 Git hooks</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure>

<p>如果您想在下一次安装依赖模块时自动启用 Git hooks:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm pkg set scripts.prepare=&quot;husky install&quot;</span><br></pre></td></tr></table></figure>

<h2 id="配置-commitlint"><a href="#配置-commitlint" class="headerlink" title="配置 commitlint"></a>配置 commitlint</h2><p>在代码仓库根目录下添加文件:</p>
<figure class="highlight javascript"><figcaption><span>commitlint.config.js</span><a href="/downloads/code/git-commit-lint/commitlint.config.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feat：新增功能</span></span><br><span class="line"><span class="comment"> * fix：bug 修复</span></span><br><span class="line"><span class="comment"> * docs：文档更新</span></span><br><span class="line"><span class="comment"> * style：不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)</span></span><br><span class="line"><span class="comment"> * refactor：重构代码(既没有新增功能，也没有修复 bug)</span></span><br><span class="line"><span class="comment"> * perf：性能, 体验优化</span></span><br><span class="line"><span class="comment"> * test：新增测试用例或是更新现有测试</span></span><br><span class="line"><span class="comment"> * build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</span></span><br><span class="line"><span class="comment"> * ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</span></span><br><span class="line"><span class="comment"> * chore：不属于以上类型的其他类型，比如构建流程, 依赖管理</span></span><br><span class="line"><span class="comment"> * revert：回滚某个更早之前的提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;feat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fix&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;docs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;refactor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;perf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ci&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;revert&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;subject-full-stop&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="添加-commitlint-的-hook"><a href="#添加-commitlint-的-hook" class="headerlink" title="添加 commitlint 的 hook"></a>添加 commitlint 的 hook</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg  &#x27;npx --no -- commitlint --edit $&#123;1&#125;&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>husky</tag>
        <tag>commitlint</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info.<br>If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 标签插件演示 (1) -- 引用块</title>
    <url>/2022/12/block-quote/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>这是 标签插件 引用块 演示.</p>
<div class="tabs" id="block-quote"><ul class="nav-tabs"><li class="tab active"><a href="#block-quote-1">Hexo 标签插件 引用块</a></li><li class="tab"><a href="#block-quote-2">Markdown 引用语法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="block-quote-1"><h2 id="没有提供参数，则只输出普通的-blockquote"><a href="#没有提供参数，则只输出普通的-blockquote" class="headerlink" title="没有提供参数，则只输出普通的 blockquote"></a>没有提供参数，则只输出普通的 blockquote</h2><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque.<br>Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>

<span id="more"></span>

<h2 id="quote-book"><a href="#quote-book" class="headerlink" title="引用书上的句子"></a><a href="#quote-book">引用书上的句子</a></h2><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<h2 id="引用-Twitter"><a href="#引用-Twitter" class="headerlink" title="引用 Twitter"></a>引用 Twitter</h2><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>

<h2 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h2><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote></div><div class="tab-pane" id="block-quote-2"><blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
</blockquote>
<h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
<h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<blockquote>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
</blockquote>
<h2 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h2><blockquote>
<h3 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great"></a>The quarterly results look great</h3><ul>
<li>Revenue was off the chart.</li>
<li>Profits were higher than ever.</li>
</ul>
<p><em>Everything</em> is going according to <strong>plan</strong>.</p>
</blockquote></div></div></div>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Demo</tag>
        <tag>Block Quote</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 标签插件演示 (3) -- 包含代码</title>
    <url>/2022/12/include-code/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>这是 标签插件 include code 演示.</p>
<h2 id="Hexo-标签插件-include-code"><a href="#Hexo-标签插件-include-code" class="headerlink" title="Hexo 标签插件 include code"></a>Hexo 标签插件 include code</h2><h3 id="嵌入-test-js-文件全文"><a href="#嵌入-test-js-文件全文" class="headerlink" title="嵌入 test.js 文件全文"></a>嵌入 test.js 文件全文</h3><span id="more"></span>

<figure class="highlight javascript"><figcaption><span>test.js</span><a href="/downloads/code/include-code/test.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;stylelint-order&#x27;</span>],</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;stylelint-config-standard&#x27;</span>, <span class="string">&#x27;stylelint-config-css-modules&#x27;</span>],</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.less&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-less&#x27;</span>,</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">&#x27;selector-class-pattern&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;string-quotes&#x27;</span>: <span class="string">&#x27;single&#x27;</span>, <span class="comment">// 单引号</span></span><br><span class="line">    <span class="string">&#x27;at-rule-empty-line-before&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;at-rule-no-unknown&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;at-rule-name-case&#x27;</span>: <span class="string">&#x27;lower&#x27;</span>, <span class="comment">// 指定@规则名的大小写</span></span><br><span class="line">    <span class="string">&#x27;length-zero-no-unit&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止零长度的单位（可自动修复）</span></span><br><span class="line">    <span class="string">&#x27;shorthand-property-no-redundant-values&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 简写属性</span></span><br><span class="line">    <span class="string">&#x27;number-leading-zero&#x27;</span>: <span class="string">&#x27;never&#x27;</span>, <span class="comment">// 小数不带0</span></span><br><span class="line">    <span class="string">&#x27;declaration-block-no-duplicate-properties&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止声明快重复属性</span></span><br><span class="line">    <span class="string">&#x27;no-descending-specificity&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class="line">    <span class="string">&#x27;selector-max-id&#x27;</span>: <span class="number">3</span>, <span class="comment">// 限制一个选择器中 ID 选择器的数量</span></span><br><span class="line">    <span class="string">&#x27;max-nesting-depth&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">indentation</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 指定缩进  warning 提醒</span></span><br><span class="line">        <span class="attr">severity</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;order/properties-order&#x27;</span>: [</span><br><span class="line">      <span class="comment">// 规则顺序</span></span><br><span class="line">      <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;z-index&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;display&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;float&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-top-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-right-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-bottom-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-left-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-x&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-y&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;clip&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;clear&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-family&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-smoothing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;osx-font-smoothing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-weight&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;line-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;letter-spacing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-spacing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-align&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-decoration&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-indent&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-rendering&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-size-adjust&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-shadow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-transform&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-break&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-wrap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;white-space&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vertical-align&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-type&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-image&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pointer-events&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;cursor&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-radius&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;outline&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;outline-offset&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;filter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;alpha-value-notation&#x27;</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;number-leading-zero&#x27;</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;color-function-notation&#x27;</span>: <span class="string">&#x27;legacy&#x27;</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">reportDescriptionlessDisables</span>: <span class="literal">true</span>,</span><br><span class="line">};</span><br></pre></td></tr></table></figure>

<h3 id="只嵌入第-3-行"><a href="#只嵌入第-3-行" class="headerlink" title="只嵌入第 3 行"></a>只嵌入第 3 行</h3><figure class="highlight javascript"><figcaption><span>test.js</span><a href="/downloads/code/include-code/test.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">extends</span>: [<span class="string">&#x27;stylelint-config-standard&#x27;</span>, <span class="string">&#x27;stylelint-config-css-modules&#x27;</span>],</span><br></pre></td></tr></table></figure>

<h3 id="嵌入第-5-行至第-8-行"><a href="#嵌入第-5-行至第-8-行" class="headerlink" title="嵌入第 5 行至第 8 行"></a>嵌入第 5 行至第 8 行</h3><figure class="highlight javascript"><figcaption><span>test.js</span><a href="/downloads/code/include-code/test.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.less&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-less&#x27;</span>,</span><br><span class="line">    },</span><br></pre></td></tr></table></figure>

<h3 id="嵌入第-5-行至文件结束"><a href="#嵌入第-5-行至文件结束" class="headerlink" title="嵌入第 5 行至文件结束"></a>嵌入第 5 行至文件结束</h3><figure class="highlight javascript"><figcaption><span>test.js</span><a href="/downloads/code/include-code/test.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.less&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-less&#x27;</span>,</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">&#x27;selector-class-pattern&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;string-quotes&#x27;</span>: <span class="string">&#x27;single&#x27;</span>, <span class="comment">// 单引号</span></span><br><span class="line">    <span class="string">&#x27;at-rule-empty-line-before&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;at-rule-no-unknown&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;at-rule-name-case&#x27;</span>: <span class="string">&#x27;lower&#x27;</span>, <span class="comment">// 指定@规则名的大小写</span></span><br><span class="line">    <span class="string">&#x27;length-zero-no-unit&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止零长度的单位（可自动修复）</span></span><br><span class="line">    <span class="string">&#x27;shorthand-property-no-redundant-values&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 简写属性</span></span><br><span class="line">    <span class="string">&#x27;number-leading-zero&#x27;</span>: <span class="string">&#x27;never&#x27;</span>, <span class="comment">// 小数不带0</span></span><br><span class="line">    <span class="string">&#x27;declaration-block-no-duplicate-properties&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止声明快重复属性</span></span><br><span class="line">    <span class="string">&#x27;no-descending-specificity&#x27;</span>: <span class="literal">true</span>, <span class="comment">// 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器。</span></span><br><span class="line">    <span class="string">&#x27;selector-max-id&#x27;</span>: <span class="number">3</span>, <span class="comment">// 限制一个选择器中 ID 选择器的数量</span></span><br><span class="line">    <span class="string">&#x27;max-nesting-depth&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">indentation</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 指定缩进  warning 提醒</span></span><br><span class="line">        <span class="attr">severity</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;order/properties-order&#x27;</span>: [</span><br><span class="line">      <span class="comment">// 规则顺序</span></span><br><span class="line">      <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;z-index&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;display&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;float&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-top-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-right-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-bottom-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-left-collapse&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-x&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-y&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;clip&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;clear&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-family&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-smoothing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;osx-font-smoothing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-weight&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;line-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;letter-spacing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-spacing&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-align&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-decoration&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-indent&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-rendering&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-size-adjust&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-shadow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-transform&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-break&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;word-wrap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;white-space&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vertical-align&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-type&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style-image&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pointer-events&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;cursor&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-radius&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;outline&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;outline-offset&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;filter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;alpha-value-notation&#x27;</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;number-leading-zero&#x27;</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;color-function-notation&#x27;</span>: <span class="string">&#x27;legacy&#x27;</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">reportDescriptionlessDisables</span>: <span class="literal">true</span>,</span><br><span class="line">};</span><br></pre></td></tr></table></figure>

<h3 id="嵌入第-1-行至第-8-行"><a href="#嵌入第-1-行至第-8-行" class="headerlink" title="嵌入第 1 行至第 8 行"></a>嵌入第 1 行至第 8 行</h3><figure class="highlight javascript"><figcaption><span>test.js</span><a href="/downloads/code/include-code/test.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;stylelint-order&#x27;</span>],</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;stylelint-config-standard&#x27;</span>, <span class="string">&#x27;stylelint-config-css-modules&#x27;</span>],</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.less&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-less&#x27;</span>,</span><br><span class="line">    },</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Demo</tag>
        <tag>Include Code</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (6) -- Jest</title>
    <url>/2022/12/jest/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://jestjs.io/zh-Hans/">Jest</a> 简单 Javascript 测试框架。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest ts-jest @types/jest jest-extended jest-html-reporters eslint-plugin-jest jsonc-parser cross-env</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="jest-config-ts"><a href="#jest-config-ts" class="headerlink" title="jest.config.ts"></a>jest.config.ts</h3><figure class="highlight javascript"><figcaption><span>jest.config.ts</span><a href="/downloads/code/jest/jest.config.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { pathsToModuleNameMapper, <span class="title class_">JestConfigWithTsJest</span> } <span class="keyword">from</span> <span class="string">&#x27;ts-jest&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> packageJson <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Config</span> } <span class="keyword">from</span> <span class="string">&#x27;@jest/types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;node:fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { parse <span class="keyword">as</span> jsoncParse } <span class="keyword">from</span> <span class="string">&#x27;jsonc-parser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="comment">// import { defaults as tsjPreset } from &#x27;ts-jest/presets&#x27;</span></span><br><span class="line"><span class="comment">// import { defaultsESM as tsjPreset } from &#x27;ts-jest/presets&#x27;;</span></span><br><span class="line"><span class="comment">// import { jsWithTs as tsjPreset } from &#x27;ts-jest/presets&#x27;;</span></span><br><span class="line"><span class="comment">// import { jsWithTsESM as tsjPreset } from &#x27;ts-jest/presets&#x27;;</span></span><br><span class="line"><span class="comment">// import { jsWithBabel as tsjPreset } from &#x27;ts-jest/presets&#x27;;</span></span><br><span class="line"><span class="comment">// import { jsWithBabelESM as tsjPreset } from &#x27;ts-jest/presets&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">displayName</span>: <span class="title class_">Config</span>.<span class="property">DisplayName</span> = {</span><br><span class="line">  <span class="attr">name</span>: packageJson.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTsconfig</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> tsconfigFilePath = path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./tsconfig.json&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> str = fs.<span class="title function_">readFileSync</span>(tsconfigFilePath).<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">jsoncParse</span>(str);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="title class_">JestConfigWithTsJest</span>&gt; =&gt; {</span><br><span class="line">  <span class="keyword">const</span> tsconfig = <span class="title function_">getTsconfig</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">Record</span>&lt;string, any&gt; = {</span><br><span class="line">    <span class="attr">preset</span>: <span class="string">&#x27;ts-jest&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths mapping</span></span><br><span class="line">    <span class="attr">roots</span>: [<span class="string">&#x27;&lt;rootDir&gt;&#x27;</span>],</span><br><span class="line">    <span class="attr">modulePaths</span>: [tsconfig.<span class="property">compilerOptions</span>.<span class="property">baseUrl</span>],</span><br><span class="line">    <span class="attr">moduleNameMapper</span>: <span class="title function_">pathsToModuleNameMapper</span>(tsconfig.<span class="property">compilerOptions</span>.<span class="property">paths</span> <span class="comment">/* { prefix: &#x27;&lt;rootDir&gt;/&#x27; } */</span>),</span><br><span class="line"></span><br><span class="line">    <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;jest-extended/all&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    displayName,</span><br><span class="line">    <span class="attr">maxConcurrency</span>: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">modulePathIgnorePatterns</span>: [<span class="string">&#x27;&lt;rootDir&gt;/dist/&#x27;</span>],</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>[<span class="string">&#x27;SHOW_REPORTS&#x27;</span>] === <span class="string">&#x27;Y&#x27;</span>) {</span><br><span class="line">    result = {</span><br><span class="line">      ...result,</span><br><span class="line">      <span class="attr">collectCoverage</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">collectCoverageFrom</span>: [<span class="string">&#x27;src/**/*.{js,ts}&#x27;</span>],</span><br><span class="line">      <span class="attr">coverageDirectory</span>: <span class="string">&#x27;./.test-report/coverage-report&#x27;</span>,</span><br><span class="line">      <span class="attr">reporters</span>: [</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;jest-html-reporters&#x27;</span>,</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">publicPath</span>: <span class="string">&#x27;./.test-report/html-report&#x27;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;report.html&#x27;</span>,</span><br><span class="line">            <span class="attr">pageTitle</span>: displayName.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">openReport</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">enableMergeData</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">urlForTestFiles</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">          },</span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">};</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env SHOW_REPORTS=Y jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --watch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;plugin:jest/recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;jest&#x27;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;jest/globals&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="global-d-ts"><a href="#global-d-ts" class="headerlink" title="global.d.ts"></a>global.d.ts</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;jest-extended&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;jest.config.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;global.d.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Jest</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (3) -- Prettier</title>
    <url>/2022/12/prettier/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://prettier.io/">Prettier</a> 代码格式化工具。</p>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在代码仓库根目录下添加文件:</p>
<figure class="highlight javascript"><figcaption><span>prettier.config.js</span><a href="/downloads/code/prettier/prettier.config.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reference https://prettier.io/docs/en/options.html</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="comment">// 一行最多 120 字符</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="comment">// 使用 2 个空格缩进</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 行尾需要有分号</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使用单引号</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">  <span class="attr">quoteProps</span>: <span class="string">&#x27;as-needed&#x27;</span>,</span><br><span class="line">  <span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 末尾需要有逗号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  <span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">  <span class="attr">bracketSpacing</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">  <span class="attr">bracketSameLine</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">  <span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">  <span class="attr">rangeStart</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">rangeEnd</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">  <span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">  <span class="attr">requirePragma</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">  <span class="attr">insertPragma</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 使用默认的折行标准</span></span><br><span class="line">  <span class="attr">proseWrap</span>: <span class="string">&#x27;preserve&#x27;</span>,</span><br><span class="line">  <span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">  <span class="comment">// vue 文件中的 script 和 style 内不用缩进</span></span><br><span class="line">  <span class="attr">vueIndentScriptAndStyle</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 换行符使用 lf</span></span><br><span class="line">  <span class="attr">endOfLine</span>: <span class="string">&#x27;lf&#x27;</span>,</span><br><span class="line">  <span class="comment">// 格式化嵌入的内容</span></span><br><span class="line">  <span class="attr">embeddedLanguageFormatting</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">  <span class="comment">// html, vue, jsx 中每个属性占一行</span></span><br><span class="line">  <span class="attr">singleAttributePerLine</span>: <span class="literal">false</span>,</span><br><span class="line">};</span><br></pre></td></tr></table></figure>

<h2 id="VSCode-添加-Prettier-自动格式化"><a href="#VSCode-添加-Prettier-自动格式化" class="headerlink" title="VSCode 添加 Prettier 自动格式化"></a>VSCode 添加 Prettier 自动格式化</h2><p>修改 <code>.vscode/settings.json</code> 文件：</p>
<figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.eol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Prettier</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 标签插件演示 (5) -- 引用资源</title>
    <url>/2022/12/resource-quote/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/block-quote/" title="Hexo 标签插件演示 (1) -- 引用块">Hexo 标签插件演示 (1) – 引用块</a></p>
</li>
<li><p><a href="/2022/12/code-block/" title="Hexo 标签插件演示 (2) -- 代码块">Hexo 标签插件演示 (2) – 代码块</a></p>
</li>
<li><p><a href="/2022/12/include-code/" title="Hexo 标签插件演示 (3) -- 包含代码">Hexo 标签插件演示 (3) – 包含代码</a></p>
</li>
<li><p><a href="/2022/12/article-quote/" title="Hexo 标签插件演示 (4) -- 引用文章">Hexo 标签插件演示 (4) – 引用文章</a></p>
</li>
<li><p><a href="/2022/12/resource-quote/" title="Hexo 标签插件演示 (5) -- 引用资源">Hexo 标签插件演示 (5) – 引用资源</a></p>
</li>
<li><p><a href="/2022/12/excerpt/" title="Hexo 标签插件演示 (6) -- 文章摘要和截断">Hexo 标签插件演示 (6) – 文章摘要和截断</a></p>
</li>
</ul>

</details>


<p>这是 标签插件 引用资源 演示.</p>
<h2 id="Hexo-标签插件-引用资源"><a href="#Hexo-标签插件-引用资源" class="headerlink" title="Hexo 标签插件 引用资源"></a>Hexo 标签插件 引用资源</h2><h3 id="asset-path-id"><a href="#asset-path-id" class="headerlink" title="asset_path"></a><a href="#asset-path-id">asset_path</a></h3>/2022/12/resource-quote/ho_ho_gl@hotmail.com%E7%9A%84%E4%BC%81%E4%B8%9A-2022-12-09_22-19-43.zip

<span id="more"></span>

<h3 id="asset-link"><a href="#asset-link" class="headerlink" title="asset_link"></a>asset_link</h3><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab active"><a href="#link-1">Hexo 标签插件 asset_link</a></li><li class="tab"><a href="#link-2">Hexo 标签插件 Link</a></li><li class="tab"><a href="#link-3">Markdown 链接语法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="link-1"><p><a href="/2022/12/resource-quote/ho_ho_gl@hotmail.com%E7%9A%84%E4%BC%81%E4%B8%9A-2022-12-09_22-19-43.zip" title="下载文件">下载文件</a></p></div><div class="tab-pane" id="link-2"><p><a href="http://www.bing.com/" title="link title" target="">本页面跳转</a></p>
<p><a href="http://www.bing.com/" title="link title" target="_blank">新页面跳转</a></p></div><div class="tab-pane" id="link-3"><h2 id="网址和-Email-地址"><a href="#网址和-Email-地址" class="headerlink" title="网址和 Email 地址"></a>网址和 Email 地址</h2><p><a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown 语法</a></p>
<p><a href="mailto:&#x66;&#x61;&#107;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x66;&#x61;&#107;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></p>
<h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.</p>
<h2 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h2><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>
<h3 id="描点"><a href="#描点" class="headerlink" title="描点"></a>描点</h3><p><a href="#asset-path-id">本页锚点</a></p>
<p><a href="/2022/12/block-quote/#quote-book">非本页锚点</a></p></div></div></div>

<div class="tabs" id="image"><ul class="nav-tabs"><li class="tab active"><a href="#image-1">Hexo 标签插件 asset_img</a></li><li class="tab"><a href="#image-2">Hexo 标签插件 Image</a></li><li class="tab"><a href="#image-3">Hexo 标签插件 Image</a></li></ul><div class="tab-content"><div class="tab-pane active" id="image-1"><img src="/2022/12/resource-quote/test1.jpg" class="" width="200" height="300" title="title text from asset_img" alt="alt text from asset_img"></div><div class="tab-pane" id="image-2"><img src="/2022/12/resource-quote/test2.jpg" class="" width="100" height="150" title="title text from img" alt="alt text from img"></div><div class="tab-pane" id="image-3"><p><img src="/2022/12/resource-quote/test3.jpg" alt="alt text from markdown" title="title text from markdown"></p></div></div></div>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>标签插件</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Demo</tag>
        <tag>Resource Quote</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (9) -- Stylelint</title>
    <url>/2022/12/stylelint/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://stylelint.io/">Stylelint</a> 样式代码检查工具。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev stylelint stylelint-config-recommended stylelint-config-standard stylelint-order stylelint-config-rational-order postcss-less postcss-html stylelint-config-prettier stylelint-config-recommended-vue stylelint-config-html</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在代码仓库根目录下添加文件:</p>
<figure class="highlight javascript"><figcaption><span>.stylelintrc.js</span><a href="/downloads/code/stylelint/.stylelintrc.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;stylelint-config-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-rational-order&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-recommended-vue&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;stylelint-order&#x27;</span>, <span class="string">&#x27;stylelint-config-rational-order/plugin&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: {},</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;*.less&#x27;</span>, <span class="string">&#x27;**/*.less&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-less&#x27;</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;*.html&#x27;</span>, <span class="string">&#x27;**/*.html&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-html&#x27;</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;*.vue&#x27;</span>, <span class="string">&#x27;**/*.vue&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-html&#x27;</span>,</span><br><span class="line">    },</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">reportDescriptionlessDisables</span>: [<span class="literal">true</span>, { <span class="attr">except</span>: [] }],</span><br><span class="line">  <span class="attr">reportNeedlessDisables</span>: <span class="literal">true</span>,</span><br><span class="line">};</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>.stylelintignore</span><a href="/downloads/code/stylelint/.stylelintignore">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">dist</span><br><span class="line">dist-web</span><br></pre></td></tr></table></figure>

<h2 id="添加命令"><a href="#添加命令" class="headerlink" title="添加命令"></a>添加命令</h2><p>修改 package.json :</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stylelint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint \&quot;**/*.&#123;vue,htm,html,css,sss,less,scss,sass&#125;\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加-IDE-检查项"><a href="#添加-IDE-检查项" class="headerlink" title="添加 IDE 检查项"></a>添加 IDE 检查项</h2><p>修改 .vscode&#x2F;settings.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;stylelint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;css&quot;</span><span class="punctuation">,</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span> <span class="string">&quot;scss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;svelte&quot;</span><span class="punctuation">,</span> <span class="string">&quot;astro&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Stylelint</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (5) -- Typescript</title>
    <url>/2022/12/typescript/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://www.typescriptlang.org/">Typescript</a> 强类型 Javascript 超集。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><span id="more"></span>

<div class="tabs" id="install"><ul class="nav-tabs"><li class="tab active"><a href="#install-1">TypeScript</a></li><li class="tab"><a href="#install-2">ts-node</a></li></ul><div class="tab-content"><div class="tab-pane active" id="install-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev typescript tsc-alias</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="install-2"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev ts-node tsconfig-paths</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在代码仓库根目录下添加文件:</p>
<div class="tabs" id="config"><ul class="nav-tabs"><li class="tab active"><a href="#config-1">TypeScript</a></li><li class="tab"><a href="#config-2">ts-node</a></li><li class="tab"><a href="#config-3">前端</a></li></ul><div class="tab-content"><div class="tab-pane active" id="config-1"><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Type Checking</span></span><br><span class="line">    <span class="attr">&quot;allowUnreachableCode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowUnusedLabels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exactOptionalPropertyTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitOverride&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noPropertyAccessFromIndexSignature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUncheckedIndexedAccess&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modules</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@src/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emit</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// JavaScript Support</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Editor Support</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Interop Constraints</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Backwards</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Language and Environment</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compiler Diagnostics</span></span><br><span class="line">    <span class="attr">&quot;diagnostics&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Projects</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output Formatting</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Completeness</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Command Line</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Watch Options</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watchOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeAcquisition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="config-2"><p>在 tsconfig.json 中添加配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ts-node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tsconfig-paths/register&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="config-3"><p>在 tsconfig.json 中添加配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.web.json&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><figcaption><span>tsconfig.web.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Type Checking</span></span><br><span class="line">    <span class="attr">&quot;allowUnreachableCode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowUnusedLabels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exactOptionalPropertyTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitOverride&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noPropertyAccessFromIndexSignature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUncheckedIndexedAccess&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modules</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@src/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Emit</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// JavaScript Support</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Editor Support</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Interop Constraints</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Backwards</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Language and Environment</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compiler Diagnostics</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Projects</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><div class="tabs" id="config"><ul class="nav-tabs"><li class="tab active"><a href="#config-1">TypeScript</a></li><li class="tab"><a href="#config-2">ts-node</a></li></ul><div class="tab-content"><div class="tab-pane active" id="config-1"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --project tsconfig.json &amp;&amp; tsc-alias --project tsconfig.json</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="config-2"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ts-node --project tsconfig.json build/build.dev.ts</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 VSCode CPU 占用率高</title>
    <url>/2022/12/vscode-cpu-rate/</url>
    <content><![CDATA[<div class="note warning"><p>这篇文章大概率不能解决你的问题，只是提供解决问题思路！</p>
<p>这篇文章大概率不能解决你的问题，只是提供解决问题思路！</p>
<p>这篇文章大概率不能解决你的问题，只是提供解决问题思路！</p>
</div>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近我一直被一个问题困扰：VSCode CPU 占用率太高。</p>
<p>起初我以为是正常现象，毕竟可能既要马儿不吃草，又要马尔跑得快。后来查看 Windows 任务管理器，发现 VSCode CPU 占用率达100%，以至于导致系统严重卡顿。</p>
<span id="more"></span>

<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>于是我VSCode的进程管理器。可是我没有发现占用CPU的进程。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><div class="note info no-icon"><p>VSCode是什么？</p>
<p>VSCode是一个非常流行的IDE。微软官方提供一个轻量级安装版本。用户在使用时可以安装<strong>插件</strong>协助开发。</p>
</div>

<p>所以问题很可能出在后安装的插件上。我的 VSCode 装了 77 款插件。（<em>的确装得有点多。我有一点收集癖好，喜欢尝试好玩的插件</em> ）</p>
<p>接着，我屏蔽了所有的插件。发现 VSCode CPU 占用率就正常了。</p>
<h3 id="控制变量法"><a href="#控制变量法" class="headerlink" title="控制变量法"></a>控制变量法</h3><blockquote><p>控制变量法（英语：control variates）是在蒙特卡洛方法中用于减少方差的一种技术方法。该方法通过对已知量的了解来减少对未知量估计的误差。</p>
<footer><strong>维基百科</strong><cite><a href="https://zh.m.wikipedia.org/zh-hans/%E6%8E%A7%E5%88%B6%E5%8F%98%E9%87%8F%E6%B3%95">zh.m.wikipedia.org/zh-hans/%E6%8E%A7%E5%88%B6%E5%8F%98%E9%87%8F%E6%B3%95</a></cite></footer></blockquote>

<p>我按照控制变量法，逐步解开被屏蔽的插件。最终发现是一款名叫 <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree</a> 的插件引起的 VSCode CPU 占用率过高。</p>
<p>我在 Todo Tree 插件的配置中，看到一个开关。</p>
<img src="/2022/12/vscode-cpu-rate/debug-switch.png" class="" width="360" title="Todo Tree Debug 开关" alt="Todo Tree Debug 开关">

<p>我打开这个开关，在 Todo Tree 的输出中看到 N 多这样的日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20:17:26.020 Pattern:(//|#|&lt;!--|;|/\*|^|^[ \t]*(-|\d+.))\s*(\[x\]|\[ \]|XXX|TODO|HACK|FIXME|BUG)</span><br><span class="line">20:17:26.021 Command: &quot;d:\Software\Microsoft VS Code\resources\app\node_modules.asar.unpacked\@vscode\ripgrep\bin\rg.exe&quot; --no-messages --vimgrep -H --column --line-number --color never --max-columns=1000 --no-config  -f &quot;c:\Users\Tang Lijin\AppData\Roaming\Code\User\workspaceStorage\de8a3d12cdf87f96eccd36a478da3609\Gruntfuggly.todo-tree\kp7rt03o9.txt&quot; -g &quot;!**/node_modules&quot; -g &quot;!d:\Projects\blog\node_modules\hexo-cli\assets&quot; -g &quot;!d:\Projects\blog\node_modules\hexo-cli\assets\themes\landscape&quot; &quot;d:\Projects\blog\public\themes\next\tags\Resource-Quote&quot;</span><br><span class="line">20:17:26.028 Searching d:\Projects\blog\public\themes\next\downloads\images\avatar.png...</span><br><span class="line">20:17:26.028 Writing pattern file:c:\Users\Tang Lijin\AppData\Roaming\Code\User\workspaceStorage\de8a3d12cdf87f96eccd36a478da3609\Gruntfuggly.todo-tree\10j6oxqq1t.txt</span><br><span class="line">20:17:26.029 Pattern:(//|#|&lt;!--|;|/\*|^|^[ \t]*(-|\d+.))\s*(\[x\]|\[ \]|XXX|TODO|HACK|FIXME|BUG)</span><br><span class="line">20:17:26.030 Command: &quot;d:\Software\Microsoft VS Code\resources\app\node_modules.asar.unpacked\@vscode\ripgrep\bin\rg.exe&quot; --no-messages --vimgrep -H --column --line-number --color never --max-columns=1000 --no-config  -f &quot;c:\Users\Tang Lijin\AppData\Roaming\Code\User\workspaceStorage\de8a3d12cdf87f96eccd36a478da3609\Gruntfuggly.todo-tree\10j6oxqq1t.txt&quot; -g &quot;!**/node_modules&quot; -g &quot;!d:\Projects\blog\node_modules\hexo-cli\assets&quot; -g &quot;!d:\Projects\blog\node_modules\hexo-cli\assets\themes\landscape&quot; &quot;d:\Projects\blog\public\themes\next\downloads\images\avatar.png&quot;</span><br><span class="line">20:17:26.037 Searching d:\Projects\blog\public\themes\next\2022\12\hello-world...</span><br><span class="line">20:17:26.038 Writing pattern file:c:\Users\Tang Lijin\AppData\Roaming\Code\User\workspaceStorage\de8a3d12cdf87f96eccd36a478da3609\Gruntfuggly.todo-tree\3q2hxcp83.txt</span><br></pre></td></tr></table></figure>

<p>这些日志表明 Todo Tree 处理了 d:\Projects\blog\public 下的文件。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>我在 Todo Tree 插件的配置中，又看到一个开关。</p>
<img src="/2022/12/vscode-cpu-rate/enable-file-watcher.png" class="" width="360" title="Todo Tree Watch 开关" alt="Todo Tree Watch 开关">

<p>我把这个开关关闭了，VSCode CPU 占用率就又正常了。</p>
]]></content>
      <categories>
        <category>VSCode</category>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (8) -- Vue</title>
    <url>/2022/12/vue/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://cn.vuejs.org/">Vue</a> Web 前端框架</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save vue</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i --save-dev @types/vue</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>代码仓库初始化模板 (7) -- Webpack</title>
    <url>/2022/12/webpack/</url>
    <content><![CDATA[<!-- markdownlint-disable -->

<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2022/12/git-commit-lint/" title="代码仓库初始化模板 (1) -- husky &amp; commitlint">代码仓库初始化模板 (1) – husky &amp; commitlint</a></p>
</li>
<li><p><a href="/2022/12/editorconfig/" title="代码仓库初始化模板 (2) -- EditorConfig">代码仓库初始化模板 (2) – EditorConfig</a></p>
</li>
<li><p><a href="/2022/12/prettier/" title="代码仓库初始化模板 (3) -- Prettier">代码仓库初始化模板 (3) – Prettier</a></p>
</li>
<li><p><a href="/2022/12/eslint/" title="代码仓库初始化模板 (4) -- ESLint">代码仓库初始化模板 (4) – ESLint</a></p>
</li>
<li><p><a href="/2022/12/typescript/" title="代码仓库初始化模板 (5) -- Typescript">代码仓库初始化模板 (5) – Typescript</a></p>
</li>
<li><p><a href="/2022/12/jest/" title="代码仓库初始化模板 (6) -- Jest">代码仓库初始化模板 (6) – Jest</a></p>
</li>
<li><p><a href="/2022/12/webpack/" title="代码仓库初始化模板 (7) -- Webpack">代码仓库初始化模板 (7) – Webpack</a></p>
</li>
<li><p><a href="/2022/12/vue/" title="代码仓库初始化模板 (8) -- Vue">代码仓库初始化模板 (8) – Vue</a></p>
</li>
<li><p><a href="/2022/12/stylelint/" title="代码仓库初始化模板 (9) -- Stylelint">代码仓库初始化模板 (9) – Stylelint</a></p>
</li>
</ul>

</details>


<p><a href="https://webpack.js.org/">Webpack</a> 静态模块打包工具。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack html-webpack-plugin vue-loader mini-css-extract-plugin copy-webpack-plugin unplugin-auto-import unplugin-vue-components babel-loader @babel/core @babel/preset-env vue-style-loader css-loader postcss-loader less-loader ejs-loader url-loader webpack-merge eslint-webpack-plugin stylelint-webpack-plugin css-minimizer-webpack-plugin webpack-dev-server get-port@5.1.1 webpack-bundle-analyzer @types/webpack-bundle-analyzer dayjs cross-env @babel/preset-typescript autoprefixer postcss-preset-env</span><br></pre></td></tr></table></figure>

<h2 id="Webpack-配置"><a href="#Webpack-配置" class="headerlink" title="Webpack 配置"></a>Webpack 配置</h2><h3 id="webpack-config-base-ts"><a href="#webpack-config-base-ts" class="headerlink" title="webpack.config.base.ts"></a>webpack.config.base.ts</h3><figure class="highlight javascript"><figcaption><span>build/webpack/webpack.config.base.ts</span><a href="/downloads/code/webpack/build/webpack/webpack.config.base.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Configuration</span>, <span class="title class_">DefinePlugin</span> } <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-require-imports</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">VueLoaderPlugin</span> } <span class="keyword">from</span> <span class="string">&#x27;vue-loader&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniCssExtractPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;mini-css-extract-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CopyPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;copy-webpack-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">NaiveUiResolver</span> } <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = {</span><br><span class="line">  <span class="attr">context</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">  <span class="attr">entry</span>: {</span><br><span class="line">    <span class="attr">app</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./src/app.ts&#x27;</span>),</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">output</span>: {</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;script/[name].[contenthash].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./dist-web&#x27;</span>),</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">module</span>: {</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ts|tsx)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">            <span class="attr">options</span>: {</span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            },</span><br><span class="line">          },</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: {</span><br><span class="line">              <span class="attr">lessOptions</span>: {</span><br><span class="line">                <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">              },</span><br><span class="line">            },</span><br><span class="line">          },</span><br><span class="line">        ],</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ejs$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;ejs-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: {</span><br><span class="line">          <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(gif|png|jpe?g|svg)$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: {</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;images/[name]_[contenthash].[ext]&#x27;</span>,</span><br><span class="line">              <span class="attr">limit</span>: <span class="number">1024</span> * <span class="number">5</span>,</span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            },</span><br><span class="line">          },</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;javascript/auto&#x27;</span>,</span><br><span class="line">      },</span><br><span class="line">    ],</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">&#x27;@src&#x27;</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">optimization</span>: {</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">    <span class="comment">// splitChunks 用来拆分代码</span></span><br><span class="line">    <span class="attr">splitChunks</span>: {</span><br><span class="line">      <span class="attr">cacheGroups</span>: {</span><br><span class="line">        <span class="attr">vendor</span>: {</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>({</span><br><span class="line">      <span class="comment">// template: path.resolve(selfModulePath, &#x27;./src/index.ejs&#x27;),</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./src/index.html&#x27;</span>),</span><br><span class="line">      <span class="attr">templateParameters</span>: {</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">      <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>({</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">true</span>),</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">false</span>),</span><br><span class="line">      <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>[<span class="string">&#x27;NODE_ENV&#x27;</span>]),</span><br><span class="line">      <span class="string">&#x27;process.env.STORAGE_ENCRYPT_KEY&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>[<span class="string">&#x27;STORAGE_ENCRYPT_KEY&#x27;</span>]),</span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>({</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">from</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./public&#x27;</span>),</span><br><span class="line">          <span class="attr">filter</span>: <span class="keyword">async</span> (<span class="attr">resourcePath</span>: string) =&gt; {</span><br><span class="line">            <span class="keyword">const</span> pattern = <span class="regexp">/(.gitkeep)/</span>;</span><br><span class="line">            <span class="keyword">return</span> !pattern.<span class="title function_">test</span>(resourcePath);</span><br><span class="line">          },</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">AutoImport</span>({</span><br><span class="line">      <span class="attr">imports</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">&#x27;naive-ui&#x27;</span>: [<span class="string">&#x27;useDialog&#x27;</span>, <span class="string">&#x27;useMessage&#x27;</span>, <span class="string">&#x27;useNotification&#x27;</span>, <span class="string">&#x27;useLoadingBar&#x27;</span>],</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">Components</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">NaiveUiResolver</span>()],</span><br><span class="line">      <span class="comment">// 允许子目录作为组件的命名空间前缀。 防止组件命名冲突</span></span><br><span class="line">      <span class="attr">directoryAsNamespace</span>: <span class="literal">true</span>,</span><br><span class="line">    }),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">performance</span>: {</span><br><span class="line">    <span class="attr">maxAssetSize</span>: <span class="number">1024</span> * <span class="number">800</span>, <span class="comment">// 单位 bytes</span></span><br><span class="line">    <span class="attr">maxEntrypointSize</span>: <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-dev-ts"><a href="#webpack-config-dev-ts" class="headerlink" title="webpack.config.dev.ts"></a>webpack.config.dev.ts</h3><figure class="highlight javascript"><figcaption><span>build/webpack/webpack.config.dev.ts</span><a href="/downloads/code/webpack/build/webpack/webpack.config.dev.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> webpackBaseConfig <span class="keyword">from</span> <span class="string">&#x27;@build/webpack/webpack.config.base&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> {</span><br><span class="line">  <span class="title class_">Configuration</span>,</span><br><span class="line">} <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { merge } <span class="keyword">from</span> <span class="string">&#x27;webpack-merge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniCssExtractPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;mini-css-extract-plugin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Configuration</span> = <span class="title function_">merge</span>(webpackBaseConfig, {</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>({</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;style/[name].css&#x27;</span>,</span><br><span class="line">    }),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">stats</span>: {</span><br><span class="line">    <span class="attr">preset</span>: <span class="string">&#x27;minimal&#x27;</span>,</span><br><span class="line">    <span class="attr">timings</span>: <span class="literal">false</span>,</span><br><span class="line">  },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-prod-ts"><a href="#webpack-config-prod-ts" class="headerlink" title="webpack.config.prod.ts"></a>webpack.config.prod.ts</h3><figure class="highlight javascript"><figcaption><span>build/webpack/webpack.config.prod.ts</span><a href="/downloads/code/webpack/build/webpack/webpack.config.prod.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> webpackBaseConfig <span class="keyword">from</span> <span class="string">&#x27;@build/webpack/webpack.config.base&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ProgressPlugin</span> } <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">BundleAnalyzerPlugin</span> } <span class="keyword">from</span> <span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { merge } <span class="keyword">from</span> <span class="string">&#x27;webpack-merge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ESLintPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;eslint-webpack-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StylelintPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;stylelint-webpack-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CssMinimizerPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;css-minimizer-webpack-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MiniCssExtractPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;mini-css-extract-plugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> packageJSON <span class="keyword">from</span> <span class="string">&#x27;../../package.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getConfig</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> now = <span class="title function_">dayjs</span>()</span><br><span class="line">  <span class="keyword">const</span> analyzerDirPath = path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">`./.build-report/<span class="subst">${now.format(<span class="string">&#x27;YYYY-MM-DD HH_mm_ss&#x27;</span>)}</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> analyzerFilePath = path.<span class="title function_">resolve</span>(analyzerDirPath, <span class="string">&#x27;./report.html&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(webpackBaseConfig, {</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>({</span><br><span class="line">        <span class="attr">analyzerMode</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">        <span class="attr">reportFilename</span>: analyzerFilePath,</span><br><span class="line">        <span class="attr">reportTitle</span>: <span class="string">`<span class="subst">${packageJSON.name}</span> <span class="subst">${now.format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)}</span>`</span>,</span><br><span class="line">        <span class="attr">openAnalyzer</span>: process.<span class="property">env</span>[<span class="string">&#x27;SHOW_ANALYZER&#x27;</span>] === <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">      }),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ProgressPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>({</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;cjs&#x27;</span>, <span class="string">&#x27;mjs&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;cts&#x27;</span>, <span class="string">&#x27;mts&#x27;</span>],</span><br><span class="line">      }),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">StylelintPlugin</span>({</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;scss&#x27;</span>, <span class="string">&#x27;sass&#x27;</span>],</span><br><span class="line">      }),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>({</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;style/[name].[contenthash].css&#x27;</span>,</span><br><span class="line">      }),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">optimization</span>: {</span><br><span class="line">      <span class="attr">minimizer</span>: [</span><br><span class="line">        <span class="comment">// For webpack@5 you can use the `...` syntax to extend existing minimizers (i.e. `terser-webpack-plugin`), uncomment the next line</span></span><br><span class="line">        <span class="string">`...`</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      ],</span><br><span class="line">    },</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getConfig;</span><br></pre></td></tr></table></figure>

<h2 id="Build-代码"><a href="#Build-代码" class="headerlink" title="Build 代码"></a>Build 代码</h2><h3 id="build-dev-ts"><a href="#build-dev-ts" class="headerlink" title="build.dev.ts"></a>build.dev.ts</h3><figure class="highlight javascript"><figcaption><span>build/build.dev.ts</span><a href="/downloads/code/webpack/build/build.dev.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">process.<span class="property">env</span>[<span class="string">&#x27;NODE_ENV&#x27;</span>] = <span class="string">&#x27;development&#x27;</span></span><br><span class="line"><span class="keyword">import</span> { env } <span class="keyword">from</span> <span class="string">&#x27;@ljtang2009/my-admin-common&#x27;</span></span><br><span class="line">env.<span class="title function_">initEnv</span>()</span><br><span class="line"><span class="keyword">import</span> getPort <span class="keyword">from</span> <span class="string">&#x27;get-port&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@build/webpack/webpack.config.dev&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { webpack } <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WebpackDevServer</span> <span class="keyword">from</span> <span class="string">&#x27;webpack-dev-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runServer</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> apiServerUrl = process.<span class="property">env</span>[<span class="string">&#x27;API_MOCK_SERVER_URL&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">devServerOptions</span>: <span class="title class_">WebpackDevServer</span>.<span class="property">Configuration</span> = {</span><br><span class="line">    <span class="attr">client</span>: {</span><br><span class="line">      <span class="attr">logging</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      <span class="attr">overlay</span>: <span class="literal">true</span>, <span class="comment">// 当出现编译错误或警告时，在浏览器中显示全屏覆盖。</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 启用 webpack 的 热模块替换 特性</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="keyword">await</span> <span class="title function_">getPort</span>({</span><br><span class="line">      <span class="attr">port</span>: <span class="built_in">parseInt</span>(process.<span class="property">env</span>[<span class="string">&#x27;WEBSITE_DEV_SERVER_PORT&#x27;</span>]!, <span class="number">10</span>),</span><br><span class="line">    }),</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: apiServerUrl!,</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(config);</span><br><span class="line">  <span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">WebpackDevServer</span>(devServerOptions, compiler);</span><br><span class="line">  <span class="keyword">await</span> server.<span class="title function_">start</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">runServer</span>();</span><br></pre></td></tr></table></figure>

<h3 id="build-prod-ts"><a href="#build-prod-ts" class="headerlink" title="build.prod.ts"></a>build.prod.ts</h3><figure class="highlight javascript"><figcaption><span>build/build.prod.ts</span><a href="/downloads/code/webpack/build/build.prod.ts">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">process.<span class="property">env</span>[<span class="string">&#x27;NODE_ENV&#x27;</span>] = <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> { env } <span class="keyword">from</span> <span class="string">&#x27;@ljtang2009/my-admin-common&#x27;</span>;</span><br><span class="line">env.<span class="title function_">initEnv</span>();</span><br><span class="line"><span class="keyword">import</span> getConfig <span class="keyword">from</span> <span class="string">&#x27;@build/webpack/webpack.config.prod&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">build</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> webpackConfig = <span class="keyword">await</span> <span class="title function_">getConfig</span>();</span><br><span class="line">  <span class="keyword">const</span> stats = <span class="keyword">await</span> <span class="title function_">runWebpack</span>(webpackConfig);</span><br><span class="line">  <span class="keyword">if</span> (stats) {</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(</span><br><span class="line">      stats.<span class="title function_">toString</span>({</span><br><span class="line">        <span class="attr">colors</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">entrypoints</span>: <span class="literal">false</span>,</span><br><span class="line">      }),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    webpackConfig,</span><br><span class="line">    stats,</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runWebpack</span>(<span class="params">webpackConfig: Record&lt;string, any&gt;</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;webpack.<span class="property">Stats</span> | <span class="literal">undefined</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="title function_">webpack</span>(webpackConfig, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">if</span> (err) {</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">resolve</span>(stats);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">build</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Package-脚本"><a href="#Package-脚本" class="headerlink" title="Package 脚本"></a>Package 脚本</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node --project tsconfig.json build/build.dev.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node --project tsconfig.json build/build.prod.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:analyze&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env SHOW_ANALYZER=Y npm run build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Browserslist"><a href="#Browserslist" class="headerlink" title="Browserslist"></a>Browserslist</h2><figure class="highlight javascript"><figcaption><span>.browserslistrc</span><a href="/downloads/code/webpack/.browserslistrc">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">[development]</span><br><span class="line">&gt; <span class="number">1</span>%</span><br><span class="line">last <span class="number">2</span> versions</span><br><span class="line">not dead</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[production]</span><br><span class="line">&gt; <span class="number">1</span>%</span><br><span class="line">last <span class="number">30</span> versions</span><br><span class="line">not dead</span><br></pre></td></tr></table></figure>

<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><figure class="highlight javascript"><figcaption><span>babel.config.js</span><a href="/downloads/code/webpack/babel.config.js">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">api</span>) =&gt;</span> {</span><br><span class="line">  api.<span class="title function_">cache</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">      [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-typescript&#x27;</span>,</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">isTSX</span>: <span class="literal">true</span>, <span class="comment">// 必须设置，否者编译tsx时会报错</span></span><br><span class="line">          <span class="attr">allowNamespaces</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">allExtensions</span>: <span class="literal">true</span>, <span class="comment">// 必须设置，否者编译.vue 文件中ts 代码会报错</span></span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  };</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码仓库初始化模板</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (002) -- GitHub Readme Stats</title>
    <url>/2023/01/recommend-open-source-002/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/01/recommend-open-source-002/banner.svg" alt="GitHub Readme Stats"></p>
<h2 id="GitHub-Readme-Stats"><a href="#GitHub-Readme-Stats" class="headerlink" title="GitHub Readme Stats"></a>GitHub Readme Stats</h2><p>在你的 README 中获取动态生成的 GitHub 统计信息。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/anuraghazra/github-readme-stats" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=anuraghazra/github-readme-stats&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Readme</tag>
        <tag>Stats</tag>
        <tag>Open source</tag>
        <tag>Recommend</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (001) -- Excalidraw 虚拟白板</title>
    <url>/2023/01/recommend-open-source-001/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/01/recommend-open-source-001/banner.png" alt="Excalidraw"></p>
<h2 id="Excalidraw"><a href="#Excalidraw" class="headerlink" title="Excalidraw"></a>Excalidraw</h2><p>虚拟白板，用于流程图或手写。可多人合作，加密。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/excalidraw/excalidraw" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=excalidraw&repo=excalidraw&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=excalidraw/excalidraw&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="ab423b5be-f940-4a14-8cca-e3584627274d" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#ab423b5be-f940-4a14-8cca-e3584627274d').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/@excalidraw/excalidraw");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#ab423b5be-f940-4a14-8cca-e3584627274d'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>Virtual whiteboard</tag>
        <tag>Diagrams</tag>
        <tag>Collaborative</tag>
        <tag>Encrypted</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (003) -- lottery 抽奖</title>
    <url>/2023/01/recommend-open-source-003/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/01/recommend-open-source-003/screenshot.png" alt="lottery"></p>
<h2 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h2><p>年会抽奖程序，3D 球体抽奖，支持奖品信息配置，参与抽奖人员信息Excel导入，抽奖结果Excel导出。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/moshang-xc/lottery" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=moshang-xc&repo=lottery&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=moshang-xc/lottery&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>抽奖</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (004) -- NocoDB 表格</title>
    <url>/2023/01/recommend-open-source-004/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/01/recommend-open-source-004/banner.png" alt="NocoDB"></p>
<h2 id="NocoDB"><a href="#NocoDB" class="headerlink" title="NocoDB"></a>NocoDB</h2><p>将 MySQL、PostgreSQL、SQL Server、SQLite 或 MariaDB 转换为智能电子表格。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/nocodb/nocodb" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=nocodb&repo=nocodb&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=nocodb/nocodb&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>Data</tag>
        <tag>Spreadsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (005) -- star-history</title>
    <url>/2023/01/recommend-open-source-005/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/01/recommend-open-source-005/screenshot.svg" alt="star-history"></p>
<h2 id="Star-History"><a href="#Star-History" class="headerlink" title="Star History"></a>Star History</h2><p>Star-history.com, Github 仓库的星历史图。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/bytebase/star-history" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=bytebase&repo=star-history&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=bytebase/star-history&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>Star History</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (02) -- clean-code-javascript</title>
    <url>/2023/02/best-practice-02/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/best-practice-02/draft.jfif" alt="clean-code-javascript"></p>
<h2 id="clean-code-javascript"><a href="#clean-code-javascript" class="headerlink" title="clean-code-javascript"></a>clean-code-javascript</h2><p>它是用JavaScript编写可读、可重用和可重构软件的指南。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=ryanmcdermott&repo=clean-code-javascript&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=ryanmcdermott/clean-code-javascript&type=Date" loading="lazy" />

<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="使用有意义可读出的变量名称"><a href="#使用有意义可读出的变量名称" class="headerlink" title="使用有意义可读出的变量名称"></a>使用有意义可读出的变量名称</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> yyyymmdstr = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> currentDate = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="对于对同类型的变量使用同一个词"><a href="#对于对同类型的变量使用同一个词" class="headerlink" title="对于对同类型的变量使用同一个词"></a>对于对同类型的变量使用同一个词</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserInfo</span>();</span><br><span class="line"><span class="title function_">getClientData</span>();</span><br><span class="line"><span class="title function_">getCustomerRecord</span>();</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUser</span>();</span><br></pre></td></tr></table></figure>

<h4 id="使用可搜索的变量名"><a href="#使用可搜索的变量名" class="headerlink" title="使用可搜索的变量名"></a>使用可搜索的变量名</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// What the heck is 86400000 for?</span></span><br><span class="line"><span class="built_in">setTimeout</span>(blastOff, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized named constants.</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MILLISECONDS_PER_DAY</span> = <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>; <span class="comment">//86400000;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(blastOff, <span class="variable constant_">MILLISECONDS_PER_DAY</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用解构变量"><a href="#使用解构变量" class="headerlink" title="使用解构变量"></a>使用解构变量</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> address = <span class="string">&quot;One Infinite Loop, Cupertino 95014&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cityZipCodeRegex = <span class="regexp">/^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="title function_">saveCityZipCode</span>(</span><br><span class="line">  address.<span class="title function_">match</span>(cityZipCodeRegex)[<span class="number">1</span>],</span><br><span class="line">  address.<span class="title function_">match</span>(cityZipCodeRegex)[<span class="number">2</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> address = <span class="string">&quot;One Infinite Loop, Cupertino 95014&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cityZipCodeRegex = <span class="regexp">/^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="keyword">const</span> [_, city, zipCode] = address.<span class="title function_">match</span>(cityZipCodeRegex) || [];</span><br><span class="line"><span class="title function_">saveCityZipCode</span>(city, zipCode);</span><br></pre></td></tr></table></figure>

<h4 id="避免头脑映射"><a href="#避免头脑映射" class="headerlink" title="避免头脑映射"></a>避免头脑映射</h4><p>显性比隐性好。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> locations = [<span class="string">&quot;Austin&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;San Francisco&quot;</span>];</span><br><span class="line">locations.<span class="title function_">forEach</span>(<span class="function"><span class="params">l</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doStuff</span>();</span><br><span class="line">  <span class="title function_">doSomeOtherStuff</span>();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// Wait, what is `l` for again?</span></span><br><span class="line">  <span class="title function_">dispatch</span>(l);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> locations = [<span class="string">&quot;Austin&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;San Francisco&quot;</span>];</span><br><span class="line">locations.<span class="title function_">forEach</span>(<span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doStuff</span>();</span><br><span class="line">  <span class="title function_">doSomeOtherStuff</span>();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">dispatch</span>(location);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="不要添加多余的内容"><a href="#不要添加多余的内容" class="headerlink" title="不要添加多余的内容"></a>不要添加多余的内容</h4><p>如果你的类&#x2F;对象名告诉你一些东西，不要在变量名中重复。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">  <span class="attr">carMake</span>: <span class="string">&quot;Honda&quot;</span>,</span><br><span class="line">  <span class="attr">carModel</span>: <span class="string">&quot;Accord&quot;</span>,</span><br><span class="line">  <span class="attr">carColor</span>: <span class="string">&quot;Blue&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintCar</span>(<span class="params">car, color</span>) &#123;</span><br><span class="line">  car.<span class="property">carColor</span> = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&quot;Honda&quot;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;Accord&quot;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;Blue&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintCar</span>(<span class="params">car, color</span>) &#123;</span><br><span class="line">  car.<span class="property">color</span> = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用默认参数值，而不是条件"><a href="#使用默认参数值，而不是条件" class="headerlink" title="使用默认参数值，而不是条件"></a>使用默认参数值，而不是条件</h4><p>默认参数值通常比条件更简洁。注意，如果使用它们，函数只会为未定义的参数提供默认值。其他“falsy”值，如“，”，false, null, 0和NaN，将不会被默认值替换。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMicrobrewery</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> breweryName = name || <span class="string">&quot;Hipster Brew Co.&quot;</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMicrobrewery</span>(<span class="params">name = <span class="string">&quot;Hipster Brew Co.&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="限制入参个数为2个或2个以下"><a href="#限制入参个数为2个或2个以下" class="headerlink" title="限制入参个数为2个或2个以下"></a>限制入参个数为2个或2个以下</h4><p>为了使函数期望的属性更明显，可以使用ES2015&#x2F;ES6解构语法。这有几个优点:</p>
<ol>
<li>当有人查看函数签名时，立即就能清楚使用了什么属性。</li>
<li>它可以用来模拟已命名的参数。</li>
<li>解构还克隆传入函数的参数对象的指定原始值。这有助于防止副作用。注意:从参数对象解构的对象和数组不会被克隆。</li>
<li>Linters可以警告未使用的属性，如果不进行解构，这是不可能的。</li>
</ol>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createMenu</span>(<span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;Bar&quot;</span>, <span class="string">&quot;Baz&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMenu</span>(<span class="params">&#123; title, body, buttonText, cancellable &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createMenu</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="一个函数做一件事"><a href="#一个函数做一件事" class="headerlink" title="一个函数做一件事"></a>一个函数做一件事</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">emailClients</span>(<span class="params">clients</span>) &#123;</span><br><span class="line">  clients.<span class="title function_">forEach</span>(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.<span class="title function_">lookup</span>(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.<span class="title function_">isActive</span>()) &#123;</span><br><span class="line">      <span class="title function_">email</span>(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">emailActiveClients</span>(<span class="params">clients</span>) &#123;</span><br><span class="line">  clients.<span class="title function_">filter</span>(isActiveClient).<span class="title function_">forEach</span>(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isActiveClient</span>(<span class="params">client</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.<span class="title function_">lookup</span>(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.<span class="title function_">isActive</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数名称应该告诉读者其目的"><a href="#函数名称应该告诉读者其目的" class="headerlink" title="函数名称应该告诉读者其目的"></a>函数名称应该告诉读者其目的</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addToDate</span>(<span class="params">date, month</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s hard to tell from the function name what is added</span></span><br><span class="line"><span class="title function_">addToDate</span>(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addMonthToDate</span>(<span class="params">month, date</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="title function_">addMonthToDate</span>(<span class="number">1</span>, date);</span><br></pre></td></tr></table></figure>

<h4 id="函数应该只是一种抽象级别"><a href="#函数应该只是一种抽象级别" class="headerlink" title="函数应该只是一种抽象级别"></a>函数应该只是一种抽象级别</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseBetterJSAlternative</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REGEXES</span> = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> statements = code.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="variable constant_">REGEXES</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">REGEX</span> =&gt;</span> &#123;</span><br><span class="line">    statements.<span class="title function_">forEach</span>(<span class="function"><span class="params">statement</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ast = [];</span><br><span class="line">  tokens.<span class="title function_">forEach</span>(<span class="function"><span class="params">token</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseBetterJSAlternative</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = <span class="title function_">tokenize</span>(code);</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = <span class="title function_">parse</span>(tokens);</span><br><span class="line">  syntaxTree.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tokenize</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REGEXES</span> = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> statements = code.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="variable constant_">REGEXES</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">REGEX</span> =&gt;</span> &#123;</span><br><span class="line">    statements.<span class="title function_">forEach</span>(<span class="function"><span class="params">statement</span> =&gt;</span> &#123;</span><br><span class="line">      tokens.<span class="title function_">push</span>(<span class="comment">/* ... */</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">tokens</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = [];</span><br><span class="line">  tokens.<span class="title function_">forEach</span>(<span class="function"><span class="params">token</span> =&gt;</span> &#123;</span><br><span class="line">    syntaxTree.<span class="title function_">push</span>(<span class="comment">/* ... */</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> syntaxTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除重复代码"><a href="#删除重复代码" class="headerlink" title="删除重复代码"></a>删除重复代码</h4><p>通常情况下，你有重复的代码是因为你有两个或两个以上略有不同的东西，它们有很多共同点，但它们的差异迫使你有两个或两个以上单独的函数，它们做很多相同的事情。删除重复代码意味着创建一个抽象，它可以用一个函数&#x2F;模块&#x2F;类处理这组不同的事情。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDeveloperList</span>(<span class="params">developers</span>) &#123;</span><br><span class="line">  developers.<span class="title function_">forEach</span>(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.<span class="title function_">getExperience</span>();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.<span class="title function_">getGithubLink</span>();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showManagerList</span>(<span class="params">managers</span>) &#123;</span><br><span class="line">  managers.<span class="title function_">forEach</span>(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.<span class="title function_">getExperience</span>();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.<span class="title function_">getMBAProjects</span>();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showEmployeeList</span>(<span class="params">employees</span>) &#123;</span><br><span class="line">  employees.<span class="title function_">forEach</span>(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.<span class="title function_">getExperience</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (employee.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;manager&quot;</span>:</span><br><span class="line">        data.<span class="property">portfolio</span> = employee.<span class="title function_">getMBAProjects</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;developer&quot;</span>:</span><br><span class="line">        data.<span class="property">githubLink</span> = employee.<span class="title function_">getGithubLink</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-Object-assign-设置默认对象"><a href="#使用-Object-assign-设置默认对象" class="headerlink" title="使用 Object.assign 设置默认对象"></a>使用 Object.assign 设置默认对象</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMenu</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  config.<span class="property">title</span> = config.<span class="property">title</span> || <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line">  config.<span class="property">body</span> = config.<span class="property">body</span> || <span class="string">&quot;Bar&quot;</span>;</span><br><span class="line">  config.<span class="property">buttonText</span> = config.<span class="property">buttonText</span> || <span class="string">&quot;Baz&quot;</span>;</span><br><span class="line">  config.<span class="property">cancellable</span> =</span><br><span class="line">    config.<span class="property">cancellable</span> !== <span class="literal">undefined</span> ? config.<span class="property">cancellable</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createMenu</span>(menuConfig);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> menuConfig = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Order&quot;</span>,</span><br><span class="line">  <span class="comment">// User did not include &#x27;body&#x27; key</span></span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&quot;Send&quot;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMenu</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> finalConfig = <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">      <span class="attr">buttonText</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">      <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    config</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> finalConfig</span><br><span class="line">  <span class="comment">// config now equals: &#123;title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createMenu</span>(menuConfig);</span><br></pre></td></tr></table></figure>

<h4 id="不要使用-flag-作为函数参数"><a href="#不要使用-flag-作为函数参数" class="headerlink" title="不要使用 flag 作为函数参数"></a>不要使用 flag 作为函数参数</h4><p>标志告诉用户这个函数不止做一件事。函数只做一件事。如果函数遵循基于布尔值的不同代码路径，则将它们分开。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFile</span>(<span class="params">name, temp</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.<span class="title function_">create</span>(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.<span class="title function_">create</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFile</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">create</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTempFile</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title function_">createFile</span>(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h4><p>如果函数除了接收一个值并返回另一个或多个值之外做了其他事情，则会产生副作用。副作用可能是写入一个文件，修改一些全局变量，或者不小心把你所有的钱都汇给一个陌生人。</p>
<p>你要做的是把你做这件事的地方集中起来。不要有多个函数和类写入特定文件。让一个服务来做这件事。一个，只有一个。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it&#x27;d be an array and it could break it.</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Ryan McDermott&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitIntoFirstAndLastName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  name = name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">splitIntoFirstAndLastName</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// [&#x27;Ryan&#x27;, &#x27;McDermott&#x27;];</span></span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">splitIntoFirstAndLastName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Ryan McDermott&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> newName = <span class="title function_">splitIntoFirstAndLastName</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;Ryan McDermott&#x27;;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newName); <span class="comment">// [&#x27;Ryan&#x27;, &#x27;McDermott&#x27;];</span></span><br></pre></td></tr></table></figure>

<h4 id="避免直接修改函数入参"><a href="#避免直接修改函数入参" class="headerlink" title="避免直接修改函数入参"></a>避免直接修改函数入参</h4><ol>
<li><p>在某些情况下，您可能确实需要修改输入对象，但是当您采用这种编程实践时，您会发现这种情况非常罕见。大多数东西可以重构到没有副作用!</p>
</li>
<li><p>就性能而言，克隆大对象的代价非常高昂。幸运的是，这在实践中并不是一个大问题，因为有很多<a href="https://immutable-js.com/">很棒的库</a>可以让这种编程方法更快，而且不像手动克隆对象和数组那样需要大量内存。</p>
</li>
</ol>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addItemToCart</span> = (<span class="params">cart, item</span>) =&gt; &#123;</span><br><span class="line">  cart.<span class="title function_">push</span>(&#123; item, <span class="attr">date</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addItemToCart</span> = (<span class="params">cart, item</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [...cart, &#123; item, <span class="attr">date</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="不要污染全局"><a href="#不要污染全局" class="headerlink" title="不要污染全局"></a>不要污染全局</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">diff</span> = <span class="keyword">function</span> <span class="title function_">diff</span>(<span class="params">comparisonArray</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="title class_">Set</span>(comparisonArray);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.<span class="title function_">has</span>(elem));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">diff</span>(<span class="params">comparisonArray</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="title class_">Set</span>(comparisonArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.<span class="title function_">has</span>(elem));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数式编程优于命令式编程"><a href="#函数式编程优于命令式编程" class="headerlink" title="函数式编程优于命令式编程"></a>函数式编程优于命令式编程</h4><p>函数式语言更简洁，更容易测试。如果可以，请尽量使用这种编程风格。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Uncle Bobby&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Suzie Q&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jimmy Gosling&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Gracie Hopper&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; programmerOutput.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  totalOutput += programmerOutput[i].<span class="property">linesOfCode</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Uncle Bobby&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Suzie Q&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jimmy Gosling&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Gracie Hopper&quot;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalOutput = programmerOutput.<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">totalLines, output</span>) =&gt;</span> totalLines + output.<span class="property">linesOfCode</span>,</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="封装条件"><a href="#封装条件" class="headerlink" title="封装条件"></a>封装条件</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fsm.<span class="property">state</span> === <span class="string">&quot;fetching&quot;</span> &amp;&amp; <span class="title function_">isEmpty</span>(listNode)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shouldShowSpinner</span>(<span class="params">fsm, listNode</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fsm.<span class="property">state</span> === <span class="string">&quot;fetching&quot;</span> &amp;&amp; <span class="title function_">isEmpty</span>(listNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">shouldShowSpinner</span>(fsmInstance, listNodeInstance)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免使用否定条件句"><a href="#避免使用否定条件句" class="headerlink" title="避免使用否定条件句"></a>避免使用否定条件句</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isDOMNodeNotPresent</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isDOMNodeNotPresent</span>(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isDOMNodePresent</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isDOMNodePresent</span>(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免条件"><a href="#避免条件" class="headerlink" title="避免条件"></a>避免条件</h4><p>这似乎是一个不可能完成的任务。第一次听到这个，大多数人会说:“没有 <code>if</code> 语句，我怎么能做任何事情呢?”答案是，您可以在许多情况下使用多态性来实现相同的任务。第二个问题通常是，“这很好，但我为什么要这么做?”答案是我们之前学过的干净代码概念:函数应该只做一件事。当你的类和函数有 <code>if</code> 语句时，你是在告诉你的用户你的函数不止做一件事。记住，只做一件事。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Airplane</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">getCruisingAltitude</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;777&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>() - <span class="variable language_">this</span>.<span class="title function_">getPassengerCount</span>();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Air Force One&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Cessna&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>() - <span class="variable language_">this</span>.<span class="title function_">getFuelExpenditure</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Airplane</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boeing777</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Airplane</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">getCruisingAltitude</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>() - <span class="variable language_">this</span>.<span class="title function_">getPassengerCount</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirForceOne</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Airplane</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">getCruisingAltitude</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cessna</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Airplane</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">getCruisingAltitude</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMaxAltitude</span>() - <span class="variable language_">this</span>.<span class="title function_">getFuelExpenditure</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免类型检查：使用多态"><a href="#避免类型检查：使用多态" class="headerlink" title="避免类型检查：使用多态"></a>避免类型检查：使用多态</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">travelToTexas</span>(<span class="params">vehicle</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> <span class="title class_">Bicycle</span>) &#123;</span><br><span class="line">    vehicle.<span class="title function_">pedal</span>(<span class="variable language_">this</span>.<span class="property">currentLocation</span>, <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="string">&quot;texas&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> <span class="title class_">Car</span>) &#123;</span><br><span class="line">    vehicle.<span class="title function_">drive</span>(<span class="variable language_">this</span>.<span class="property">currentLocation</span>, <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="string">&quot;texas&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">travelToTexas</span>(<span class="params">vehicle</span>) &#123;</span><br><span class="line">  vehicle.<span class="title function_">move</span>(<span class="variable language_">this</span>.<span class="property">currentLocation</span>, <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="string">&quot;texas&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免类型检查：使用-Typescript"><a href="#避免类型检查：使用-Typescript" class="headerlink" title="避免类型检查：使用 Typescript"></a>避免类型检查：使用 Typescript</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">val1, val2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> val1 === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="keyword">typeof</span> val2 === <span class="string">&quot;number&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> val1 + val2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Must be of type String or Number&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">val1: number, val2: number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> val1 + val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h4><p>现代浏览器在运行时进行了大量的优化。很多时候，如果你在优化，那么你只是在浪费时间。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class="line"><span class="comment">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移除不可调用的代码"><a href="#移除不可调用的代码" class="headerlink" title="移除不可调用的代码"></a>移除不可调用的代码</h4><p>如果它没有被调用，就删除它！如果您仍然需要它，那么它在版本历史记录中仍然是安全的。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">oldRequestModule</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newRequestModule</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = newRequestModule;</span><br><span class="line"><span class="title function_">inventoryTracker</span>(<span class="string">&quot;apples&quot;</span>, req, <span class="string">&quot;www.inventory-awesome.io&quot;</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newRequestModule</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = newRequestModule;</span><br><span class="line"><span class="title function_">inventoryTracker</span>(<span class="string">&quot;apples&quot;</span>, req, <span class="string">&quot;www.inventory-awesome.io&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Objects-and-Data-Structures"><a href="#Objects-and-Data-Structures" class="headerlink" title="Objects and Data Structures"></a>Objects and Data Structures</h3><h4 id="使用getter和setter"><a href="#使用getter和setter" class="headerlink" title="使用getter和setter"></a>使用getter和setter</h4><ol>
<li>当您想要做更多的事情，而不仅仅是获取对象属性时，您不必查找并更改代码库中的每个访问器。</li>
<li>当使用 <code>set</code> 是，添加验证会变得简单。</li>
<li>封装内部表示。</li>
<li>当使用 <code>set</code> 和 <code>get</code> 容易添加日志和错误处理。</li>
<li>你可以延迟加载对象的属性，比如从服务器获取。</li>
</ol>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeBankAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">balance</span>: <span class="number">0</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = <span class="title function_">makeBankAccount</span>();</span><br><span class="line">account.<span class="property">balance</span> = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeBankAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this one is private</span></span><br><span class="line">  <span class="keyword">let</span> balance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a &quot;getter&quot;, made public via the returned object below</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a &quot;setter&quot;, made public via the returned object below</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setBalance</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="comment">// ... validate before updating the balance</span></span><br><span class="line">    balance = amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    getBalance,</span><br><span class="line">    setBalance</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = <span class="title function_">makeBankAccount</span>();</span><br><span class="line">account.<span class="title function_">setBalance</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使对象具有私有成员"><a href="#使对象具有私有成员" class="headerlink" title="使对象具有私有成员"></a>使对象具有私有成员</h4><p>这可以通过闭包来实现(适用于ES5及以下版本)。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Employee</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: undefined</span></span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeEmployee</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="title function_">makeEmployee</span>(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="更多使用ES2015-x2F-ES6类，而不是ES5普通函数"><a href="#更多使用ES2015-x2F-ES6类，而不是ES5普通函数" class="headerlink" title="更多使用ES2015&#x2F;ES6类，而不是ES5普通函数"></a>更多使用ES2015&#x2F;ES6类，而不是ES5普通函数</h4><p>对于经典的ES5类，很难获得可读的类继承、构造和方法定义。如果你需要继承，那么最好选择ES2015&#x2F;ES6类。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Animal</span> = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Animal</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Animal with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mammal</span> = <span class="keyword">function</span>(<span class="params">age, furColor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Mammal</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Mammal with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">furColor</span> = furColor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Mammal</span>;</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">liveBirth</span> = <span class="keyword">function</span> <span class="title function_">liveBirth</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Human</span> = <span class="keyword">function</span>(<span class="params">age, furColor, languageSpoken</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Human</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Human with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Mammal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age, furColor);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">languageSpoken</span> = languageSpoken;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Human</span>;</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">speak</span> = <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mammal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age, furColor</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">furColor</span> = furColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">liveBirth</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Mammal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age, furColor, languageSpoken</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(age, furColor);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">languageSpoken</span> = languageSpoken;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h4><p>这个模式在JavaScript中非常有用，你可以在很多库中看到它，比如jQuery和Lodash。它让你的代码更有表现力，更简洁。在类函数中，只需在每个函数的末尾返回this，就可以将进一步的类方法链接到它上面。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">make, model, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setMake</span>(<span class="params">make</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setModel</span>(<span class="params">model</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">make</span>, <span class="variable language_">this</span>.<span class="property">model</span>, <span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;F-150&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">car.<span class="title function_">setColor</span>(<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">car.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">make, model, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setMake</span>(<span class="params">make</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setModel</span>(<span class="params">model</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">make</span>, <span class="variable language_">this</span>.<span class="property">model</span>, <span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;F-150&quot;</span>, <span class="string">&quot;red&quot;</span>).<span class="title function_">setColor</span>(<span class="string">&quot;pink&quot;</span>).<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>

<h4 id="更多地使用组件而不是继承"><a href="#更多地使用组件而不是继承" class="headerlink" title="更多地使用组件而不是继承"></a>更多地使用组件而不是继承</h4><p>如果你的思维本能地倾向于继承，试着思考组件是否可以更好地模拟你的问题。</p>
<ol>
<li>继承代表一个“is-a”关系 （Human -&gt; Animal），组件是一个“has-a”关系。（User -&gt; UserDetails）</li>
<li>当可以重用基类中的代码，使用继承(Human可以像所有Animal一样move)。否则使用组件</li>
<li>当需要通过修改基类从而修改所有派生类，使用继承（修改动物move的卡路里消耗）。否则使用组件</li>
</ol>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, email</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Employee</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">ssn, salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ssn</span> = ssn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeTaxData</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">ssn, salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ssn</span> = ssn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, email</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setTaxData</span>(<span class="params">ssn, salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taxData</span> = <span class="keyword">new</span> <span class="title class_">EmployeeTaxData</span>(ssn, salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><h4 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a>单一功能原则</h4><blockquote>
<p>修改一个类的原因不应该有多个。</p>
</blockquote>
<p>就像做飞机只带一个行李箱一样，开发者会容易在一个类中塞很多方法。这样做的问题是，这种类在概念上不会是内聚的，它会有很多改变的理由。尽量减少更改类的次数是很重要的。因为如果一个类中有太多的功能，而你修改了其中的一部分，就很难理解这会如何影响代码库中的其他相关模块。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSettings</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeSettings</span>(<span class="params">settings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">verifyCredentials</span>()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">verifyCredentials</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAuth</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">verifyCredentials</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSettings</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = user;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">auth</span> = <span class="keyword">new</span> <span class="title class_">UserAuth</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeSettings</span>(<span class="params">settings</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">auth</span>.<span class="title function_">verifyCredentials</span>()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="开放-x2F-封闭-原则"><a href="#开放-x2F-封闭-原则" class="headerlink" title="开放&#x2F;封闭 原则"></a>开放&#x2F;封闭 原则</h4><blockquote><p>软件实体(类、模块、函数等)应该对扩展开放，对修改封闭。</p>
<footer><strong>Bertrand Meyer</strong></footer></blockquote>

<p>这个原则基本上是说你应该允许用户在不改变现有代码的情况下添加新的功能。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Adapter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ajaxAdapter&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NodeAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Adapter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;nodeAdapter&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HttpRequester</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">adapter</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adapter</span> = adapter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">adapter</span>.<span class="property">name</span> === <span class="string">&quot;ajaxAdapter&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">makeAjaxCall</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// transform response and return</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">adapter</span>.<span class="property">name</span> === <span class="string">&quot;nodeAdapter&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">makeHttpCall</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// transform response and return</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeAjaxCall</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeHttpCall</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Adapter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ajaxAdapter&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NodeAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Adapter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;nodeAdapter&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HttpRequester</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">adapter</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adapter</span> = adapter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">adapter</span>.<span class="title function_">request</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="里氏代换原理"><a href="#里氏代换原理" class="headerlink" title="里氏代换原理"></a>里氏代换原理</h4><p>对于一个非常简单的概念来说，这是一个可怕的术语。它的正式定义是“如果S是T的子类型，那么类型T的对象可以被类型S的对象替换(即，类型S的对象可以替换类型T的对象)，而不改变程序的任何理想属性(正确性、执行的任务等)。”这个定义更可怕。</p>
<p>对此最好的解释是，如果您有一个父类和一个子类，那么基类和子类可以互换使用，而不会得到错误的结果。这可能仍然令人困惑，所以让我们看一看经典的方-矩形示例。从数学上讲，正方形是矩形，但如果你通过继承使用“is-a”关系来建模，你很快就会陷入麻烦。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">area</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setWidth</span>(<span class="params">width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setHeight</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">setWidth</span>(<span class="params">width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setHeight</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderLargeRectangles</span>(<span class="params">rectangles</span>) &#123;</span><br><span class="line">  rectangles.<span class="title function_">forEach</span>(<span class="function"><span class="params">rectangle</span> =&gt;</span> &#123;</span><br><span class="line">    rectangle.<span class="title function_">setWidth</span>(<span class="number">4</span>);</span><br><span class="line">    rectangle.<span class="title function_">setHeight</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">const</span> area = rectangle.<span class="title function_">getArea</span>(); <span class="comment">// BAD: Returns 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.<span class="title function_">render</span>(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangles = [<span class="keyword">new</span> <span class="title class_">Rectangle</span>(), <span class="keyword">new</span> <span class="title class_">Rectangle</span>(), <span class="keyword">new</span> <span class="title class_">Square</span>()];</span><br><span class="line"><span class="title function_">renderLargeRectangles</span>(rectangles);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">area</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderLargeShapes</span>(<span class="params">shapes</span>) &#123;</span><br><span class="line">  shapes.<span class="title function_">forEach</span>(<span class="function"><span class="params">shape</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = shape.<span class="title function_">getArea</span>();</span><br><span class="line">    shape.<span class="title function_">render</span>(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shapes = [<span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">5</span>)];</span><br><span class="line"><span class="title function_">renderLargeShapes</span>(shapes);</span><br></pre></td></tr></table></figure>

<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>没看懂。<a href="https://github.com/ryanmcdermott/clean-code-javascript#interface-segregation-principle-isp">原文</a></p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><ol>
<li>高级模块不应该依赖于低级模块。两者都应该依赖于抽象。</li>
<li>抽象不应该依赖于细节。细节应该依赖于抽象。</li>
</ol>
<p>该原则使高级模块无法了解其低级模块的详细信息并对其进行设置。这样做的一个巨大好处是减少了模块之间的耦合。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryRequester</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">REQ_METHODS</span> = [<span class="string">&quot;HTTP&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryTracker</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">    <span class="comment">// We should just have requestItems depend on a request method: `request`</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">requester</span> = <span class="keyword">new</span> <span class="title class_">InventoryRequester</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">requester</span>.<span class="title function_">requestItem</span>(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inventoryTracker = <span class="keyword">new</span> <span class="title class_">InventoryTracker</span>([<span class="string">&quot;apples&quot;</span>, <span class="string">&quot;bananas&quot;</span>]);</span><br><span class="line">inventoryTracker.<span class="title function_">requestItems</span>();</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryTracker</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">items, requester</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = items;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">requester</span> = requester;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">requester</span>.<span class="title function_">requestItem</span>(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryRequesterV1</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">REQ_METHODS</span> = [<span class="string">&quot;HTTP&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InventoryRequesterV2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">REQ_METHODS</span> = [<span class="string">&quot;WS&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By constructing our dependencies externally and injecting them, we can easily</span></span><br><span class="line"><span class="comment">// substitute our request module for a fancy new one that uses WebSockets.</span></span><br><span class="line"><span class="keyword">const</span> inventoryTracker = <span class="keyword">new</span> <span class="title class_">InventoryTracker</span>(</span><br><span class="line">  [<span class="string">&quot;apples&quot;</span>, <span class="string">&quot;bananas&quot;</span>],</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">InventoryRequesterV2</span>()</span><br><span class="line">);</span><br><span class="line">inventoryTracker.<span class="title function_">requestItems</span>();</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="每次测试只有一个概念"><a href="#每次测试只有一个概念" class="headerlink" title="每次测试只有一个概念"></a>每次测试只有一个概念</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;MomentJS&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;handles date boundaries&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;1/1/2015&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">30</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;1/31/2015&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;2/1/2016&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">28</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;02/29/2016&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;2/1/2015&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">28</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;03/01/2015&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;MomentJS&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;handles 30-day months&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;1/1/2015&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">30</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;1/31/2015&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;handles leap year&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;2/1/2016&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">28</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;02/29/2016&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;handles non-leap year&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">MomentJS</span>(<span class="string">&quot;2/1/2015&quot;</span>);</span><br><span class="line">    date.<span class="title function_">addDays</span>(<span class="number">28</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(<span class="string">&quot;03/01/2015&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="使用-promise-，而不是-callback"><a href="#使用-promise-，而不是-callback" class="headerlink" title="使用 promise ，而不是 callback"></a>使用 promise ，而不是 callback</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&quot;request&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;</span>,</span><br><span class="line">  <span class="function">(<span class="params">requestErr, response, body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestErr) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(requestErr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">writeFile</span>(<span class="string">&quot;article.html&quot;</span>, body, <span class="function"><span class="params">writeErr</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (writeErr) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(writeErr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&quot;request-promise&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs-extra&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">writeFile</span>(<span class="string">&quot;article.html&quot;</span>, body);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Async-x2F-Await甚至比promise更简洁"><a href="#Async-x2F-Await甚至比promise更简洁" class="headerlink" title="Async&#x2F;Await甚至比promise更简洁"></a>Async&#x2F;Await甚至比promise更简洁</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&quot;request-promise&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs-extra&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">writeFile</span>(<span class="string">&quot;article.html&quot;</span>, body);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&quot;request-promise&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&quot;fs-extra&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCleanCodeArticle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> <span class="title function_">get</span>(</span><br><span class="line">      <span class="string">&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">writeFile</span>(<span class="string">&quot;article.html&quot;</span>, body);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getCleanCodeArticle</span>()</span><br></pre></td></tr></table></figure>

<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><h4 id="Don’t-ignore-caught-errors"><a href="#Don’t-ignore-caught-errors" class="headerlink" title="Don’t ignore caught errors"></a>Don’t ignore caught errors</h4><p>将错误记录到控制台(console.log)并没有好到哪里去，因为它经常会被打印到控制台的大量内容所淹没。如果你在try&#x2F;catch中封装了任何一段代码，这意味着你认为那里可能会发生错误，因此你应该有一个处理错误的计划。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">functionThatMightThrow</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">functionThatMightThrow</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  <span class="title function_">notifyUserOfError</span>(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  <span class="title function_">reportErrorToService</span>(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要忽视-promise-的-reject"><a href="#不要忽视-promise-的-reject" class="headerlink" title="不要忽视 promise 的 reject"></a>不要忽视 promise 的 reject</h4><p><a href="https://github.com/ryanmcdermott/clean-code-javascript#dont-ignore-rejected-promises">原文示例代码</a>有误。</p>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><h4 id="只读变量用大写表示"><a href="#只读变量用大写表示" class="headerlink" title="只读变量用大写表示"></a>只读变量用大写表示</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DAYS_IN_WEEK</span> = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> songs = [<span class="string">&quot;Back In Black&quot;</span>, <span class="string">&quot;Stairway to Heaven&quot;</span>, <span class="string">&quot;Hey Jude&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Artists</span> = [<span class="string">&quot;ACDC&quot;</span>, <span class="string">&quot;Led Zeppelin&quot;</span>, <span class="string">&quot;The Beatles&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eraseDatabase</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">restore_database</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alpaca</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DAYS_IN_WEEK</span> = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DAYS_IN_MONTH</span> = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SONGS</span> = [<span class="string">&quot;Back In Black&quot;</span>, <span class="string">&quot;Stairway to Heaven&quot;</span>, <span class="string">&quot;Hey Jude&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARTISTS</span> = [<span class="string">&quot;ACDC&quot;</span>, <span class="string">&quot;Led Zeppelin&quot;</span>, <span class="string">&quot;The Beatles&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eraseDatabase</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">restoreDatabase</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alpaca</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用者在被调用者的上方"><a href="#调用者在被调用者的上方" class="headerlink" title="调用者在被调用者的上方"></a>调用者在被调用者的上方</h4><mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceReview</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">employee</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">employee</span> = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">lookupPeers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> db.<span class="title function_">lookup</span>(<span class="variable language_">this</span>.<span class="property">employee</span>, <span class="string">&quot;peers&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">lookupManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> db.<span class="title function_">lookup</span>(<span class="variable language_">this</span>.<span class="property">employee</span>, <span class="string">&quot;manager&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPeerReviews</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="variable language_">this</span>.<span class="title function_">lookupPeers</span>();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">perfReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getPeerReviews</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getManagerReview</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getSelfReview</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getManagerReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="variable language_">this</span>.<span class="title function_">lookupManager</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSelfReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> <span class="title class_">PerformanceReview</span>(employee);</span><br><span class="line">review.<span class="title function_">perfReview</span>();</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceReview</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">employee</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">employee</span> = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">perfReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getPeerReviews</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getManagerReview</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getSelfReview</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPeerReviews</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="variable language_">this</span>.<span class="title function_">lookupPeers</span>();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">lookupPeers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> db.<span class="title function_">lookup</span>(<span class="variable language_">this</span>.<span class="property">employee</span>, <span class="string">&quot;peers&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getManagerReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="variable language_">this</span>.<span class="title function_">lookupManager</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">lookupManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> db.<span class="title function_">lookup</span>(<span class="variable language_">this</span>.<span class="property">employee</span>, <span class="string">&quot;manager&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSelfReview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> <span class="title class_">PerformanceReview</span>(employee);</span><br><span class="line">review.<span class="title function_">perfReview</span>();</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="只注释具有业务逻辑复杂性的内容"><a href="#只注释具有业务逻辑复杂性的内容" class="headerlink" title="只注释具有业务逻辑复杂性的内容"></a>只注释具有业务逻辑复杂性的内容</h4><p>注释是一种道歉，而不是必须。好的代码大多是本身就是文档。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hashIt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// The hash</span></span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Length of string</span></span><br><span class="line">  <span class="keyword">const</span> length = data.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop through every character in data</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// Get character code.</span></span><br><span class="line">    <span class="keyword">const</span> char = data.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    <span class="comment">// Make the hash</span></span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">5</span>) - hash + char;</span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash &amp;= hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hashIt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> length = data.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> char = data.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    hash = (hash &lt;&lt; <span class="number">5</span>) - hash + char;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash &amp;= hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要在代码库中保留带注释的代码"><a href="#不要在代码库中保留带注释的代码" class="headerlink" title="不要在代码库中保留带注释的代码"></a>不要在代码库中保留带注释的代码</h4><p>版本控制的存在是有原因的。在历史记录中保留旧代码。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doStuff</span>();</span><br><span class="line"><span class="comment">// doOtherStuff();</span></span><br><span class="line"><span class="comment">// doSomeMoreStuff();</span></span><br><span class="line"><span class="comment">// doSoMuchStuff();</span></span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doStuff</span>();</span><br></pre></td></tr></table></figure>

<h4 id="不要写日志注释"><a href="#不要写日志注释" class="headerlink" title="不要写日志注释"></a>不要写日志注释</h4><p>记住，使用版本控制!不需要死代码、注释代码，尤其是日志注释。使用git日志获取历史!</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn&#x27;t understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Removed type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Added combine with type-checking (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免位置标记"><a href="#避免位置标记" class="headerlink" title="避免位置标记"></a>避免位置标记</h4><p>让函数和变量名以及适当的缩进和格式为代码提供可视化结构。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Scope Model Instantiation</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">$scope.<span class="property">model</span> = &#123;</span><br><span class="line">  <span class="attr">menu</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">nav</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Action setup</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">const</span> actions = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">model</span> = &#123;</span><br><span class="line">  <span class="attr">menu</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">nav</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Clean Code</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (01) -- Node.js Best Practices</title>
    <url>/2023/02/best-practice-01/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/best-practice-01/banner.jpg" alt="Node.js Best Practices"></p>
<h2 id="Node-js-Best-Practices"><a href="#Node-js-Best-Practices" class="headerlink" title="Node.js Best Practices"></a>Node.js Best Practices</h2><p>Node.js 最佳实践。很多关于Node.js的优秀文章。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=goldbergyoni&repo=nodebestpractices&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=goldbergyoni/nodebestpractices&type=Date" loading="lazy" />

<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="项目结构实践"><a href="#项目结构实践" class="headerlink" title="项目结构实践"></a>项目结构实践</h3><h4 id="组件式构建解决方案"><a href="#组件式构建解决方案" class="headerlink" title="组件式构建解决方案"></a>组件式构建解决方案</h4><p>最终的解决方案是开发小型软件：将整个堆栈划分为独立的组件，这些组件不与其他组件共享文件，每个组件由很少的文件构成（例如API、服务、数据访问、测试等），因此很容易理解它。</p>
<mark class="label success">推荐</mark>: 通过独立组件构建解决方案

<pre><code>src
└─components
    ├─orders
    ├─products
    └─users
      └─index.js
      └─usersAPI.js
      └─usersDAL.js
</code></pre>
<mark class="label danger">避免</mark>: 按技术角色对文件进行分组

<pre><code>src
└─controllers
└─modules
└─models
  └─users.js
  └─orders.js
  └─products.js
</code></pre>
<h4 id="应用程序分层，保持Express在其范围内"><a href="#应用程序分层，保持Express在其范围内" class="headerlink" title="应用程序分层，保持Express在其范围内"></a>应用程序分层，保持Express在其范围内</h4><mark class="label success">推荐</mark>: 创建并传递定制的上下问对象。

<figure class="highlight javascript"><figcaption><span>usersAPI.js</span></figcaption><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, (req, res, next) = &#123;</span><br><span class="line">  usersDBAccess.<span class="title function_">getByID</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">userID</span>: req.<span class="property">user</span>.<span class="property">id</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>usersDAL.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersDAL</span> &#123;</span><br><span class="line">  <span class="title function_">getByID</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">otherFunction</span>(config.<span class="property">userID</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>: Express 对象（例如 request, response）传递到业务逻辑层。

<p>这将使得整个系统过渡依赖 Express，并且不可单元测试。</p>
<figure class="highlight javascript"><figcaption><span>usersAPI.js</span></figcaption><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, (req, res, next) = &#123;</span><br><span class="line">  usersDBAccess.<span class="title function_">getByID</span>(req);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>usersDAL.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersDAL</span> &#123;</span><br><span class="line">  <span class="title function_">getByID</span>(<span class="params">req</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">otherFunction</span>(req);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将公用实用工具封装成-npm-包"><a href="#将公用实用工具封装成-npm-包" class="headerlink" title="将公用实用工具封装成 npm 包"></a>将公用实用工具封装成 npm 包</h4><p>无需公开分享 <a href="https://docs.npmjs.com/private-modules/intro">私人模块</a>, <a href="https://npme.npmjs.com/docs/tutorials/npm-enterprise-with-nexus.html">私人注册表</a> 或 <a href="https://medium.com/@arnaudrinquin/build-modular-application-with-npm-local-modules-dfc5ff047bcc">本地 npm 包</a>。</p>
<h4 id="使用环境感知，安全，分层的配置"><a href="#使用环境感知，安全，分层的配置" class="headerlink" title="使用环境感知，安全，分层的配置"></a>使用环境感知，安全，分层的配置</h4><p>配置分环境（例如测试环境，生成环境）。<mark class="label danger">避免</mark>存储像密码数据这样的敏感信息。<a href="https://www.npmjs.com/package/dotenv">dotenv</a>, <a href="https://www.npmjs.com/package/config">config</a>可选用．</p>
<h3 id="错误处理最佳实践"><a href="#错误处理最佳实践" class="headerlink" title="错误处理最佳实践"></a>错误处理最佳实践</h3><h4 id="对于异步的错误处理，使用-Async-Await-或者-promises"><a href="#对于异步的错误处理，使用-Async-Await-或者-promises" class="headerlink" title="对于异步的错误处理，使用 Async-Await 或者 promises"></a>对于异步的错误处理，使用 Async-Await 或者 promises</h4><p>使用 promises 捕获错误:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doWork</span>()</span><br><span class="line">  .<span class="title function_">then</span>(doWork)</span><br><span class="line">  .<span class="title function_">then</span>(doOtherWork)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> doWork)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(verify);</span><br></pre></td></tr></table></figure>

<p>使用 async&#x2F;await 捕获错误:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">executeAsyncTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> valueA = <span class="keyword">await</span> <span class="title function_">functionA</span>();</span><br><span class="line">    <span class="keyword">const</span> valueB = <span class="keyword">await</span> <span class="title function_">functionB</span>(valueA);</span><br><span class="line">    <span class="keyword">const</span> valueC = <span class="keyword">await</span> <span class="title function_">functionC</span>(valueB);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">functionD</span>(valueC);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    logger.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">alwaysExecuteThisFunction</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="仅使用内建的错误对象"><a href="#仅使用内建的错误对象" class="headerlink" title="仅使用内建的错误对象"></a>仅使用内建的错误对象</h4><p>使用Node.js的内置错误对象有助于在你的代码和第三方库之间保持一致性，它还保留了重要信息，比如StackTrace。当引发异常时，给异常附加上下文属性（如错误名称和相关的HTTP错误代码）通常是一个好的习惯。</p>
<mark class="label success">推荐</mark>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从典型函数抛出错误, 无论是同步还是异步</span></span><br><span class="line"><span class="keyword">if</span>(!productToAdd)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;How can I add new product when no value provided?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从EventEmitter抛出错误</span></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> <span class="title class_">MyEmitter</span>();</span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;whoops!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//从promise抛出错误</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title class_">Return</span> <span class="variable constant_">DAL</span>.<span class="title function_">getProduct</span>(productToAdd.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">existingProduct</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(existingProduct != <span class="literal">null</span>)</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Why fooling us and trying to add an existing product?&quot;</span>));</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抛出字符串错误缺少任何stack trace信息和其他重要属性</span></span><br><span class="line"><span class="keyword">if</span>(!productToAdd)</span><br><span class="line">    <span class="keyword">throw</span> (<span class="string">&quot;How can I add new product when no value provided?&quot;</span>);</span><br></pre></td></tr></table></figure>

<mark class="label success">更推荐</mark>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从node错误派生的集中错误对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">appError</span>(<span class="params">name, httpCode, description, isOperational</span>) &#123;</span><br><span class="line">    <span class="title class_">Error</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="title class_">Error</span>.<span class="title function_">captureStackTrace</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="comment">//...在这赋值其它属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">appError.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Error</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">appError.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = appError;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">appError</span> = appError;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端抛出一个错误</span></span><br><span class="line"><span class="keyword">if</span>(user == <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title function_">appError</span>(commonErrors.<span class="property">resourceNotFound</span>, commonHTTPErrors.<span class="property">notFound</span>, <span class="string">&quot;further explanation&quot;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h4 id="区分操作型错误和程序设计错误"><a href="#区分操作型错误和程序设计错误" class="headerlink" title="区分操作型错误和程序设计错误"></a>区分操作型错误和程序设计错误</h4><p>区分以下两种错误类型将最大限度地减少应用程序停机时间并帮助避免出现荒唐的错误: 操作型错误指的是您了解发生了什么情况及其影响的情形 – 例如, 由于连接问题而导致对某些 HTTP 服务的查询失败问题。另一方面, 程序型错误指的是您不知道原因, 有时是错误不知道来自何处的情况 – 可能是一些代码试图读取未定义的值或 DB 连接池内存泄漏。操作型错误相对容易处理 – 通常记录错误就足够了。当程序型错误出现，事情变得难以应付, 应用程序可能处于不一致状态, 你可以做的，没有什么比优雅的重新启动更好了。</p>
<h4 id="集中处理错误"><a href="#集中处理错误" class="headerlink" title="集中处理错误"></a>集中处理错误</h4><p>一个典型的错误处理流程可能是：一些模块抛出一个错误 -&gt; API路由器捕获错误 -&gt; 它传播错误给负责捕获错误的中间件（如Express，KOA）-&gt; 集中式错误处理程序被调用 -&gt; 中间件正在被告之这个错误是否是一个不可信的错误（不是操作型错误），这样可以优雅的重新启动应用程序。</p>
<p>一个典型错误流:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DAL层, 在这里我们不处理错误</span></span><br><span class="line"><span class="variable constant_">DB</span>.<span class="title function_">addDocument</span>(newCustomer, <span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Great error explanation comes here&quot;</span>, other useful parameters)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//API路由代码, 我们同时捕获异步和同步错误，并转到中间件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    customerService.<span class="title function_">addNew</span>(req.<span class="property">body</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(result);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>(error)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理中间件，我们委托集中式错误处理程序处理错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">    errorHandler.<span class="title function_">handleError</span>(err).<span class="title function_">then</span>(<span class="function">(<span class="params">isOperationalError</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isOperationalError)</span><br><span class="line">            <span class="title function_">next</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在一个专门的对象里面处理错误:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">handler</span> = <span class="keyword">new</span> <span class="title function_">errorHandler</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleError</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> logger.<span class="title function_">logError</span>(err).<span class="title function_">then</span>(sendMailToAdminIfCritical).<span class="title function_">then</span>(saveInOpsQueueIfCritical).<span class="title function_">then</span>(determineIfOperationalError);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用接口管理平台对API错误文档化"><a href="#使用接口管理平台对API错误文档化" class="headerlink" title="使用接口管理平台对API错误文档化"></a>使用接口管理平台对API错误文档化</h4><p>REST API使用HTTP代码返回结果, API用户不仅绝对需要了解API schema, 而且还要注意潜在错误 – 调用方可能会捕获错误并巧妙地处理它。例如, 您的api文档可能提前指出, 当客户名称已经存在时, HTTP状态409将返回 (假设api注册新用户), 因此调用方可以相应地呈现给定情况下的最佳UX。<br>工具参考: <a href="https://developer.aliyun.com/article/925370#slide-2">https://developer.aliyun.com/article/925370#slide-2</a></p>
<h4 id="特殊情况产生时，优雅地退出服务"><a href="#特殊情况产生时，优雅地退出服务" class="headerlink" title="特殊情况产生时，优雅地退出服务"></a>特殊情况产生时，优雅地退出服务</h4><p>杀进程，使用“重启”的工具（像Forever，PM2，等等）重新开始。</p>
<p>决定是否退出:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Assuming developers mark known operational errors with error.isOperational=true, read best practice #3</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">  errorManagement.<span class="property">handler</span>.<span class="title function_">handleError</span>(error);</span><br><span class="line">  <span class="keyword">if</span>(!errorManagement.<span class="property">handler</span>.<span class="title function_">isTrustedError</span>(error))</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// centralized error object that derives from Node’s Error</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  public readonly <span class="attr">isOperational</span>: boolean;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">description: string, isOperational: boolean</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(description);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, <span class="keyword">new</span>.<span class="property">target</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// restore prototype chain</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isOperational</span> = isOperational;</span><br><span class="line">    <span class="title class_">Error</span>.<span class="title function_">captureStackTrace</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// centralized error handler encapsulates error-handling related logic</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorHandler</span> &#123;</span><br><span class="line">  public <span class="keyword">async</span> <span class="title function_">handleError</span>(<span class="attr">err</span>: <span class="title class_">Error</span>): <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> logger.<span class="title function_">logError</span>(err);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sendMailToAdminIfCritical</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">saveInOpsQueueIfCritical</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">determineIfOperationalError</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  public <span class="title function_">isTrustedError</span>(<span class="params">error: <span class="built_in">Error</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">AppError</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> error.<span class="property">isOperational</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handler = <span class="keyword">new</span> <span class="title class_">ErrorHandler</span>();</span><br></pre></td></tr></table></figure>

<h4 id="使用成熟的logger提高错误可见性"><a href="#使用成熟的logger提高错误可见性" class="headerlink" title="使用成熟的logger提高错误可见性"></a>使用成熟的logger提高错误可见性</h4><p>一套实践和工具将有助于更快速地解释错误 – (1)使用不同的级别（debug, info, error）频繁地log；(2)在记录日志时, 以 JSON 对象的方式提供上下文信息, 请参见下面的示例；(3)使用日志查询API(在大多数logger中内置)或日志查看程序软件监视和筛选日志；(4)使用操作智能工具(如 Splunk)为操作团队公开和管理日志语句。<br><a href="https://www.npmjs.com/package/pino">Pino</a>(专注于性能的新库), <a href="https://www.npmjs.com/package/winston">Winston</a>(非常流行).</p>
<h4 id="使用你最喜欢的测试框架测试错误流"><a href="#使用你最喜欢的测试框架测试错误流" class="headerlink" title="使用你最喜欢的测试框架测试错误流"></a>使用你最喜欢的测试框架测试错误流</h4><h4 id="使用-APM-产品发现错误和宕机时间"><a href="#使用-APM-产品发现错误和宕机时间" class="headerlink" title="使用 APM 产品发现错误和宕机时间"></a>使用 APM 产品发现错误和宕机时间</h4><p>异常 !&#x3D; 错误。传统的错误处理假定存在异常，但应用程序错误可能以代码路径慢，API停机，缺少计算资源等形式出现。因为APM产品允许使用最小的设置来先前一步地检测各种各样 “深埋” 的问题，这是运用它们方便的地方。APM产品的常见功能包括: 当HTTP API返回错误时报警, 在API响应时间低于某个阈值时能被检测, 觉察到‘code smells’，监视服务器资源，包含IT度量的操作型智能仪表板以及其他许多有用的功能。</p>
<h4 id="捕获未处理的promise-rejections"><a href="#捕获未处理的promise-rejections" class="headerlink" title="捕获未处理的promise rejections"></a>捕获未处理的promise rejections</h4><p>使用一个优雅的回调并订阅到process.on（’unhandledrejection’，callback）是高度推荐的 – 这将确保任何promise错误，如果不是本地处理，将在这处理。</p>
<p>这些错误将不会得到任何错误处理程序捕获（除了 unhandledrejection）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DAL</span>.<span class="title function_">getUserById</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">johnSnow</span>) =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//this error will just vanish</span></span><br><span class="line">  <span class="keyword">if</span>(johnSnow.<span class="property">isAlive</span> == <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;ahhhh&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>捕获 unresolved 和 rejected 的 promise:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, p</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//我刚刚捕获了一个未处理的promise rejection, 因为我们已经有了对于未处理错误的后备的处理机制（见下面）, 直接抛出，让它来处理</span></span><br><span class="line">  <span class="keyword">throw</span> reason;</span><br><span class="line">&#125;);</span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//我刚收到一个从未被处理的错误，现在处理它，并决定是否需要重启应用</span></span><br><span class="line">  errorManagement.<span class="property">handler</span>.<span class="title function_">handleError</span>(error);</span><br><span class="line">  <span class="keyword">if</span> (!errorManagement.<span class="property">handler</span>.<span class="title function_">isTrustedError</span>(error))</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="快速报错，使用专用库验证参数"><a href="#快速报错，使用专用库验证参数" class="headerlink" title="快速报错，使用专用库验证参数"></a>快速报错，使用专用库验证参数</h4><p>由于对显式编程和防御性编程是件恼人的事情（比如考虑验证分层的JSON对象，它包含像email和日期这样的字段），我们倾向于避免做这样的事情 – 像Joi这样的库和验证器轻而易举的处理这个乏味的任务。</p>
<p>使用‘Joi’验证复杂的JSON输入:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> memberSchema = <span class="title class_">Joi</span>.<span class="title function_">object</span>().<span class="title function_">keys</span>(&#123;</span><br><span class="line"> <span class="attr">password</span>: <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">regex</span>(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>),</span><br><span class="line"> <span class="attr">birthyear</span>: <span class="title class_">Joi</span>.<span class="title function_">number</span>().<span class="title function_">integer</span>().<span class="title function_">min</span>(<span class="number">1900</span>).<span class="title function_">max</span>(<span class="number">2013</span>),</span><br><span class="line"> <span class="attr">email</span>: <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">email</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addNewMember</span>(<span class="params">newMember</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//assertions come first</span></span><br><span class="line"> <span class="title class_">Joi</span>.<span class="title function_">assert</span>(newMember, memberSchema); <span class="comment">//throws if validation fails</span></span><br><span class="line"> <span class="comment">//other logic here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在-return-之前，总是使用-await-来避免遗漏堆栈跟踪"><a href="#在-return-之前，总是使用-await-来避免遗漏堆栈跟踪" class="headerlink" title="在 return 之前，总是使用 await 来避免遗漏堆栈跟踪"></a>在 return 之前，总是使用 await 来避免遗漏堆栈跟踪</h4><p>如果一个异步函数没有等待就返回一个promise(例如调用其他异步函数)，如果发生错误，那么调用方函数将不会出现在堆栈跟踪中。</p>
<p>这将使诊断错误的人只得到部分信息。</p>
<h5 id="适当地-call-和-await"><a href="#适当地-call-和-await" class="headerlink" title="适当地 call 和 await"></a>适当地 call 和 await</h5><mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">throwAsync</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span> <span class="comment">// 至少需要 await 一些东西才能真正实现异步</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="title class_">Error</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">returnWithAwait</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">throwAsync</span>(<span class="string">&#x27;with all frames present&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👍 will have returnWithAwait in the stacktrace</span></span><br><span class="line"><span class="title function_">returnWithAwait</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: with all frames present</span><br><span class="line">    at throwAsync ([...])</span><br><span class="line">    at async returnWithAwait ([...])</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">throwAsync</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span> <span class="comment">// 至少需要 await 一些东西才能真正实现异步</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="title class_">Error</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">returnWithoutAwait</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">throwAsync</span>(<span class="string">&#x27;missing returnWithoutAwait in the stacktrace&#x27;</span>) <span class="comment">// 没有等待 await</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👎 will NOT have returnWithoutAwait in the stacktrace</span></span><br><span class="line"><span class="title function_">returnWithoutAwait</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: missing returnWithoutAwait in the stacktrace</span><br><span class="line">    at throwAsync ([...])</span><br></pre></td></tr></table></figure>

<h5 id="将返回-promise-的函数标记为-async"><a href="#将返回-promise-的函数标记为-async" class="headerlink" title="将返回 promise 的函数标记为 async"></a>将返回 promise 的函数标记为 async</h5><mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">throwAsync</span> () &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span> <span class="comment">// 至少需要 await 一些东西才能真正实现异步</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;with all frames present&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">changedFromSyncToAsyncFn</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">throwAsync</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFn</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">changedFromSyncToAsyncFn</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👍 now changedFromSyncToAsyncFn would present in the stacktrace</span></span><br><span class="line"><span class="title function_">asyncFn</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: with all frames present</span><br><span class="line">    at throwAsync ([...])</span><br><span class="line">    at changedFromSyncToAsyncFn ([...])</span><br><span class="line">    at async asyncFn ([...])</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">throwAsync</span> () &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;missing syncFn in the stacktrace&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">syncFn</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">throwAsync</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFn</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">syncFn</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👎 syncFn would be missing in the stacktrace because it returns a promise while been sync</span></span><br><span class="line"><span class="title function_">asyncFn</span>().<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: missing syncFn in the stacktrace</span><br><span class="line">    at throwAsync ([...])</span><br><span class="line">    at async asyncFn ([...])</span><br></pre></td></tr></table></figure>

<h5 id="在将异步回调作为同步回调传递之前，将异步回调封装在一个虚拟异步函数中"><a href="#在将异步回调作为同步回调传递之前，将异步回调封装在一个虚拟异步函数中" class="headerlink" title="在将异步回调作为同步回调传递之前，将异步回调封装在一个虚拟异步函数中"></a>在将异步回调作为同步回调传递之前，将异步回调封装在一个虚拟异步函数中</h5><mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span> (id) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (!id) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;with all frames present&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;id&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userIds = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👍 now the line below is in the stacktrace</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(userIds.<span class="title function_">map</span>(<span class="keyword">async</span> id =&gt; <span class="keyword">await</span> <span class="title function_">getUser</span>(id))).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: with all frames present</span><br><span class="line">    at getUser ([...])</span><br><span class="line">    at async ([...])</span><br><span class="line">    at async Promise.all (index 2)</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span> (id) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (!id) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;stacktrace is missing the place where getUser has been called&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;id&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userIds = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👎 the stacktrace would include getUser function but would give no clue on where it has been called</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(userIds.<span class="title function_">map</span>(getUser)).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: stacktrace is missing the place where getUser has been called</span><br><span class="line">    at getUser ([...])</span><br><span class="line">    at async Promise.all (index 2)</span><br></pre></td></tr></table></figure>

<h3 id="编码风格实践"><a href="#编码风格实践" class="headerlink" title="编码风格实践"></a>编码风格实践</h3><h4 id="使用-ESLint-和-Prettier"><a href="#使用-ESLint-和-Prettier" class="headerlink" title="使用 ESLint 和 Prettier"></a>使用 ESLint 和 Prettier</h4><p><a href="https://eslint.org/">ESLint</a>检查可能的代码错误和修复代码样式，<a href="https://www.npmjs.com/package/prettier">prettier</a>和<a href="https://www.npmjs.com/package/js-beautify">beautify</a>在格式化修复上功能强大，可以和ESlint结合起来使用。</p>
<h4 id="使用ESLint-插件"><a href="#使用ESLint-插件" class="headerlink" title="使用ESLint 插件"></a>使用ESLint 插件</h4><p>除了仅仅涉及 vanilla JS 的 ESLint 标准规则，添加 Node 相关的插件，比如<a href="https://www.npmjs.com/package/eslint-plugin-node">eslint-plugin-node</a>, <a href="https://www.npmjs.com/package/eslint-plugin-mocha">eslint-plugin-mocha</a> and <a href="https://www.npmjs.com/package/eslint-plugin-security">eslint-plugin-node-security</a>。</p>
<h4 id="在同一行开始一个代码块的大括号"><a href="#在同一行开始一个代码块的大括号" class="headerlink" title="在同一行开始一个代码块的大括号"></a>在同一行开始一个代码块的大括号</h4><mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someFunction</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要忘记分号"><a href="#不要忘记分号" class="headerlink" title="不要忘记分号"></a>不要忘记分号</h4><p>即使没有获得一致的认同，但在每一个表达式后面放置分号还是值得推荐的。这将使您的代码, 对于其他阅读代码的开发者来说，可读性，明确性更强。</p>
<p>否则: 在前面的章节里面已经提到，如果表达式的末尾没有添加分号，JavaScript的解释器会在自动添加一个，这可能会导致一些意想不到的结果。</p>
<h4 id="命名您的方法"><a href="#命名您的方法" class="headerlink" title="命名您的方法"></a>命名您的方法</h4><p>命名所有的方法，包含闭包和回调, 避免匿名方法。当剖析一个node应用的时候，这是特别有用的。命名所有的方法将会使您非常容易的理解内存快照中您正在查看的内容。</p>
<h4 id="变量、常量、函数和类的命名约定"><a href="#变量、常量、函数和类的命名约定" class="headerlink" title="变量、常量、函数和类的命名约定"></a>变量、常量、函数和类的命名约定</h4><p>当命名变量和方法的时候，使用 lowerCamelCase ，当命名类的时候，使用 UpperCamelCase （首字母大写），对于常量，则 UPPERCASE</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for global variables names we use the const/let keyword and UPPER_SNAKE_CASE</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">MUTABLE_GLOBAL</span> = <span class="string">&quot;mutable value&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GLOBAL_CONSTANT</span> = <span class="string">&quot;immutable value&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// examples of UPPER_SNAKE_CASE convention in nodejs/javascript ecosystem</span></span><br><span class="line"><span class="comment">// in javascript Math.PI module</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.141592653589793</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://github.com/nodejs/node/blob/b9f36062d7b5c5039498e98d2f2c180dca2a7065/lib/internal/http2/core.js#L303</span></span><br><span class="line"><span class="comment">// in nodejs http2 module</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HTTP_STATUS_OK</span> = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HTTP_STATUS_CREATED</span> = <span class="number">201</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for class name we use UpperCamelCase</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClassExample</span> &#123;</span><br><span class="line">  <span class="comment">// for static class properties we use UPPER_SNAKE_CASE</span></span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">STATIC_PROPERTY</span> = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for functions names we use lowerCamelCase</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// for scoped variable names we use the const/let keyword and lowerCamelCase</span></span><br><span class="line">  <span class="keyword">const</span> someConstExample = <span class="string">&quot;immutable value&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> someMutableExample = <span class="string">&quot;mutable value&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用const优于let，废弃var"><a href="#使用const优于let，废弃var" class="headerlink" title="使用const优于let，废弃var"></a>使用const优于let，废弃var</h4><p>使用const意味着一旦一个变量被分配，它不能被重新分配。使用const将帮助您免于使用相同的变量用于不同的用途，并使你的代码更清晰。如果一个变量需要被重新分配，以在一个循环为例，使用let声明它。let的另一个重要方面是，使用let声明的变量只在定义它的块作用域中可用。 var是函数作用域，不是块级作用域，既然您有const和let让您随意使用，那么<a href="https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70">不应该在ES6中使用var</a>。</p>
<h4 id="先require-而不是在方法内部"><a href="#先require-而不是在方法内部" class="headerlink" title="先require, 而不是在方法内部"></a>先require, 而不是在方法内部</h4><p>在每个文件的起始位置，在任何函数的前面和外部require模块。这种简单的最佳实践，不仅能帮助您轻松快速地在文件顶部辨别出依赖关系，而且避免了一些潜在的问题。</p>
<p>在Node.js中，require 是同步运行的。如果从函数中调用它们，它可能会阻塞其他请求，在更关键的时间得到处理。另外，如果所require的模块或它自己的任何依赖项抛出错误并使服务器崩溃，最好尽快查明它，如果该模块在函数中require的，则不能尽早发现这种的情况。</p>
<h4 id="require-文件夹，而不是文件"><a href="#require-文件夹，而不是文件" class="headerlink" title="require 文件夹，而不是文件"></a>require 文件夹，而不是文件</h4><p>当在一个文件夹中开发库&#x2F;模块，放置一个文件index.js暴露模块的 内部，这样每个消费者都会通过它。这将作为您模块的一个接口，并使未来的变化简单而不违反规则。</p>
<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">SMSProvider</span> = <span class="built_in">require</span>(<span class="string">&#x27;./SMSProvider&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">SMSNumberResolver</span> = <span class="built_in">require</span>(<span class="string">&#x27;./SMSNumberResolver&#x27;</span>);</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">SMSProvider</span> = <span class="built_in">require</span>(<span class="string">&#x27;./SMSProvider/SMSProvider.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">SMSNumberResolver</span> = <span class="built_in">require</span>(<span class="string">&#x27;./SMSNumberResolver/SMSNumberResolver.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用-x3D-x3D-x3D-操作符"><a href="#使用-x3D-x3D-x3D-操作符" class="headerlink" title="使用 &#x3D;&#x3D;&#x3D; 操作符"></a>使用 &#x3D;&#x3D;&#x3D; 操作符</h4><p>对比弱等于 &#x3D;&#x3D;，优先使用严格的全等于 &#x3D;&#x3D;&#x3D; 。&#x3D;&#x3D; 将在它们转换为普通类型后比较两个变量。在 &#x3D;&#x3D;&#x3D; 中没有类型转换，并且两个变量必须是相同的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="string">&#x27;0&#x27;</span>           <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>             <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>            <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>    <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span>        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>       <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; \t\r\n &#x27;</span> == <span class="number">0</span>     <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果使用 &#x3D;&#x3D;&#x3D; ， 上面所有语句都将返回 false。</p>
<h4 id="使用-Async-Await-避免回调"><a href="#使用-Async-Await-避免回调" class="headerlink" title="使用 Async Await, 避免回调"></a>使用 Async Await, 避免回调</h4><p>Node 8 LTS现已全面支持异步等待。这是一种新的方式处理异步请求，取代回调和promise。Async-await是非阻塞的，它使异步代码看起来像是同步的。您可以给你的代码的最好的礼物是用async-await提供了一个更紧凑的，熟悉的，类似try catch的代码语法。</p>
<h4 id="使用-x3D-gt-箭头函数"><a href="#使用-x3D-gt-箭头函数" class="headerlink" title="使用 (&#x3D;&gt;) 箭头函数"></a>使用 (&#x3D;&gt;) 箭头函数</h4><p>尽管使用 async-await 和避免方法作为参数是被推荐的, 但当处理那些接受promise和回调的老的API的时候 - 箭头函数使代码结构更加紧凑，并保持了根方法上的语义上下文 (例如 ‘this’)。</p>
<h3 id="测试和总体的质量实践"><a href="#测试和总体的质量实践" class="headerlink" title="测试和总体的质量实践"></a>测试和总体的质量实践</h3><h4 id="至少，编写API（组件）测试"><a href="#至少，编写API（组件）测试" class="headerlink" title="至少，编写API（组件）测试"></a>至少，编写API（组件）测试</h4><p>大多数项目只是因为时间表太短而没有进行任何自动化测试，或者测试项目失控而正被遗弃。因此，优先从API测试开始，这是最简单的编写和提供比单元测试更多覆盖率的事情（你甚至可能不需要编码而进行API测试，像Postman。之后，如果您有更多的资源和时间，继续使用高级测试类型，如单元测试、DB测试、性能测试等。</p>
<h4 id="使用一个linter检测代码问题"><a href="#使用一个linter检测代码问题" class="headerlink" title="使用一个linter检测代码问题"></a>使用一个linter检测代码问题</h4><p>使用代码linter检查基本质量并及早检测反模式。在任何测试之前运行它, 并将其添加为预提交的git钩子, 以最小化审查和更正任何问题所需的时间。</p>
<h4 id="单元测试三要素"><a href="#单元测试三要素" class="headerlink" title="单元测试三要素"></a>单元测试三要素</h4><p>测试报告应该告诉那些不熟悉代码的读者（测试人员，DevOps 工程师，两年后的你），是否满足他们的要求。<br>所以测试报告需要包含：</p>
<ol>
<li>测试的是什么？例如，ProductsService.addNewProduct 方法</li>
<li>在什么场景下测试？例如，入参里没有价格。</li>
<li>预期的结果是什么？例如，新产品未获批准。</li>
</ol>
<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. unit under test</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Products Service&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;Add new product&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//2. scenario and 3. expectation</span></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;When no price is specified, then the product status is pending approval&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newProduct = <span class="keyword">new</span> <span class="title class_">ProductService</span>().<span class="title function_">add</span>(...);</span><br><span class="line">      <span class="title function_">expect</span>(newProduct.<span class="property">status</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;pendingApproval&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Products Service&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;Add new product&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;Should return the right status&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//hmm, what is this test checking? what are the scenario and expectation?</span></span><br><span class="line">      <span class="keyword">const</span> newProduct = <span class="keyword">new</span> <span class="title class_">ProductService</span>().<span class="title function_">add</span>(...);</span><br><span class="line">      <span class="title function_">expect</span>(newProduct.<span class="property">status</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;pendingApproval&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="用-AAA-模式构建单元测试"><a href="#用-AAA-模式构建单元测试" class="headerlink" title="用 AAA 模式构建单元测试"></a>用 AAA 模式构建单元测试</h4><p>对于单元测试，最大的挑战就是没有人力去做。产品代码已经让我们无暇分心。出于这个原因，测试代码必须非常简单且易于理解。</p>
<p>当阅读测试用例时，它不应该感觉像阅读命令式代码(循环，继承)，而更像HTML，一种声明性的体验。为了达到这个目的，保持 AAA 的约定，这样读者就可以毫不费力地解析测试意图。</p>
<ol>
<li><p>Arrange: 所有的设置代码目的是模拟场景。这包括实例化测试构造函数下的元数据，添加 DB 记录，在对象上 mocking&#x2F;stubbing ，以及任何其他准备代码</p>
</li>
<li><p>Act：执行测试中的单元。通常是一行代码。</p>
</li>
<li><p>Assert：确保接收到的值满足期望。通常是一行代码。</p>
</li>
</ol>
<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe.<span class="title function_">skip</span>(<span class="string">&#x27;Customer classifier&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">test</span>(<span class="string">&#x27;When customer spent more than 500$, should be classified as premium&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//Arrange</span></span><br><span class="line">        <span class="keyword">const</span> customerToClassify = &#123;<span class="attr">spent</span>:<span class="number">505</span>, <span class="attr">joined</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="attr">id</span>:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">DBStub</span> = sinon.<span class="title function_">stub</span>(dataAccess, <span class="string">&#x27;getCustomer&#x27;</span>)</span><br><span class="line">            .<span class="title function_">reply</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">classification</span>: <span class="string">&#x27;regular&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Act</span></span><br><span class="line">        <span class="keyword">const</span> receivedClassification = customerClassifier.<span class="title function_">classifyCustomer</span>(customerToClassify);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Assert</span></span><br><span class="line">        <span class="title function_">expect</span>(receivedClassification).<span class="title function_">toMatch</span>(<span class="string">&#x27;premium&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Should be classified as premium&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> customerToClassify = &#123;<span class="attr">spent</span>:<span class="number">505</span>, <span class="attr">joined</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="attr">id</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DBStub</span> = sinon.<span class="title function_">stub</span>(dataAccess, <span class="string">&#x27;getCustomer&#x27;</span>)</span><br><span class="line">        .<span class="title function_">reply</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">classification</span>: <span class="string">&#x27;regular&#x27;</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> receivedClassification = customerClassifier.<span class="title function_">classifyCustomer</span>(customerToClassify);</span><br><span class="line">    <span class="title function_">expect</span>(receivedClassification).<span class="title function_">toMatch</span>(<span class="string">&#x27;premium&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="避免全局设置或全局源数据"><a href="#避免全局设置或全局源数据" class="headerlink" title="避免全局设置或全局源数据"></a>避免全局设置或全局源数据</h4><p>遵循黄金测试规则——保持测试用例非常简单。每个测试都应该添加并作用于它自己的DB行，以防止耦合和容易推断测试流。</p>
<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;When updating site name, get successful confirmation&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//Arrange - test is adding a fresh new records and acting on the records only</span></span><br><span class="line">  <span class="keyword">const</span> siteUnderTest = <span class="keyword">await</span> <span class="title class_">SiteService</span>.<span class="title function_">addSite</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;siteForUpdateTest&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Act</span></span><br><span class="line">  <span class="keyword">const</span> updateNameResult = <span class="keyword">await</span> <span class="title class_">SiteService</span>.<span class="title function_">changeName</span>(siteUnderTest, <span class="string">&#x27;newName&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(updateNameResult).<span class="property">to</span>.<span class="title function_">be</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//Arrange - adding sites and admins data to our DB. Where is the data? outside. At some external json or migration framework</span></span><br><span class="line">  <span class="keyword">await</span> <span class="variable constant_">DB</span>.<span class="title class_">AddSeedDataFromJson</span>(<span class="string">&#x27;seed.json&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;When updating site name, get successful confirmation&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//Arrange - I know that site name &#x27;portal&#x27; exists - I saw it in the seed files</span></span><br><span class="line">  <span class="keyword">const</span> siteToUpdate = <span class="keyword">await</span> <span class="title class_">SiteService</span>.<span class="title function_">getSiteByName</span>(<span class="string">&#x27;Portal&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Act</span></span><br><span class="line">  <span class="keyword">const</span> updateNameResult = <span class="keyword">await</span> <span class="title class_">SiteService</span>.<span class="title function_">changeName</span>(siteToUpdate, <span class="string">&#x27;newName&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(updateNameResult).<span class="property">to</span>.<span class="title function_">be</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;When querying by site name, get the right site&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//Act - I know that site name &#x27;portal&#x27; exists - I saw it in the seed files</span></span><br><span class="line">  <span class="keyword">const</span> siteToCheck = <span class="keyword">await</span> <span class="title class_">SiteService</span>.<span class="title function_">getSiteByName</span>(<span class="string">&#x27;Portal&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(siteToCheck.<span class="property">name</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Portal&#x27;</span>); <span class="comment">//Failure! The previous test change the name :[</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="经常检查易受攻击的依赖项"><a href="#经常检查易受攻击的依赖项" class="headerlink" title="经常检查易受攻击的依赖项"></a>经常检查易受攻击的依赖项</h4><p>即使是最著名的依赖项，如 Express ，也有已知的漏洞。使用社区和商业工具(如🔗<a href="https://docs.npmjs.com/cli/v9/commands/npm-audit">npm audit</a>和🔗<a href="https://snyk.io/">snyk.io</a>)可以很容易地解决这个问题。它们可以在每次构建时在 CI 平台上调用。</p>
<h4 id="给测试做标记"><a href="#给测试做标记" class="headerlink" title="给测试做标记"></a>给测试做标记</h4><p>不同的测试必须在不同的场景上运行，例如快速冒烟应该在开发人员保存或提交一个文件时运行；完整的端到端应该在新的请求被提交时运行。<br>这可以通过使用#cold #api #sanity等关键字标记测试来实现</p>
<h4 id="检查您的测试覆盖率"><a href="#检查您的测试覆盖率" class="headerlink" title="检查您的测试覆盖率"></a>检查您的测试覆盖率</h4><p>像<a href="https://github.com/istanbuljs/istanbuljs">Istanbul</a>&#x2F;<a href="https://github.com/istanbuljs/nyc">NYC</a>这样的代码覆盖工具非常棒，原因有3个：</p>
<ol>
<li>免费。</li>
<li>它能帮助测试人员认识到测试覆盖率的减少。</li>
<li>它高亮测试覆盖的代码。</li>
</ol>
<h4 id="检查过期的依赖"><a href="#检查过期的依赖" class="headerlink" title="检查过期的依赖"></a>检查过期的依赖</h4><p>使用你习惯的工具例如 <code>npm outdated</code> 或者 <a href="https://www.npmjs.com/package/npm-check-updates">npm-check-updates</a> 检擦过期的依赖。<br>在 CI 平台里注入这个检查，甚至在极端情况下汇报编译错误。<br>例如落后5个版本（本地版本是 1.3.1 而 最新仓库版本是 1.3.8），或者 该依赖已经被作者标记为已过期。</p>
<h4 id="使用类生成环境做端到端测试"><a href="#使用类生成环境做端到端测试" class="headerlink" title="使用类生成环境做端到端测试"></a>使用类生成环境做端到端测试</h4><p>使用实时数据做端到端测试曾今是 CI 平台中最薄弱的环节，因为它依赖于多个重量级的依赖，例如 DB 。 使用 docker-compose 做出接近真实生产环境用来测试。</p>
<h4 id="使用静态分析工具分析代码并重构"><a href="#使用静态分析工具分析代码并重构" class="headerlink" title="使用静态分析工具分析代码并重构"></a>使用静态分析工具分析代码并重构</h4><p>重构是迭代开发流程中的一个重要过程。移除代码异味（坏的代码实践）例如重复代码，过长函数，过长参数列表。这样可以使代码更易于维护。使用静态分析工具将帮助发现代码异味。集成这个步骤到 CI 平台。<a href="https://www.sonarsource.com/">Sonar</a>或者<a href="https://codeclimate.com/">Code Climate</a> 可以发现代码异味并告诉用户如何解决问题。</p>
<p>这些静态分析工具将补足 lint 工具例如 ESLint。大多数 lint 工具 关注单个文件的代码风格。静态分析工具关注多个文件的代码异味。</p>
<h4 id="仔细挑选-CI-平台"><a href="#仔细挑选-CI-平台" class="headerlink" title="仔细挑选 CI 平台"></a>仔细挑选 CI 平台</h4><p>曾经，CI世界就是易于扩展的<a href="https://jenkins.io/">Jenkins</a> vs 简单方便的SaaS方案。游戏正在改变，比如SaaS提供者<a href="https://circleci.com/">CircleCI</a>和<a href="https://www.travis-ci.com/">Travis</a>提供了强大的解决方案，包含最小化设置时间的Docker容器，而Jenkins也尝试在简单易用性上做文章而提高竞争性。虽然您可以在云上设置丰富的CI解决方案, 如果它需要控制更多的细节Jenkins仍然是选择的平台。最终的选择归结为CI过程自定义的范围: 免安装，方便设置的云供应商允许运行自定义shell命令、自定义的docker image、调整工作流、运行matrix build和其他丰富的功能。但是, 如果使用像Java这样的正式编程语言来控制基础结构或编程CI逻辑 - Jenkins可能仍然是首选。否则, 考虑选择简单方便和设置自由的云选项。</p>
<h4 id="单独测试中间件"><a href="#单独测试中间件" class="headerlink" title="单独测试中间件"></a>单独测试中间件</h4><p>许多人逃避测试中间件， 认为它只代表系统一小部分并且需要一个实时的Express服务。这两个原因都时错误的。中间件虽然小，但会影响所有或大多数请求。中间件可以当作入参为<code>&#123;req,res&#125;</code>的JS对象的单纯函数测试。</p>
<p>要测试中间件函数，只需调用它并监视(例如使用<a href="https://www.npmjs.com/package/sinon">Sinon</a>)与{req,res}对象的交互，以确保函数执行正确的操作。库<a href="https://www.npmjs.com/package/node-mocks-http">node-mock-http</a>甚至更进一步，将{req,res}对象与监视它们的行为一起分解。例如，它可以断言在res对象上设置的http状态是否与期望匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//the middleware we want to test</span></span><br><span class="line"><span class="keyword">const</span> unitUnderTest = <span class="built_in">require</span>(<span class="string">&quot;./middleware&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> httpMocks = <span class="built_in">require</span>(<span class="string">&quot;node-mocks-http&quot;</span>);</span><br><span class="line"><span class="comment">//Jest syntax, equivalent to describe() &amp; it() in Mocha</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;A request without authentication header, should return http status 403&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = httpMocks.<span class="title function_">createRequest</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/user/42&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">authentication</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> response = httpMocks.<span class="title function_">createResponse</span>();</span><br><span class="line">  <span class="title function_">unitUnderTest</span>(request, response);</span><br><span class="line">  <span class="title function_">expect</span>(response.<span class="property">statusCode</span>).<span class="title function_">toBe</span>(<span class="number">403</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="上线实践"><a href="#上线实践" class="headerlink" title="上线实践"></a>上线实践</h3><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><p>基本来说，当在生产环境中发生意外时，监控意味着你能够很容易识别它们。比如，通过电子邮件或Slack获得通知。挑战在于选择既能满足你的需求又不会破坏防护的合适工具集。我建议, 首先定义一组核心的度量标准, 这些指标必须被监视, 以确保健康状态 – CPU, 服务器RAM, Node进程RAM（小于1.4GB），最后一分钟的错误数量，进程重启次数，平均响应时间。然后去看看你可能喜欢的一些高级功能，并添加到你的愿望清单。一些高级监控功能的例子：DB分析，跨服务测量（即测量业务事务），前端集成，将原始数据展示给自定义BI客户端，Slack 通知等等。</p>
<p>要实现高级功能需要冗长的设置或购买诸如Datadog，Newrelic之类的商业产品。不幸的是，实现基本功能也并不容易，因为一些测量标准是与硬件相关的（CPU），而其它则在node进程内（内部错误），因此所有简单的工具都需要一些额外的设置。例如，云供应商监控解决方案（例如AWS CloudWatch, Google StackDriver)能立即告诉您硬件度量标准，但不涉及内部应用程序行为。另一方面，基于日志的解决方案（如ElasticSearch）默认缺少硬件视图。解决方案是通过缺少的指标来增加您的选择，例如，一个流行的选择是将应用程序日志发送到Elastic stack并配置一些额外的代理（例如Beat）来共享硬件相关信息以获得完整的展现。</p>
<h4 id="使用智能日志使你的应用程序变得清晰"><a href="#使用智能日志使你的应用程序变得清晰" class="headerlink" title="使用智能日志使你的应用程序变得清晰"></a>使用智能日志使你的应用程序变得清晰</h4><p>无论如何，您要打印日志，而且需要一些可以在其中跟踪错误和核心指标的接口来展示生产环境信息（例如，每小时发生了多少错误，最慢的API节点是哪一个）为什么不在健壮的日志框架中进行一些适度的尝试呢? 要实现这一目标，需要在三个步骤上做出深思熟虑的决定:</p>
<ol>
<li><p>智能日志 – 在最基本的情况下，您需要使用像Winston, Bunyan这样有信誉的日志库，在每个事务开始和结束时输出有意义的信息。还可以考虑将日志语句格式化为JSON，并提供所有上下文属性（如用户id、操作类型等）。这样运维团队就可以在这些字段上操作。在每个日志行中包含一个唯一的transaction ID，更多的信息查阅条款 “Write transaction-id to log”。最后要考虑的一点还包括一个代理，它记录系统资源，如内存和CPU，比如Elastic Beat。</p>
</li>
<li><p>智能聚合 – 一旦您在服务器文件系统中有了全面的信息，就应该定期将这些信息推送到一个可以聚合、处理和可视化数据的系统中。例如，Elastic stack是一种流行的、自由的选择，它提供所有组件去聚合和产生可视化数据。许多商业产品提供了类似的功能，只是它们大大减少了安装时间，不需要主机托管。</p>
</li>
<li><p>智能可视化 – 现在的信息是聚合和可搜索的, 一个可以满足仅仅方便地搜索日志的能力, 可以走得更远, 没有编码或花费太多的努力。我们现在可以显示一些重要的操作指标, 如错误率、平均一天CPU使用, 在过去一小时内有多少新用户选择, 以及任何其他有助于管理和改进我们应用程序的指标。</p>
</li>
</ol>
<h4 id="委托任何可能的-例如静态内容，gzip-到反向代理"><a href="#委托任何可能的-例如静态内容，gzip-到反向代理" class="headerlink" title="委托任何可能的 (例如静态内容，gzip) 到反向代理"></a>委托任何可能的 (例如静态内容，gzip) 到反向代理</h4><p>过度使用Express，及其丰富的中间件去提供网络相关的任务，如服务静态文件，gzip 编码，throttling requests，SSL termination等，是非常诱人的。由于Node.js的单线程模型，这将使CPU长时间处于忙碌状态 (请记住，node的执行模型针对短任务或异步IO相关任务进行了优化)，因此这是一个性能消耗。一个更好的方法是使用专注于处理网络任务的工具 – 最流行的是nginx和HAproxy，它们也被最大的云供应商使用，以减轻在Node.js进程上所面临的负载问题。</p>
<h4 id="锁定依赖版本"><a href="#锁定依赖版本" class="headerlink" title="锁定依赖版本"></a>锁定依赖版本</h4><p>您的代码依赖于许多外部包，假设它“需要”和使用momentjs-2.1.4，默认情况下，当布署到生产中时，npm可能会获得momentjs 2.1.5，但不幸的是，这将带来一些新的bug。使用npm配置文件和设置 –save-exact&#x3D;true 指示npm去完成安装，以便下次运行 npm install（在生产或在Docker容器中，您计划将其用于测试）时，将获取相同的依赖版本。另一种可选择受欢迎的方法是使用一个shrinkwrap文件（很容易使用npm生成）指出应该安装哪些包和版本，这样就不需要环境来获取新版本了。</p>
<ul>
<li>更新: 在npm5中，使用.shrinkwrap依赖项会被自动锁定。Yarn，一个新兴的包管理器，默认情况下也会锁定依赖项。</li>
</ul>
<p>npmrc文件指示npm使用精确的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在项目目录上保存这个为.npmrc 文件</span><br><span class="line">save-exact:true</span><br></pre></td></tr></table></figure>

<p>shirnkwrap.json文件获取准确的依赖关系树:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;A&quot;,</span><br><span class="line">    &quot;dependencies&quot;: &#123;</span><br><span class="line">        &quot;B&quot;: &#123;</span><br><span class="line">            &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">            &quot;dependencies&quot;: &#123;</span><br><span class="line">                &quot;C&quot;: &#123;</span><br><span class="line">                    &quot;version&quot;: &quot;0.1.0&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="保护和重启失败进程"><a href="#保护和重启失败进程" class="headerlink" title="保护和重启失败进程"></a>保护和重启失败进程</h4><p>在基本级别，必须保护Node进程并在出现故障时重新启动。简单地说, 对于那些小应用和不使用容器的应用 – 像这样的工具 <a href="https://www.npmjs.com/package/pm2-docker">PM2</a> 是完美的，因为它们带来简单性，重启能力以及与Node的丰富集成。其他具有强大Linux技能的人可能会使用systemd并将Node作为服务运行。对于使用Docker或任何容器技术的应用程序来说，事情会变得更加有趣，因为集群管理和协调工具（比如AWS ECS，Kubernetes等）会完成部署，监视和保持容器健康的功能。拥有所有丰富的集群管理功能（包括容器重启），为什么还要与其他工具（如PM2）混为一谈？这里并没有可靠的答案。将PM2保留在容器（主要是其容器特定版本pm2-docker）中作为第一个守护层是有充分的理由的 - 在主机容器要求正常重启时，重新启动更快，并提供特定于node的功能比如向代码发送信号。其他选择可能会避免不必要的层。总而言之，没有一个解决方案适合所有人，但了解这些选择是最重要的。</p>
<h4 id="利用CPU多核"><a href="#利用CPU多核" class="headerlink" title="利用CPU多核"></a>利用CPU多核</h4><p>这应该不会让人感到意外, 在其基本形式上，Node运行在单进程，单线程，单个CPU上。购买了一个强大的包含4个或8个CPU的硬件，只使用一个听起来是不可思议的，对吗？适合中型应用最快的解决方案是使用Node的Cluster模块，它在10行代码中为每个逻辑核心和路由请求产生一个进程，进程之间以round-robin的形式存在。更好的是使用PM2，它通过一个简单的接口和一个很酷的监视UI来给cluster模块裹上糖衣。虽然这个解决方案对传统应用程序很有效，但它可能无法满足需要顶级性能和健壮的devops流的应用。对于那些高级的用例，考虑使用自定义部署脚本复制NODE进程，并使用像nginx 这样的专门的工具进行负载均衡，或者使用像AWS ECS或Kubernetees这样的容器引擎，这些工具具有部署和复制进程的高级特性。</p>
<h4 id="创建维护端点"><a href="#创建维护端点" class="headerlink" title="创建维护端点"></a>创建维护端点</h4><p>维护端点是一个简单的安全的HTTP API, 它是应用程序代码的一部分, 它的用途是让ops&#x2F;生产团队用来监视和公开维护功能。例如, 它可以返回进程的head dump (内存快照), 报告是否存在内存泄漏, 甚至允许直接执行 REPL 命令。在常规的 devops 工具 (监视产品、日志等) 无法收集特定类型的信息或您选择不购买&#x2F;安装此类工具时, 需要使用此端点。黄金法则是使用专业的和外部的工具来监控和维护生产环境, 它们通常更加健壮和准确的。这就意味着, 一般的工具可能无法提取特定于node或应用程序的信息 – 例如, 如果您希望在 GC 完成一个周期时生成内存快照 – 很少有 npm 库会很乐意为您执行这个, 但流行的监控工具很可能会错过这个功能。</p>
<p>使用代码生产head dump:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> heapdump = <span class="built_in">require</span>(<span class="string">&#x27;heapdump&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/ops/headump&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.<span class="title function_">info</span>(<span class="string">`About to generate headump`</span>);</span><br><span class="line">    heapdump.<span class="title function_">writeSnapshot</span>(<span class="keyword">function</span> (<span class="params">err, filename</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;headump file is ready to be sent to the caller&#x27;</span>, filename);</span><br><span class="line">        fs.<span class="title function_">readFile</span>(filename, <span class="string">&quot;utf-8&quot;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="使用APM产品确保用户体验"><a href="#使用APM产品确保用户体验" class="headerlink" title="使用APM产品确保用户体验"></a>使用APM产品确保用户体验</h4><p>APM（应用程序性能监视）指的是一个产品系列, 目的是从端到端，也从客户的角度监控应用程序的性能。虽然传统的监控解决方案侧重于异常和独立的技术指标 (例如错误跟踪、检测慢速服务器节点等), 在现实世界中, 我们的应用程序可能会在没有任何代码异常的情况下让用户使用起来感到失望, 例如, 如果某些中间件服务执行得非常慢。APM 产品从端到端检测用户体验, 例如, 给定一个包含前端 UI 和多个分布式服务的系统 – 一些 APM 产品可以告诉您, 一个跨过多个层的事务的速度有多快。它可以判断用户体验是否可靠, 并指出问题所在。这种诱人的产品通常有一个相对较高的价格标签, 因此, 对于需要超越一般的监测的，大规模的和复杂的产品, 它们是值得推荐的。</p>
<h4 id="为生产环境准备代码"><a href="#为生产环境准备代码" class="headerlink" title="为生产环境准备代码"></a>为生产环境准备代码</h4><p>以下是一个开发技巧的列表，它极大地影响了产品的维护和稳定性：</p>
<ul>
<li>十二因素指南 — 熟悉<a href="https://12factor.net/">12因素</a>指南</li>
<li>无状态 — 在一个特定的web服务器上不保存本地数据（请参阅相关条目 - “Be Stateless”）</li>
<li>高速缓存 — 大量使用缓存，但不会因为缓存不匹配而产生错误</li>
<li>测试内存 — 测量内存的使用和泄漏，是作为开发流程的一部分，诸如“memwatch”之类的工具可以极大地促进这一任务</li>
<li>命名函数 — 将匿名函数(例如，内联callbabk)的使用最小化，因为一个典型的内存分析器为每个方法名提供内存使用情况</li>
<li>使用CI工具 — 在发送到生产前使用CI工具检测故障。例如，使用ESLint来检测引用错误和未定义的变量。使用–trace-sync-io来识别用了同步api的代码(而不是异步版本)<br>明确的日志 — 包括在每个日志语句中希望用json格式记录上下文信息，以便于日志聚合工具，如Elastic可以在这些属性上搜索(请参阅相关条目 – “Increase visibility using smart logs”)。此外，还包括标识每个请求的事务id，并允许将描述相同事务的行关联起来(请参阅 — “Include Transaction-ID”)</li>
<li>错误管理 — 错误处理是Node.js生产站点的致命弱点 – 许多Node进程由于小错误而崩溃，然而其他Node进程则会在错误的状态下存活，而不是崩溃。设置你的错误处理策略绝对是至关重要的, 在这里阅读我的(错误处理的最佳实践)(<a href="http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/">http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/</a>)</li>
</ul>
<h4 id="测量和防范内存使用情况"><a href="#测量和防范内存使用情况" class="headerlink" title="测量和防范内存使用情况"></a>测量和防范内存使用情况</h4><p>在一个完美的开发过程中, Web开发人员不应该处理内存泄漏问题。 实际上，内存问题是一个必须了解的Node已知的问题。首先，内存使用必须不断监视.在开发和小型生产站点上，您可以使用Linux命令或NPM工具和库（如node-inspector和memwatch）来手动测量。 这个人工操作的主要缺点是它们需要一个人进行积极的监控 - 对于正规的生产站点来说，使用鲁棒性监控工具是非常重要的，例如（AWS CloudWatch，DataDog或任何类似的主动系统），当泄漏发生时提醒。 防止泄漏的开发指南也很少：避免将数据存储在全局级别，使用动态大小的流数据，使用let和const限制变量范围。</p>
<h4 id="在node外处理您的前端资产"><a href="#在node外处理您的前端资产" class="headerlink" title="在node外处理您的前端资产"></a>在node外处理您的前端资产</h4><p>在一个经典的 web 应用中，后端返回前端资源&#x2F;图片给浏览器, 在node的世界，一个非常常见的方法是使用 Express 静态中间件, 以数据流的形式把静态文件返回到客户端。但是, node并不是一个典型的 web应用, 因为它使用单个线程，对于同时服务多个文件，未经过任何优化。相反, 考虑使用反向代理、云存储或 CDN (例如Nginx, AWS S3, Azure Blob 存储等), 对于这项任务, 它们做了很多优化，并获得更好的吞吐量。例如, 像 nginx 这样的专业中间件在文件系统和网卡之间的直接挂钩, 并使用多线程方法来减少多个请求之间的干预。</p>
<p>您的最佳解决方案可能是以下形式之一:</p>
<ol>
<li>反向代理 – 您的静态文件将位于您的node应用的旁边, 只有对静态文件文件夹的请求才会由位于您的node应用前面的代理 (如 nginx) 提供服务。使用这种方法, 您的node应用负责部署静态文件, 而不是为它们提供服务。你的前端的同事会喜欢这种方法, 因为它可以防止 cross-origin-requests 的前端请求。</li>
<li>云存储 – 您的静态文件将不会是您的node应用内容的一部分, 他们将被上传到服务, 如 AWS S3, Azure BlobStorage, 或其他类似的服务, 这些服务为这个任务而生。使用这种方法, 您的node应用即不负责部署静态文件, 也不为它们服务, 因此, 在node和前端资源之间完全解耦, 这是由不同的团队处理。</li>
</ol>
<h4 id="保持服务器无状态"><a href="#保持服务器无状态" class="headerlink" title="保持服务器无状态"></a>保持服务器无状态</h4><p>确保服务器无状态，随时可以更换，并无任何负面影响。</p>
<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//典型错误1: 保存上传文件在本地服务器上</span></span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>) <span class="comment">// 处理multipart上传的express中间件</span></span><br><span class="line"><span class="keyword">var</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;uploads/&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/photos/upload&#x27;</span>, upload.<span class="title function_">array</span>(<span class="string">&#x27;photos&#x27;</span>, <span class="number">12</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//典型错误2: 在本地文件或者内存中，保存授权会话（密码）</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FileStore</span> = <span class="built_in">require</span>(<span class="string">&#x27;session-file-store&#x27;</span>)(session);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">store</span>: <span class="keyword">new</span> <span class="title class_">FileStore</span>(options),</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//典型错误3: 在全局对象中保存信息</span></span><br><span class="line"><span class="title class_">Global</span>.<span class="property">someCacheLike</span>.<span class="property">result</span> = &#123;somedata&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用工具自动检测有漏洞的依赖项"><a href="#使用工具自动检测有漏洞的依赖项" class="headerlink" title="使用工具自动检测有漏洞的依赖项"></a>使用工具自动检测有漏洞的依赖项</h4><p>现代node应用有数十个, 有时是数以百计的依赖。如果您使用的任何依赖项存在已知的安全漏洞, 您的应用也很容易受到攻击。 下列工具自动检查依赖项中的已知安全漏洞: <a href="https://docs.npmjs.com/cli/audit">npm audit</a> - Node 安全工程 <a href="https://snyk.io/">snyk</a> - 持续查找和修复依赖中的漏洞。</p>
<h4 id="在每一个log语句中指明-‘TransactionId’"><a href="#在每一个log语句中指明-‘TransactionId’" class="headerlink" title="在每一个log语句中指明 ‘TransactionId’"></a>在每一个log语句中指明 ‘TransactionId’</h4><p>一个典型的日志是来自所有组件和请求的条目的仓库。当检测到一些可疑行或错误时，为了与其他属于同一特定流程的行（如用户“约翰”试图购买某物）相匹配，就会变得难以应付。特别在微服务环境下，当一个请求&#x2F;交易可能跨越多个计算机，这变得更加重要和具有挑战性。解决这个问题，可以通过指定一个唯一的事务标识符给从相同的请求过来的所有条目，这样当检测到一行，可以复制这个id，并搜索包含这个transaction id的每一行。但是，在node中实现这个不是那么直截了当的，这是由于它的单线程被用来服务所有的请求 – 考虑使用一个库，它可以在请求层对数据进行分组 – 在下一张幻灯片查看示例代码。当调用其它微服务，使用HTTP头“x-transaction-id”传递transaction id去保持相同的上下文。</p>
<h4 id="配置环境变量-NODE-ENV-x3D-production"><a href="#配置环境变量-NODE-ENV-x3D-production" class="headerlink" title="配置环境变量 NODE_ENV &#x3D; production"></a>配置环境变量 NODE_ENV &#x3D; production</h4><p>进程的环境变量是一组键值对，可用于任何运行程序，通常用于配置。虽然可以使用其他任何变量，但Node鼓励使用一个名为NODE_ENV的变量来标记我们是否正在开发。这一决定允许组件在开发过程中能提供更好的诊断，例如禁用缓存或发出冗长的日志语句。任何现代部署工具 — Chef、Puppet、CloudFormation等 — 在部署时都支持设置环境变量。</p>
<h4 id="设计自动化、原子化和零停机时间部署"><a href="#设计自动化、原子化和零停机时间部署" class="headerlink" title="设计自动化、原子化和零停机时间部署"></a>设计自动化、原子化和零停机时间部署</h4><p>研究表明，执行许多部署的团队降低了严重上线问题的可能性。不需要危险的手动步骤和服务停机时间的快速和自动化部署大大改善了部署过程。你应该达到使用Docker结合CI工具，使他们成为简化部署的行业标准。</p>
<h4 id="使用-Node-js-的-LTS-版本"><a href="#使用-Node-js-的-LTS-版本" class="headerlink" title="使用 Node.js 的 LTS 版本"></a>使用 Node.js 的 LTS 版本</h4><p>确保您在正式环境中使用的是LTS（长期支持）版本的Node.js来获取关键错误的修复、安全更新和性能改进。</p>
<p>LTS版本的Node.js至少支持18个月，并由偶数版本号（例如 4、6、8）表示。它们最适合生产环境，因为LTS的发行线专注于稳定性和安全性，而“Current”版本发布寿命较短，代码更新更加频繁。LTS版本的更改仅限于稳定性错误修复、安全更新、合理的npm更新、文档更新和某些可以证明不会破坏现有应用程序的性能改进。</p>
<h4 id="应用程序不要处理日志保存"><a href="#应用程序不要处理日志保存" class="headerlink" title="应用程序不要处理日志保存"></a>应用程序不要处理日志保存</h4><p>应用程序应更关注于逻辑代码。关于日志保存，例如保存到哪个文件，哪个数据库，这些不是应用程序应该管的。</p>
<p>应用程序只需要把日志输出到 stdout&#x2F;stderr 中, Docker 的 log-driver 复制具体的日志保存。</p>
<mark class="label success">推荐</mark>:

<p>在应用程序中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> winston.<span class="title class_">Logger</span>(&#123;</span><br><span class="line">  <span class="attr">level</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  <span class="attr">transports</span>: [</span><br><span class="line">    <span class="keyword">new</span> (winston.<span class="property">transports</span>.<span class="property">Console</span>)()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">logger.<span class="title function_">log</span>(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;Test Log Message with some parameter %s&#x27;</span>, <span class="string">&#x27;some parameter&#x27;</span>, &#123; <span class="attr">anything</span>: <span class="string">&#x27;This is metadata&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>在Docker容器的<code>daemon.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;splunk&quot;</span><span class="punctuation">,</span> <span class="comment">// just using Splunk as an example, it could be another storage type</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;splunk-token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;splunk-url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="生产模式下使用-npm-ci-安装依赖"><a href="#生产模式下使用-npm-ci-安装依赖" class="headerlink" title="生产模式下使用 npm ci 安装依赖"></a>生产模式下使用 npm ci 安装依赖</h4><ul>
<li>如果没有 <code>package-lock.json</code> 或该文件与 <code>package.json</code> 不相符，则报错失败。</li>
<li>自动删除 <code>node_modules</code> 文件夹。</li>
<li>更快。参考 <a href="https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable">the release blog post</a></li>
</ul>
<h3 id="安全最佳实践"><a href="#安全最佳实践" class="headerlink" title="安全最佳实践"></a>安全最佳实践</h3><h4 id="拥护linter安全准则"><a href="#拥护linter安全准则" class="headerlink" title="拥护linter安全准则"></a>拥护linter安全准则</h4><p>ESLint 和 TSLint 的安全插件例如<a href="https://github.com/eslint-community/eslint-plugin-security">eslint-plugin-security</a> 和 <a href="https://github.com/webschik/tslint-config-security">tslint-config-security</a> 提供一系列风险代码安全检查。</p>
<h4 id="使用负载均衡或中间件处理并发请求"><a href="#使用负载均衡或中间件处理并发请求" class="headerlink" title="使用负载均衡或中间件处理并发请求"></a>使用负载均衡或中间件处理并发请求</h4><p>应该在应用程序中实现速率限制，以保护Node.js应用程序不会同时被过多的请求所淹没。速率限制任务最好使用专为该任务设计的服务执行，例如nginx，但是也可以使用 <a href="https://www.npmjs.com/package/rate-limiter-flexible">rate-limiter-flexible</a> 包或中间件，例如Express.js应用程序的 <a href="https://www.npmjs.com/package/express-rate-limit">express-rate-limiter</a> 。</p>
<p>rate-limiter-flexible 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">RateLimiterRedis</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rate-limiter-flexible&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.<span class="title function_">createClient</span>(&#123;</span><br><span class="line"> <span class="attr">enable_offline_queue</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maximum 20 requests per second</span></span><br><span class="line"><span class="keyword">const</span> rateLimiter = <span class="keyword">new</span> <span class="title class_">RateLimiterRedis</span>(&#123;</span><br><span class="line"> <span class="attr">storeClient</span>: redisClient,</span><br><span class="line"> <span class="attr">points</span>: <span class="number">20</span>,</span><br><span class="line"> <span class="attr">duration</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">blockDuration</span>: <span class="number">2</span>, <span class="comment">// block for 2 seconds if consumed more than 20 points per second</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rateLimiterRes = <span class="keyword">await</span> rateLimiter.<span class="title function_">consume</span>(req.<span class="property">socket</span>.<span class="property">remoteAddress</span>);</span><br><span class="line">  <span class="comment">// Some app logic here</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">429</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Too Many Requests&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> .<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>express-rate-limiter 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">RateLimit</span> = <span class="built_in">require</span>(<span class="string">&#x27;express-rate-limit&#x27;</span>);</span><br><span class="line"><span class="comment">// important if behind a proxy to ensure client IP is passed to req.ip</span></span><br><span class="line">app.<span class="title function_">enable</span>(<span class="string">&#x27;trust proxy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiLimiter = <span class="keyword">new</span> <span class="title class_">RateLimit</span>(&#123;</span><br><span class="line">  <span class="attr">windowMs</span>: <span class="number">15</span>*<span class="number">60</span>*<span class="number">1000</span>, <span class="comment">// 15 minutes</span></span><br><span class="line">  <span class="attr">max</span>: <span class="number">100</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// only apply to requests that begin with /user/</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user/&#x27;</span>, apiLimiter);</span><br></pre></td></tr></table></figure>

<h4 id="把机密信息从配置文件中抽离出来，或者使用包对其加密"><a href="#把机密信息从配置文件中抽离出来，或者使用包对其加密" class="headerlink" title="把机密信息从配置文件中抽离出来，或者使用包对其加密"></a>把机密信息从配置文件中抽离出来，或者使用包对其加密</h4><p>最常见最安全的提供Nodejs访问机密的方法是把它们保存在系统的环境变量中。一旦设置，程序可以用<code>process.env</code>访问它们。<br>对于需要在源代码控制中保存机密的情况，可以使用加密包例如<a href="https://www.npmjs.com/package/cryptr">cryptr</a>加密文本。</p>
<p>系统环境变量示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> azure = <span class="built_in">require</span>(<span class="string">&#x27;azure&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiKey = process.<span class="property">env</span>.<span class="property">AZURE_STORAGE_KEY</span>;</span><br><span class="line"><span class="keyword">const</span> blobService = azure.<span class="title function_">createBlobService</span>(apiKey);</span><br></pre></td></tr></table></figure>

<p><code>cryptr</code>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Cryptr</span> = <span class="built_in">require</span>(<span class="string">&#x27;cryptr&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cryptr = <span class="keyword">new</span> <span class="title class_">Cryptr</span>(process.<span class="property">env</span>.<span class="property">SECRET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accessToken = cryptr.<span class="title function_">decrypt</span>(<span class="string">&#x27;e74d7c0de21e72aaffc8f2eef2bdb7c1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(accessToken);  <span class="comment">// outputs decrypted string which was not stored in source control</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-ORM-x2F-ODM-库防止查询注入漏洞"><a href="#使用-ORM-x2F-ODM-库防止查询注入漏洞" class="headerlink" title="使用 ORM&#x2F;ODM 库防止查询注入漏洞"></a>使用 ORM&#x2F;ODM 库防止查询注入漏洞</h4><ul>
<li><a href="https://github.com/typeorm/typeorm">TypeORM</a></li>
<li><a href="https://github.com/sequelize/sequelize">sequelize</a></li>
<li><a href="https://github.com/Automattic/mongoose">mongoose</a></li>
<li><a href="https://github.com/knex/knex">Knex</a></li>
<li><a href="https://github.com/Vincit/objection.js">Objection.js</a></li>
<li><a href="https://github.com/balderdashy/waterline">waterline</a></li>
</ul>
<h4 id="通用安全最佳实践集合"><a href="#通用安全最佳实践集合" class="headerlink" title="通用安全最佳实践集合"></a>通用安全最佳实践集合</h4><p>这些是与Node.js不直接相关的安全建议的集合-Node的实现与任何其他语言没有太大的不同。</p>
<h5 id="使用-HTTPS-加密连接"><a href="#使用-HTTPS-加密连接" class="headerlink" title="使用 HTTPS 加密连接"></a>使用 HTTPS 加密连接</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="comment">// The path should be changed accordingly to your setup</span></span><br><span class="line">    <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./sslcert/fullchain.pem&#x27;</span>),</span><br><span class="line">    <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./sslcert/privkey.pem&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">https.<span class="title function_">createServer</span>(options, app).<span class="title function_">listen</span>(<span class="number">443</span>);</span><br></pre></td></tr></table></figure>

<h5 id="安全地比较秘密值和哈希值"><a href="#安全地比较秘密值和哈希值" class="headerlink" title="安全地比较秘密值和哈希值"></a>安全地比较秘密值和哈希值</h5><p>当比较秘密值或像 HMAC digests 这样的哈希值时，应该使用 <a href="https://nodejs.org/dist/latest-v9.x/docs/api/crypto.html#crypto_crypto_timingsafeequal_a_b"><code>crypto.timingSafeEqual(a, b)</code></a> 函数，Node.js v6.6.0开始提供。</p>
<h5 id="使用Node-js生成随机字符串"><a href="#使用Node-js生成随机字符串" class="headerlink" title="使用Node.js生成随机字符串"></a>使用Node.js生成随机字符串</h5><p>当你必须生成安全的随机字符串时，使用 <a href="https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback"><code>crypto.randomBytes(size, [callback])</code></a> 函数使用系统提供的可用熵。</p>
<h5 id="OWASP-建议"><a href="#OWASP-建议" class="headerlink" title="OWASP 建议"></a>OWASP 建议</h5><p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/commonsecuritybestpractices.md">参考</a></p>
<h4 id="调整-HTTP-响应头以加强安全性"><a href="#调整-HTTP-响应头以加强安全性" class="headerlink" title="调整 HTTP 响应头以加强安全性"></a>调整 HTTP 响应头以加强安全性</h4><p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/secureheaders.md#http-strict-transport-security-hsts">参考</a></p>
<h4 id="经常自动检查易受攻击的依赖库"><a href="#经常自动检查易受攻击的依赖库" class="headerlink" title="经常自动检查易受攻击的依赖库"></a>经常自动检查易受攻击的依赖库</h4><p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/dependencysecurity.md">参考</a></p>
<h4 id="保护用户的密码"><a href="#保护用户的密码" class="headerlink" title="保护用户的密码"></a>保护用户的密码</h4><p>始终散列用户密码，而不是将它们存储为文本。</p>
<ul>
<li>对于大多数用例，可以使用流行的库<a href="https://www.npmjs.com/package/bcrypt">bcrypt</a>。(最小：<code>cost:12</code>，密码长度必须小于64)</li>
<li>对于稍微难一点的本地解决方案，或无限大小的密码，请使用<a href="https://nodejs.org/dist/latest-v14.x/docs/api/crypto.html#crypto_crypto_scrypt_password_salt_keylen_options_callback">scrypt</a>函数。(最小值:N:32768, r:8, p:1)</li>
<li>对于 FIPS&#x2F;Government compliance ，使用本地加密模块中包含的较旧的<a href="https://nodejs.org/dist/latest-v14.x/docs/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback">PBKDF2</a>函数。(最小值:迭代:10000，长度:{salt: 16，密码:32})</li>
</ul>
<h4 id="转义输出"><a href="#转义输出" class="headerlink" title="转义输出"></a>转义输出</h4><p>发送给浏览器的不受信任数据可能会被执行, 而不是显示, 这通常被称为跨站点脚本(XSS)攻击。使用专用库将数据显式标记为不应执行的纯文本内容，可以减轻这种问题。</p>
<h4 id="验证传入的JSON-schemas"><a href="#验证传入的JSON-schemas" class="headerlink" title="验证传入的JSON schemas"></a>验证传入的JSON schemas</h4><p>验证传入请求的body payload，并确保其符合预期要求, 如果没有, 则快速报错。</p>
<h4 id="支持黑名单的JWT"><a href="#支持黑名单的JWT" class="headerlink" title="支持黑名单的JWT"></a>支持黑名单的JWT</h4><p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md">参考</a></p>
<h4 id="限制登录请求，防止暴力破解"><a href="#限制登录请求，防止暴力破解" class="headerlink" title="限制登录请求，防止暴力破解"></a>限制登录请求，防止暴力破解</h4><p>将更高特权的路由(如&#x2F;login或&#x2F;admin)暴露在没有速率限制的情况下，会使应用程序面临暴力破解密码字典攻击的风险。使用一种策略将请求限制在这样的路由上，可以通过限制基于请求属性(如ip)或主体参数(如用户名&#x2F;电子邮件地址)的允许尝试的数量来防止成功。</p>
<p>rate-limiter-flexible 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> maxWrongAttemptsByIPperDay = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> maxConsecutiveFailsByUsernameAndIP = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> limiterSlowBruteByIP = <span class="keyword">new</span> <span class="title class_">RateLimiterRedis</span>(&#123;</span><br><span class="line">  <span class="attr">storeClient</span>: redisClient,</span><br><span class="line">  <span class="attr">keyPrefix</span>: <span class="string">&#x27;login_fail_ip_per_day&#x27;</span>,</span><br><span class="line">  <span class="attr">points</span>: maxWrongAttemptsByIPperDay,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,</span><br><span class="line">  <span class="attr">blockDuration</span>: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>, <span class="comment">// Block for 1 day, if 100 wrong attempts per day</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> limiterConsecutiveFailsByUsernameAndIP = <span class="keyword">new</span> <span class="title class_">RateLimiterRedis</span>(&#123;</span><br><span class="line">  <span class="attr">storeClient</span>: redisClient,</span><br><span class="line">  <span class="attr">keyPrefix</span>: <span class="string">&#x27;login_fail_consecutive_username_and_ip&#x27;</span>,</span><br><span class="line">  <span class="attr">points</span>: maxConsecutiveFailsByUsernameAndIP,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">90</span>, <span class="comment">// Store number for 90 days since first fail</span></span><br><span class="line">  <span class="attr">blockDuration</span>: <span class="number">60</span>*<span class="number">60</span>, <span class="comment">// Block for 1 hour</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="使用非root用户运行Node-js"><a href="#使用非root用户运行Node-js" class="headerlink" title="使用非root用户运行Node.js"></a>使用非root用户运行Node.js</h4><p>根据“最小特权原则”，用户&#x2F;进程必须只能访问必要的信息和资源。向攻击者授予根访问权限打开了一个全新的恶意想法的世界，比如将流量路由到其他服务器。在实践中，大多数Node.js应用程序不需要root访问权限，也不使用这种特权运行。然而，有两种常见的场景可能会推动根用户使用:</p>
<ul>
<li>要访问特权端口(例如80端口)，Node.js必须以root身份运行</li>
<li>Docker容器默认以root(!)运行。建议Node.js web应用程序侦听非特权端口，并依赖像nginx这样的反向代理将传入的流量从端口80重定向到Node.js应用程序。在构建Docker映像时，高度安全的应用程序应该使用替代的非根用户运行容器。大多数Docker集群(如Swarm, Kubernetes)允许以声明的方式设置安全上下文</li>
</ul>
<h4 id="使用反向代理或中间件限制负载大小"><a href="#使用反向代理或中间件限制负载大小" class="headerlink" title="使用反向代理或中间件限制负载大小"></a>使用反向代理或中间件限制负载大小</h4><p>解析request主体(例如json编码的有效负载)是一项性能要求很高的操作，对于较大的请求尤其如此。在web应用程序中处理传入request时，应该限制它们各自有效负载的大小。</p>
<p>express 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>(&#123; <span class="attr">limit</span>: <span class="string">&#x27;300kb&#x27;</span> &#125;)); <span class="comment">// body-parser defaults to a body size limit of 100kb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Request with json body</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/json&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if request payload content-type matches json, because body-parser does not check for content types</span></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="title function_">is</span>(<span class="string">&#x27;json&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">sendStatus</span>(<span class="number">415</span>); <span class="comment">// -&gt; Unsupported media type if request doesn&#x27;t have JSON body</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hooray, it worked!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening on port 3000!&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>nginx 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    # Limit the body size for ALL incoming requests to 1 MB</span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    # Limit the body size for incoming requests to this specific server block to 1 MB</span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /upload &#123;</span><br><span class="line">    ...</span><br><span class="line">    # Limit the body size for incoming requests to this route to 1 MB</span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免JS-eval语法"><a href="#避免JS-eval语法" class="headerlink" title="避免JS eval语法"></a>避免JS eval语法</h4><p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/avoideval.chinese.md">参考</a></p>
<h4 id="防止恶意RegEx让Node-js的单线程过载执行"><a href="#防止恶意RegEx让Node-js的单线程过载执行" class="headerlink" title="防止恶意RegEx让Node.js的单线程过载执行"></a>防止恶意RegEx让Node.js的单线程过载执行</h4><p> 正则表达式，在方便的同时，对JavaScript应用构成了真正的威胁，特别是Node.js平台。匹配文本的用户输入需要大量的CPU周期来处理。在某种程度上，正则处理是效率低下的，比如验证10个单词的单个请求可能阻止整个event loop长达6秒，并让CPU引火烧身。由于这个原因，偏向第三方的验证包，比如<a href="https://github.com/chriso/validator.js">validator.js</a>，而不是采用正则。</p>
<h4 id="避免使用变量加载模块"><a href="#避免使用变量加载模块" class="headerlink" title="避免使用变量加载模块"></a>避免使用变量加载模块</h4><p>避免使用被指定为参数的路径变量导入(requiring&#x2F;importing)另一个文件, 因为该变量可能源自用户输入。此规则可以扩展到一般情况下的访问文件(例如，<code>fs.readFile()</code>)，或者包含源自用户输入的动态变量的其他敏感资源。</p>
<mark class="label success">推荐</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全</span></span><br><span class="line"><span class="keyword">const</span> uploadHelpers = <span class="built_in">require</span>(<span class="string">&#x27;./helpers/upload&#x27;</span>);</span><br></pre></td></tr></table></figure>

<mark class="label danger">避免</mark>:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不安全, 因为helperPath变量可能通过用户输入而改变</span></span><br><span class="line"><span class="keyword">const</span> uploadHelpers = <span class="built_in">require</span>(helperPath);</span><br></pre></td></tr></table></figure>

<h4 id="在沙箱中运行不安全代码"><a href="#在沙箱中运行不安全代码" class="headerlink" title="在沙箱中运行不安全代码"></a>在沙箱中运行不安全代码</h4><p>三个主要选项可以帮助实现这种隔离:</p>
<ul>
<li>一个专门的子进程 - 这提供了一个快速的信息隔离, 但要求制约子进程, 限制其执行时间, 并从错误中恢复。</li>
<li>一个基于云的无服务框架满足所有沙盒要求，但动态部署和调用Faas方法不是本部分的内容。</li>
<li>一些npm库，比如<a href="https://www.npmjs.com/package/vm2">vm2</a>和<a href="https://www.npmjs.com/package/sandbox">sandbox</a>允许通过一行代码执行隔离代码。</li>
</ul>
<h4 id="处理子进程时要谨慎"><a href="#处理子进程时要谨慎" class="headerlink" title="处理子进程时要谨慎"></a>处理子进程时要谨慎</h4><p>尽管子进程非常棒, 但使用它们应该谨慎。如果无法避免传递用户输入，就必须经过脱敏处理。 未经脱敏处理的输入执行系统级逻辑的危险是无限的, 从远程代码执行到暴露敏感的系统数据, 甚至数据丢失。准备工作的检查清单可能是这样的:</p>
<ul>
<li>避免在每一种情况下的用户输入, 否则验证和脱敏处理。</li>
<li>使用user&#x2F;group标识限制父进程和子进程的权限。</li>
<li>在隔离环境中运行进程, 以防止在其他准备工作失败时产生不必要的副作用。</li>
</ul>
<p>未脱敏处理子进程的危害：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如, 以一个脚本为例, 它采用两个参数, 其中一个参数是未经脱敏处理的用户输入</span></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;&quot;/path/to/test file/someScript.sh&quot; --someOption &#x27;</span> + input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; 想象一下, 如果用户只是输入&#x27;&amp;&amp; rm -rf --no-preserve-root /&#x27;类似的东西, 会发生什么</span></span><br><span class="line"><span class="comment">// 你会得到一个不想要的结果</span></span><br></pre></td></tr></table></figure>

<h4 id="隐藏客户端的错误详细信息"><a href="#隐藏客户端的错误详细信息" class="headerlink" title="隐藏客户端的错误详细信息"></a>隐藏客户端的错误详细信息</h4><p>默认情况下, 集成的express错误处理程序隐藏错误详细信息。但是, 极有可能, 您实现自己的错误处理逻辑与自定义错误对象(被许多人认为是最佳做法)。如果这样做, 请确保不将整个Error对象返回到客户端, 这可能包含一些敏感的应用程序详细信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// production error handler</span></span><br><span class="line"><span class="comment">// no stacktraces leaked to user</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">message</span>: err.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">error</span>: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="对npm或Yarn，配置2FA"><a href="#对npm或Yarn，配置2FA" class="headerlink" title="对npm或Yarn，配置2FA"></a>对npm或Yarn，配置2FA</h4><p>开发链中的任何步骤都应使用MFA(多重身份验证)进行保护, npm&#x2F;Yarn对于那些能够掌握某些开发人员密码的攻击者来说是一个很好的机会。使用开发人员凭据, 攻击者可以向跨项目和服务广泛安装的库中注入恶意代码。甚至可能在网络上公开发布。在npm中启用2因素身份验证（2-factor-authentication）, 攻击者几乎没有机会改变您的软件包代码。</p>
<h4 id="修改session中间件设置"><a href="#修改session中间件设置" class="headerlink" title="修改session中间件设置"></a>修改session中间件设置</h4><p>每个web框架和技术都有其已知的弱点-告诉攻击者我们使用的web框架对他们来说是很大的帮助。使用session中间件的默认设置, 可以以类似于<code>X-Powered-Byheader</code>的方式向模块和框架特定的劫持攻击公开您的应用。尝试隐藏识别和揭露技术栈的任何内容(例如:Nonde.js, express)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// using the express session middleware</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;youruniquesecret&#x27;</span>, <span class="comment">// secret string used in the signing of the session ID that is stored in the cookie</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;youruniquename&#x27;</span>, <span class="comment">// set a unique name to remove the default connect.sid</span></span><br><span class="line">  <span class="attr">cookie</span>: &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// minimize risk of XSS attacks by restricting the client from reading the cookie</span></span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// only send cookie over https</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">60000</span>*<span class="number">60</span>*<span class="number">24</span> <span class="comment">// set cookie expiry length in ms</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h4 id="通过显式设置进程应崩溃的情况，以避免DOS攻击"><a href="#通过显式设置进程应崩溃的情况，以避免DOS攻击" class="headerlink" title="通过显式设置进程应崩溃的情况，以避免DOS攻击"></a>通过显式设置进程应崩溃的情况，以避免DOS攻击</h4><p>当错误未被处理时, Node进程将崩溃。即使错误被捕获并得到处理，许多最佳实践甚至建议退出。例如, Express会在任何异步错误上崩溃 - 除非使用catch子句包装路由。这将打开一个非常惬意的攻击点, 攻击者识别哪些输入会导致进程崩溃并重复发送相同的请求。没有即时补救办法, 但一些技术可以减轻苦楚: 每当进程因未处理的错误而崩溃，都会发出警报，验证输入并避免由于用户输入无效而导致进程崩溃，并使用catch将所有路由处理包装起来，并在请求中出现错误时, 考虑不要崩溃(与全局发生的情况相反)。</p>
<h4 id="避免不安全的重定向"><a href="#避免不安全的重定向" class="headerlink" title="避免不安全的重定向"></a>避免不安全的重定向</h4><p>当我们在 Node.js 或者 Express 中实现重定向时，在服务器端进行输入校验非常重要。当攻击者发现你没有校验用户提供的外部输入时，他们会在论坛、社交媒体以和其他公共场合发布他们精心制作的链接来诱使用户点击，以此达到漏洞利用的目的。</p>
<p>express 使用用户输入的不安全的重定向:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="title function_">isAuthenticated</span>()) &#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(req.<span class="property">query</span>.<span class="property">url</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>建议的避免不安全重定向的方案是，避免依赖用户输入的内容来进行重定向。如果一定要使用用户输入的内容，可以通过使用白名单重定向的方式来避免暴露漏洞。</p>
<p>使用白名单实现安全的重定向:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> whitelist = &#123;</span><br><span class="line">  <span class="string">&#x27;https://google.com&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValidRedirect</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查url是否以/开头</span></span><br><span class="line">  <span class="keyword">if</span> (url.<span class="title function_">match</span>(<span class="regexp">/^\/(?!\/)/</span>)) &#123;</span><br><span class="line">    <span class="comment">// 前置我们的域名来确保（安全）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://example.com&#x27;</span> + url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则对照白名单列表</span></span><br><span class="line">  <span class="keyword">return</span> whitelist[url] ? url : <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="title function_">isAuthenticated</span>()) &#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="title function_">getValidRedirect</span>(req.<span class="property">query</span>.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="避免将机密信息发布到NPM仓库"><a href="#避免将机密信息发布到NPM仓库" class="headerlink" title="避免将机密信息发布到NPM仓库"></a>避免将机密信息发布到NPM仓库</h4><p>您应该采取预防措施来避免偶然地将机密信息发布到npm仓库的风险。 一个 <code>.npmignore</code> 文件可以被用作忽略掉特定的文件或目录, 或者一个在 <code>package.json</code> 中的 <code>files</code> 数组可以起到一个白名单的作用.</p>
<h3 id="Docker-最佳实践"><a href="#Docker-最佳实践" class="headerlink" title="Docker 最佳实践"></a>Docker 最佳实践</h3><p><a href="https://github.com/goldbergyoni/nodebestpractices#8-docker-best-practices">参考</a></p>
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (04) -- What the f*ck JavaScript?</title>
    <url>/2023/02/best-practice-04/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<h2 id="What-the-f-ck-JavaScript"><a href="#What-the-f-ck-JavaScript" class="headerlink" title="What the f*ck JavaScript?"></a>What the f*ck JavaScript?</h2><p>一些有趣的Javascript示例。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/denysdovhan/wtfjs" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=denysdovhan&repo=wtfjs&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=denysdovhan/wtfjs&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语</title>
    <url>/2023/02/best-practice-06/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<h2 id="Functional-Programming-Jargon"><a href="#Functional-Programming-Jargon" class="headerlink" title="Functional Programming Jargon"></a>Functional Programming Jargon</h2><p>函数式编程有许多优势，由此越来越受欢迎。然而每个编程范式 (paradigm) 都有自己唯一的术语，函数式编程也不例外。我们提供一张术语表，希望使你学习函数式编程变得容易些。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/hemanth/functional-programming-jargon" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=hemanth&repo=functional-programming-jargon&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=hemanth/functional-programming-jargon&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (05) -- Javascript Best testing practice</title>
    <url>/2023/02/best-practice-05/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/best-practice-05/banner.png" alt="clean-code-javascript"></p>
<h2 id="Javascript-Best-testing-practice"><a href="#Javascript-Best-testing-practice" class="headerlink" title="Javascript Best testing practice"></a>Javascript Best testing practice</h2><p>助你将测试能力提升到下一层级。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/goldbergyoni/javascript-testing-best-practices" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=goldbergyoni&repo=javascript-testing-best-practices&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=goldbergyoni/javascript-testing-best-practices&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (07) -- Node.js 调试指南</title>
    <url>/2023/02/best-practice-07/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/best-practice-07/banner.jpg" alt="Node.js 调试指南"></p>
<h2 id="Node-js-调试指南"><a href="#Node-js-调试指南" class="headerlink" title="Node.js 调试指南"></a>Node.js 调试指南</h2><p>《Node.js 调试指南》实体书的开源版</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/nswbmw/node-in-debugging" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=nswbmw&repo=node-in-debugging&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=nswbmw/node-in-debugging&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Callback 转 Promise</title>
    <url>/2023/02/callback-2-promise/</url>
    <content><![CDATA[<h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>遇到有callback调用的函数，容易造成代码嵌套。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>node.js 8.0.0 版本中新增的一个工具 util.promisify，用于将有 callback 的函数转成返回 promise 的函数。</p>
<span id="more"></span>

<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ol>
<li>callback 是 error-first 模式、</li>
<li>callback 是函数最后一个入参。</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stat = util.<span class="title function_">promisify</span>(fs.<span class="property">stat</span>);</span><br><span class="line"><span class="title function_">stat</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">stats</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something with `stats`</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Handle the error.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>等同于使用 <code>async function</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stat = util.<span class="title function_">promisify</span>(fs.<span class="property">stat</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">callStat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stats = <span class="keyword">await</span> <span class="title function_">stat</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`This directory is owned by <span class="subst">$&#123;stats.uid&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p>暂时没看懂<a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_custom_promisified_functions">文档</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000016720505">util.promisify 的那些事儿</a><br><a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original">Util | Node.js v8.17.0 Documentation</a></p>
]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>期刊推荐 (01) -- 科技爱好者周刊</title>
    <url>/2023/02/periodical-01/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/periodical-01/" title="期刊推荐 (01) -- 科技爱好者周刊">期刊推荐 (01) – 科技爱好者周刊</a></p>
</li>
<li><p><a href="/2023/02/periodical-02/" title="期刊推荐 (02) -- HelloGitHub">期刊推荐 (02) – HelloGitHub</a></p>
</li>
</ul>

</details>


<h2 id="科技爱好者周刊"><a href="#科技爱好者周刊" class="headerlink" title="科技爱好者周刊"></a>科技爱好者周刊</h2><p>记录每周值得分享的科技内容，周五发布。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/ruanyf/weekly" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=ruanyf&repo=weekly&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=ruanyf/weekly&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>期刊推荐</category>
      </categories>
      <tags>
        <tag>科技</tag>
        <tag>周刊</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know</title>
    <url>/2023/02/best-practice-03/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/best-practice-01/" title="最佳实践推荐 (01) -- Node.js Best Practices">最佳实践推荐 (01) – Node.js Best Practices</a></p>
</li>
<li><p><a href="/2023/02/best-practice-02/" title="最佳实践推荐 (02) -- clean-code-javascript">最佳实践推荐 (02) – clean-code-javascript</a></p>
</li>
<li><p><a href="/2023/02/best-practice-03/" title="最佳实践推荐 (03) -- 33 Concepts Every JavaScript Developer Should Know">最佳实践推荐 (03) – 33 Concepts Every JavaScript Developer Should Know</a></p>
</li>
<li><p><a href="/2023/02/best-practice-04/" title="最佳实践推荐 (04) -- What the f*ck JavaScript?">最佳实践推荐 (04) – What the f*ck JavaScript?</a></p>
</li>
<li><p><a href="/2023/02/best-practice-05/" title="最佳实践推荐 (05) -- Javascript Best testing practice">最佳实践推荐 (05) – Javascript Best testing practice</a></p>
</li>
<li><p><a href="/2023/02/best-practice-06/" title="最佳实践推荐 (06) -- Functional Programming Jargon 函数式编程术语">最佳实践推荐 (06) – Functional Programming Jargon 函数式编程术语</a></p>
</li>
<li><p><a href="/2023/02/best-practice-07/" title="最佳实践推荐 (07) -- Node.js 调试指南">最佳实践推荐 (07) – Node.js 调试指南</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/best-practice-03/banner.jpg" alt="33 Concepts Every JavaScript Developer Should Know"></p>
<h2 id="33-Concepts-Every-JavaScript-Developer-Should-Know"><a href="#33-Concepts-Every-JavaScript-Developer-Should-Know" class="headerlink" title="33 Concepts Every JavaScript Developer Should Know"></a>33 Concepts Every JavaScript Developer Should Know</h2><p>每个开发者都应该知道的33个JavaScript概念。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/leonardomso/33-js-concepts" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=leonardomso&repo=33-js-concepts&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=leonardomso/33-js-concepts&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>最佳实践推荐</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Developer</tag>
        <tag>Concepts</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和试题 (002) -- Hello，算法</title>
    <url>/2023/02/recommend-algorithm-02/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-algorithm-02/banner.png" alt="Hello，算法"></p>
<h2 id="Hello，算法"><a href="#Hello，算法" class="headerlink" title="Hello，算法"></a>Hello，算法</h2><p>动画图解、能运行、可讨论的数据结构与算法快速入门教程。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/krahets/hello-algo" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=krahets&repo=hello-algo&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=krahets/hello-algo&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>期刊推荐 (02) -- HelloGitHub</title>
    <url>/2023/02/periodical-02/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/periodical-01/" title="期刊推荐 (01) -- 科技爱好者周刊">期刊推荐 (01) – 科技爱好者周刊</a></p>
</li>
<li><p><a href="/2023/02/periodical-02/" title="期刊推荐 (02) -- HelloGitHub">期刊推荐 (02) – HelloGitHub</a></p>
</li>
</ul>

</details>


<h2 id="HelloGitHub"><a href="#HelloGitHub" class="headerlink" title="HelloGitHub"></a>HelloGitHub</h2><p>HelloGitHub 分享 GitHub 上有趣、入门级的开源项目。每月 28 号以月刊的形式更新发布，内容包括：有趣、入门级的开源项目、开源书籍、实战项目、企业级项目等，让你用很短时间感受到开源的魅力，爱上开源！</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/521xueweihan/HelloGitHub" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=521xueweihan&repo=HelloGitHub&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=521xueweihan/HelloGitHub&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>期刊推荐</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和试题 (001) -- JavaScript Algorithms and Data Structures</title>
    <url>/2023/02/recommend-algorithm-01/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<h2 id="JavaScript-Algorithms-and-Data-Structures"><a href="#JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="JavaScript Algorithms and Data Structures"></a>JavaScript Algorithms and Data Structures</h2><p>JavaScript 算法与数据结构。每种算法和数据结构都有自己的 README，包含相关说明和链接，以便进一步阅读 (还有 YouTube 视频) 。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=trekhleb&repo=javascript-algorithms&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=trekhleb/javascript-algorithms&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>算法和试题 (004) -- LeetCode 解题指南</title>
    <url>/2023/02/recommend-algorithm-04/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-algorithm-04/banner.png" alt="LeetCode 解题指南"></p>
<h2 id="LeetCode-解题指南"><a href="#LeetCode-解题指南" class="headerlink" title="LeetCode 解题指南"></a>LeetCode 解题指南</h2><p>本项目包含 LeetCode、《剑指 Offer（第 2 版）》、《剑指 Offer（专项突击版）》、《程序员面试金典（第 6 版）》等题目的相关题解。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/doocs/leetcode" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=doocs&repo=leetcode&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=doocs/leetcode&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/2023/02/linux-command/</url>
    <content><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h3 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h3><p><code>cat /proc/version</code></p>
<p><code>uname -a</code></p>
<span id="more"></span>

<h3 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h3><p><code>lsb_release -a</code></p>
<p><code>cat /etc/issue</code></p>
<h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><p>有时在安装软件后，会自动更新系统配置，但需要偶尔需要手动刷新。</p>
<p>例如安装nvm，会自动更新~&#x2F;.bashrc，但不能立即使用，需要手动刷新。</p>
<p><code>source ~/.bashrc</code></p>
]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和试题 (003) -- The Algorithms - JavaScript</title>
    <url>/2023/02/recommend-algorithm-03/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-algorithm-03/banner.png" alt="The Algorithms - JavaScript"></p>
<h2 id="The-Algorithms-JavaScript"><a href="#The-Algorithms-JavaScript" class="headerlink" title="The Algorithms - JavaScript"></a>The Algorithms - JavaScript</h2><p>TheAlgorithms的JavaScript库，用JavaScript实现各种算法和数据结构。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/TheAlgorithms/JavaScript" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=TheAlgorithms&repo=JavaScript&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=TheAlgorithms/JavaScript&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>算法和试题 (007) -- 一日一题</title>
    <url>/2023/02/recommend-algorithm-07/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<h2 id="一日一题"><a href="#一日一题" class="headerlink" title="一日一题"></a>一日一题</h2><p>互联网大厂内推及大厂面经整理，并且每天一道面试题推送。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/shfshanyue/Daily-Question" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=shfshanyue&repo=Daily-Question&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=shfshanyue/Daily-Question&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>开源项目推荐 (006) -- reveal.js</title>
    <url>/2023/02/recommend-open-source-006/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-open-source-006/banner.png" alt="reveal.js"></p>
<h2 id="reveal-js"><a href="#reveal-js" class="headerlink" title="reveal.js"></a>reveal.js</h2><p>reveal.js是一个开源的HTML表示框架。它是一款工具，可以让任何拥有网络浏览器的人免费创建功能齐全、漂亮的演示文稿。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/hakimel/reveal.js" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=hakimel&repo=reveal.js&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=hakimel/reveal.js&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a82b365d0-e164-46ed-a1f4-b180a77fc6eb" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a82b365d0-e164-46ed-a1f4-b180a77fc6eb').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/reveal.js");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a82b365d0-e164-46ed-a1f4-b180a77fc6eb'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>HTML</tag>
        <tag>Presentation</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (007) -- Node.js 沙箱</title>
    <url>/2023/02/recommend-open-source-007/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<h2 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h2><p>vm2是一个沙盒，可以使用白名单Node的内置模块运行不受信任的代码。安全!</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/patriksimek/vm2" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=patriksimek&repo=vm2&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=patriksimek/vm2&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="afe10d16a-6d7b-4393-b41b-6862cdd24364" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#afe10d16a-6d7b-4393-b41b-6862cdd24364').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/vm2");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#afe10d16a-6d7b-4393-b41b-6862cdd24364'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h2><p>一个漂亮的Node.js JavaScript沙盒。</p>
<p style="text-align: center;"><a href="https://github.com/gf3/sandbox" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=gf3&repo=sandbox&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=gf3/sandbox&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="ae69df06d-aed0-4f09-9bcd-c78e0cf3d7fa" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#ae69df06d-aed0-4f09-9bcd-c78e0cf3d7fa').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/sandbox");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#ae69df06d-aed0-4f09-9bcd-c78e0cf3d7fa'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="Jailed"><a href="#Jailed" class="headerlink" title="Jailed"></a>Jailed</h2><p>一个小型JavaScript库，用于在沙箱中运行不受信任的代码。这个库是用vanilla-js编写的，没有依赖关系。</p>
<p style="text-align: center;"><a href="https://github.com/asvd/jailed" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=asvd&repo=jailed&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=asvd/jailed&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a2447bb37-817d-4be0-a9ce-ae4e468ad4ac" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a2447bb37-817d-4be0-a9ce-ae4e468ad4ac').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/jailed");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a2447bb37-817d-4be0-a9ce-ae4e468ad4ac'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>沙箱</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (008) -- 数据验证</title>
    <url>/2023/02/recommend-open-source-008/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<h2 id="Ajv-JSON-schema-validator"><a href="#Ajv-JSON-schema-validator" class="headerlink" title="Ajv JSON schema validator"></a>Ajv JSON schema validator</h2><p><img src="/2023/02/recommend-open-source-008/ajv-banner.svg" alt="Ajv JSON schema validator"></p>
<p>为Node.js和浏览器提供最快的JSON验证器。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/ajv-validator/ajv" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=ajv-validator&repo=ajv&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=ajv-validator/ajv&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a94274187-db39-4ae9-9350-36747e6cc5aa" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a94274187-db39-4ae9-9350-36747e6cc5aa').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/ajv");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a94274187-db39-4ae9-9350-36747e6cc5aa'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="joi"><a href="#joi" class="headerlink" title="joi"></a>joi</h2><p>JavaScript最强大的模式描述语言和数据验证器。</p>
<p style="text-align: center;"><a href="https://github.com/hapijs/joi" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=hapijs&repo=joi&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=hapijs/joi&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a3a286efc-73aa-4de5-ae6f-aafe42c9f51e" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a3a286efc-73aa-4de5-ae6f-aafe42c9f51e').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/joi");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a3a286efc-73aa-4de5-ae6f-aafe42c9f51e'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="Yup"><a href="#Yup" class="headerlink" title="Yup"></a>Yup</h2><p>yup是一个schema校验工具库。</p>
<p style="text-align: center;"><a href="https://github.com/jquense/yup" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=jquense&repo=yup&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=jquense/yup&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="ab5b7a07c-6770-4d53-ad32-0113ee501726" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#ab5b7a07c-6770-4d53-ad32-0113ee501726').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/yup");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#ab5b7a07c-6770-4d53-ad32-0113ee501726'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="validator-js"><a href="#validator-js" class="headerlink" title="validator.js"></a>validator.js</h2><p>字符串验证器和消毒器库。</p>
<p style="text-align: center;"><a href="https://github.com/validatorjs/validator.js" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=validatorjs&repo=validator.js&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=validatorjs/validator.js&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a4aca4629-37c6-473b-a372-368fb0f68537" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a4aca4629-37c6-473b-a372-368fb0f68537').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/validator");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a4aca4629-37c6-473b-a372-368fb0f68537'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>数据验证</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (009) -- 服务限流</title>
    <url>/2023/02/recommend-open-source-009/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<h2 id="node-rate-limiter-flexible"><a href="#node-rate-limiter-flexible" class="headerlink" title="node-rate-limiter-flexible"></a>node-rate-limiter-flexible</h2><p>通过密钥计数和限制动作数量，并防止任何规模的DDoS和暴力攻击。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/animir/node-rate-limiter-flexible" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=animir&repo=node-rate-limiter-flexible&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=animir/node-rate-limiter-flexible&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a27387f00-4717-4a6c-bb29-908fafd824bf" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a27387f00-4717-4a6c-bb29-908fafd824bf').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/rate-limiter-flexible");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a27387f00-4717-4a6c-bb29-908fafd824bf'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="Express-Rate-Limit"><a href="#Express-Rate-Limit" class="headerlink" title="Express Rate Limit"></a>Express Rate Limit</h2><p>Express的基本速率限制中间件。用于限制对公共api和&#x2F;或端点(如密码重置)的重复请求。</p>
<p style="text-align: center;"><a href="https://github.com/express-rate-limit/express-rate-limit" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=express-rate-limit&repo=express-rate-limit&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=express-rate-limit/express-rate-limit&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a5ddb69a5-f422-4da7-b166-8d84a8a02050" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a5ddb69a5-f422-4da7-b166-8d84a8a02050').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/express-rate-limit");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a5ddb69a5-f422-4da7-b166-8d84a8a02050'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>服务限流</tag>
      </tags>
  </entry>
  <entry>
    <title>Macos 杀掉占用某个端口的进程</title>
    <url>/2022/12/mac-kill-process/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sof -i:端口</span><br><span class="line">kill -9 进程ID</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Macos</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (011) -- quicklink 加快打开链接</title>
    <url>/2023/02/recommend-open-source-011/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-open-source-011/banner.png" alt="reveal.js"></p>
<h2 id="quicklink"><a href="#quicklink" class="headerlink" title="quicklink"></a>quicklink</h2><p>Chrome 浏览器团队推出的一个 JS 库，可以加快打开链接的速度。</p>
<p>它的仓库主页有详细的原理解释，写得非常好，我觉得比这个库本身还有价值。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/GoogleChromeLabs/quicklink" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=GoogleChromeLabs&repo=quicklink&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=GoogleChromeLabs/quicklink&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a35d90298-2cf4-49e2-ba5b-27aaea237743" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a35d90298-2cf4-49e2-ba5b-27aaea237743').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/quicklink");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a35d90298-2cf4-49e2-ba5b-27aaea237743'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>Web Performance</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目推荐 (010) -- Mock &#39;http&#39; 对象</title>
    <url>/2023/02/recommend-open-source-010/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/01/recommend-open-source-001/" title="开源项目推荐 (001) -- Excalidraw 虚拟白板">开源项目推荐 (001) – Excalidraw 虚拟白板</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-002/" title="开源项目推荐 (002) -- GitHub Readme Stats">开源项目推荐 (002) – GitHub Readme Stats</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-003/" title="开源项目推荐 (003) -- lottery 抽奖">开源项目推荐 (003) – lottery 抽奖</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-004/" title="开源项目推荐 (004) -- NocoDB 表格">开源项目推荐 (004) – NocoDB 表格</a></p>
</li>
<li><p><a href="/2023/01/recommend-open-source-005/" title="开源项目推荐 (005) -- star-history">开源项目推荐 (005) – star-history</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-006/" title="开源项目推荐 (006) -- reveal.js">开源项目推荐 (006) – reveal.js</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-007/" title="开源项目推荐 (007) -- Node.js 沙箱">开源项目推荐 (007) – Node.js 沙箱</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-008/" title="开源项目推荐 (008) -- 数据验证">开源项目推荐 (008) – 数据验证</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-009/" title="开源项目推荐 (009) -- 服务限流">开源项目推荐 (009) – 服务限流</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-010/" title="开源项目推荐 (010) -- Mock &#39;http&#39; 对象">开源项目推荐 (010) – Mock &#39;http&#39; 对象</a></p>
</li>
<li><p><a href="/2023/02/recommend-open-source-011/" title="开源项目推荐 (011) -- quicklink 加快打开链接">开源项目推荐 (011) – quicklink 加快打开链接</a></p>
</li>
</ul>

</details>


<h2 id="Sinon-JS"><a href="#Sinon-JS" class="headerlink" title="Sinon.JS"></a>Sinon.JS</h2><p>Sinon具有独立的spies, stub, mock功能。它通过所谓的测试替代(test-double)轻松消除测试的复杂度。</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/sinonjs/sinon" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=sinonjs&repo=sinon&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=sinonjs/sinon&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="aa41b91c3-9a1c-4658-8be6-6c490696939b" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#aa41b91c3-9a1c-4658-8be6-6c490696939b').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/sinon");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#aa41b91c3-9a1c-4658-8be6-6c490696939b'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    

<h2 id="node-mocks-http"><a href="#node-mocks-http" class="headerlink" title="node-mocks-http"></a>node-mocks-http</h2><p>模拟’http’对象，用于测试Express和Koa路由函数。</p>
<p style="text-align: center;"><a href="https://github.com/howardabrams/node-mocks-http" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=howardabrams&repo=node-mocks-http&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=howardabrams/node-mocks-http&type=Date" loading="lazy" />

<script src="/static/echarts.min.js"></script><div id="a58f0ede9-4b69-4e98-beb7-34a6f075252a" style="text-align: center;">正在加载 npm trends ...</div>
      <script>
        (function() {
          
      function renderNpmDownloadError () {
        document.querySelector('#a58f0ede9-4b69-4e98-beb7-34a6f075252a').innerText = 'npm trends 加载失败'
      }
    
          
      function getNpmDownloadsData (callback) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function(e) {
          var data
          try {
            data = JSON.parse(this.responseText)
          }
          catch (e) {
            console.log('JSON error', this.responseText);
            renderNpmDownloadError()
          }
          if (data && data.downloads && data.downloads.length > 0) {
            callback(data.downloads)
          }
          else {
            console.log('empty data');
            renderNpmDownloadError()
          }
        };
        xhr.ontimeout = function(e) {
          console.log('timeout=============');
          renderNpmDownloadError()
        };
        xhr.onerror = function(e) {
          console.log('error', e);
          renderNpmDownloadError()
        };
        xhr.open("GET", "https://npm-trends-proxy.uidotdev.workers.dev/npm/downloads/range/2022-12-20:2023-12-20/node-mocks-http");
        xhr.send();
      }
    
          
      function renderNpmDownloadsData(data) {
        var xData = []
        var seriesData = []
        // 去毛刺
        var ragIndex = 0;
        var ragRange = 4;
        var maxValue;
        for (var i = 0; i < data.length; i++) {
          if (ragIndex === 0) {
            maxValue = data[i];
          }
          else {
            if (data[i].downloads > maxValue.downloads) {
              maxValue = data[i];
            }
          }
          ragIndex++;
          if (ragIndex === ragRange || i === data.length - 1) {
            ragIndex = 0;
            xData.push(maxValue.day);
            seriesData.push(maxValue.downloads)
          }
        }
        var myChart = echarts.init(document.querySelector('#a58f0ede9-4b69-4e98-beb7-34a6f075252a'), null, { height: 300 });
        var option = {
          title: {
            text: 'NPM 下载趋势',
          },
          xAxis: {
            type: 'category',
            data: xData
          },
          yAxis: {
            type: 'value'
          },
          series: [
            {
              data: seriesData,
              type: 'line',
              smooth: true
            }
          ],
          tooltip: {},
        };
        myChart.setOption(option);
      }
    
          getNpmDownloadsData(renderNpmDownloadsData);
        })();
      </script>
    
]]></content>
      <categories>
        <category>开源项目推荐</category>
      </categories>
      <tags>
        <tag>Open source</tag>
        <tag>Recommend</tag>
        <tag>Mock</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL 常用命令</title>
    <url>/2023/02/wsl-command/</url>
    <content><![CDATA[<h2 id="WSL-常用命令"><a href="#WSL-常用命令" class="headerlink" title="WSL 常用命令"></a>WSL 常用命令</h2><h3 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>

<h3 id="运行-Linux"><a href="#运行-Linux" class="headerlink" title="运行 Linux"></a>运行 Linux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -d Ubuntu</span><br></pre></td></tr></table></figure>

<h3 id="更新-WSL"><a href="#更新-WSL" class="headerlink" title="更新 WSL"></a>更新 WSL</h3><p>需要重启 WSL，更新才能生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure>

<h3 id="关闭-WSL"><a href="#关闭-WSL" class="headerlink" title="关闭 WSL"></a>关闭 WSL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure>

<h2 id="Linux-相关命令"><a href="#Linux-相关命令" class="headerlink" title="Linux 相关命令"></a>Linux 相关命令</h2><h3 id="更新和升级包"><a href="#更新和升级包" class="headerlink" title="更新和升级包"></a>更新和升级包</h3><p>Ubuntu 或 Debian</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h3 id="在主系统的资源管理器中打开当前目录"><a href="#在主系统的资源管理器中打开当前目录" class="headerlink" title="在主系统的资源管理器中打开当前目录"></a>在主系统的资源管理器中打开当前目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure>

<h3 id="打开-Visual-Studio-Code"><a href="#打开-Visual-Studio-Code" class="headerlink" title="打开 Visual Studio Code"></a>打开 Visual Studio Code</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure>

<h3 id="打开-Gedit"><a href="#打开-Gedit" class="headerlink" title="打开 Gedit"></a>打开 Gedit</h3><p>Gedit 是 GNOME 桌面环境的默认文本编辑器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="打开-GIMP"><a href="#打开-GIMP" class="headerlink" title="打开 GIMP"></a>打开 GIMP</h3><p>GIMP 是一种免费的开源光栅图形编辑器，用于图像操作和图像编辑、自由形态绘图、不同图像文件格式之间的转码，以及更专业的任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gimp</span><br></pre></td></tr></table></figure>

<h3 id="打开-Nautilus"><a href="#打开-Nautilus" class="headerlink" title="打开 Nautilus"></a>打开 Nautilus</h3><p>Nautilus 也称为 GNOME Files，是 GNOME 桌面的文件管理器。 （类似于 Windows 文件资源管理器）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nautilus</span><br></pre></td></tr></table></figure>

<h3 id="打开-VLC"><a href="#打开-VLC" class="headerlink" title="打开 VLC"></a>打开 VLC</h3><p>VLC 是一种免费的开源跨平台多媒体播放器和框架，可播放大多数多媒体文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlc</span><br></pre></td></tr></table></figure>

<h3 id="google-chrome"><a href="#google-chrome" class="headerlink" title="google-chrome"></a>google-chrome</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">google-chrome</span><br></pre></td></tr></table></figure>

<h3 id="启动-docker-服务"><a href="#启动-docker-服务" class="headerlink" title="启动 docker 服务"></a>启动 docker 服务</h3><p>sudo dockerd</p>
<h2 id="文件访问"><a href="#文件访问" class="headerlink" title="文件访问"></a>文件访问</h2><h3 id="Windows-访问-Linux"><a href="#Windows-访问-Linux" class="headerlink" title="Windows 访问 Linux"></a>Windows 访问 Linux</h3><p>资源管理器地址中输入 <code>\\wsl$</code></p>
<h3 id="Linux-访问-Windows"><a href="#Linux-访问-Windows" class="headerlink" title="Linux 访问 Windows"></a>Linux 访问 Windows</h3><p><code>cd /mnt</code></p>
]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 4. Docker引擎架构</title>
    <url>/2023/05/docker-study-4/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<p>Docker<strong>现代</strong>架构由五部分构成：Docker Client、Dockerd、Containerd、Runc 和 Shim：</p>
<span id="more"></span>

<h2 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h2><p>Docker 客户端，用于用户向 Docker 提交命令请求。</p>
<h2 id="Dockerd"><a href="#Dockerd" class="headerlink" title="Dockerd"></a>Dockerd</h2><p>Dockerd，即 Docker Daemon。负责镜像构建、镜像管理、REST API、核心网络及编排等。其通过 gRPC 与 Containerd 进行通信。</p>
<h2 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h2><p>Containerd，即 Container Daemon。负责管理容器的生命周期。不过，其本身不会去创建容器，而是调用 Runc 来创建容器。</p>
<h2 id="Runc"><a href="#Runc" class="headerlink" title="Runc"></a>Runc</h2><p>Runc，Run Container，是 OCI 容器运行时规范的实现，Runc 项目的目标之一就是与 OCI 规范保持一致。所以，Runc 所在层也称为 OCI 层。这使得 Docker Daemon 中不用再包含任何容器运行时的代码了，简化了 Docker Daemon。</p>
<p>Runc 只有一个作用一创建容器，其本质是一个独立的容器运行时 CLI 工具。其在 fork 出一个容器子进程后会启动该容器进程。在容器进程启动完毕后，Runc 会自动退出。</p>
<h2 id="Shim"><a href="#Shim" class="headerlink" title="Shim"></a>Shim</h2><p>Shim（垫片）是实现“Daemonless Container（无 Docker Daemon 容器）”不可或缺的工 具，使容器与 Docker Daemon 解耦，使得 Docker Daemon 的维护与升级不会影响到运行中的容器。</p>
<p>每次创建容器时，Containerd 同时会 fork 出 Runc 进程与 Shim 进程。当 Runc 自动退出 之前，会先将新容器进程的父进程指定为相应的 Shim 进程。</p>
<p>除了作为容器的父进程外，Shim 进程还具有两个重要功能：</p>
<ol>
<li>保持所有 STDIN 与 STDOUT 流的开启状态，从而使得当 Docker Daemon 重启时，容器不会因为 Pipe 的关闭而终止。</li>
<li>将容器的退出状态反馈给 Docker Daemon。</li>
</ol>
<p><img src="/2023/05/docker-study-4/docker-architecture.drawio.png" alt="Docker架构图"></p>
<p><a href="/2023/05/docker-study-4/docker-architecture.drawio">架构图设计文件</a></p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 6. 镜像导入导出和容器导入导出的区别</title>
    <url>/2023/05/docker-study-6/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="镜像-save-与容器-export"><a href="#镜像-save-与容器-export" class="headerlink" title="镜像 save 与容器 export"></a>镜像 save 与容器 export</h2><p>都可以保存为 tar 文件。</p>
<table>
<thead>
<tr>
<th align="center">镜像 save</th>
<th align="center">容器 export</th>
</tr>
</thead>
<tbody><tr>
<td align="center">save 一次可以对多个镜像导出。</td>
<td align="center">export 一次只能对一个容器导出。</td>
</tr>
<tr>
<td align="center">save 保存了原镜像的完整记录。</td>
<td align="center">export 只是对当前容器的文件系统快照进行导出，会丢弃原镜像的所有历史记录与原数据信息。</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="镜像-load-与容器-import-与容器-commit"><a href="#镜像-load-与容器-import-与容器-commit" class="headerlink" title="镜像 load 与容器 import 与容器 commit"></a>镜像 load 与容器 import 与容器 commit</h2><p>都将恢复成镜像。</p>
<table>
<thead>
<tr>
<th align="center">镜像 load</th>
<th align="center">容器 import</th>
<th align="center">容器 commit</th>
</tr>
</thead>
<tbody><tr>
<td align="center">load 恢复的镜像与原镜像的分层事完全相同的。 可以用 history 命令查询镜像的历史（分层）。</td>
<td align="center">import 恢复的镜像只包含当前镜像一层。</td>
<td align="center">commit 生成的镜像包含原容器的所有历史（分层）。</td>
</tr>
<tr>
<td align="center">load 恢复的镜像与原镜像是同一个镜像，即 imageID 相同。</td>
<td align="center">import 恢复的镜像是是新构建的镜像，与原镜像的 imageID 不同。</td>
<td align="center">commit 恢复的镜像是是新构建的镜像，与原镜像的 imageID 不同。</td>
</tr>
<tr>
<td align="center">load 恢复的镜像不能指定 repository 和 tag，与原镜像相同。</td>
<td align="center">import 可指定恢复镜像的 repository 和 tag。</td>
<td align="center">commit 可指定恢复镜像的 repository 和 tag。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 10. Docker Compose</title>
    <url>/2023/05/docker-study-10/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker Compose 是一个需要在 Docker 主机上进行安装的 Docker 容器编排外部工具。其并不是通过脚本或各种冗长的 Docker 命令来将应用组件组织起来，而是通过一个声明式的配置文件描述整个应用，然后通过一条命令完成应用部署。部署成功后，还可通过一系列简单命令实现对其完整生命周期的管理。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 8. 数据卷持久化</title>
    <url>/2023/05/docker-study-8/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="数据卷简介"><a href="#数据卷简介" class="headerlink" title="数据卷简介"></a>数据卷简介</h2><p>数据卷是<strong>宿主机</strong>中的一个特殊的文件&#x2F;目录，这个文件&#x2F;目录与容器中的另一个文件&#x2F;目录进行了直接关联，在任何一端对文件&#x2F;目录的写操作，在另一端都会同时发生相应变化。<br>在宿主中的这个文件&#x2F;目录就称为数据卷，而容器中的这个关联文件&#x2F;目录则称为该数据卷在该容器中的挂载点。·数据卷的设计目的就是为了实现数据持久化，其完全独立于容器的生命周期，属于宿主机文件系统，但不属于 UnionFS。因此，容器被删除时，不会删除其挂载的数据卷。</p>
<span id="more"></span>

<h2 id="数据卷特性"><a href="#数据卷特性" class="headerlink" title="数据卷特性"></a>数据卷特性</h2><ul>
<li>数据卷在容器启动时初始化，如果容器启动后容器本身已经包含了数据，那么，这些数据会在容器启动后直接出现在数据卷中，反之亦然。</li>
<li>可以对数据卷或挂载点中的内容直接修改，修改后对方立即可看到。</li>
<li>数据卷会一直存在，即使挂载数据卷的容器己经被删除。</li>
<li>数据卷可以在容器之间共享和重用。</li>
</ul>
<h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><p>原理是 Linux 硬连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v [宿主机目录绝对路径]:[容器目录绝对路径] [镜像标识] /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读</span></span><br><span class="line">docker run -it -v [宿主机目录绝对路径]:[容器目录绝对路径]:ro [镜像标识] /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="数据卷共享"><a href="#数据卷共享" class="headerlink" title="数据卷共享"></a>数据卷共享</h2><p>这种模式建议单独创建一个数据卷容器提供共享。因为如果被共享的数据容器有应用服务，把容器搞崩了，会影响其他的容器共享数据卷。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --volumes-form [被共享的容器] [镜像标识] /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile-持久化"><a href="#Dockerfile-持久化" class="headerlink" title="Dockerfile 持久化"></a>Dockerfile 持久化</h2><p>VOLUME 指令可以在容器中创建可以挂载数据卷的挂载点。其参数可以是字符串数组，也可以是使用空格隔开的多个纯字符串。例如，VOLUME[“Nar&#x2F;www”,”&#x2F;etc&#x2F;apache”]或 VOLUME &#x2F;var&#x2F;www&#x2F;etc&#x2F;apache.</p>
<p>创建容器后，如果要看挂载点对应的宿主机目录，就用 docker inspect 命令查看容器详情。可以看到”Mounts”下的挂载点信息。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 7. Docker Cache</title>
    <url>/2023/05/docker-study-7/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="镜像组成"><a href="#镜像组成" class="headerlink" title="镜像组成"></a>镜像组成</h2><p>镜像由文件系统和 JSON 文件组成。所以相同的文件系统和 JSON 文件的镜像是同一个镜像，ImageID 必相同。<br><img src="/2023/05/docker-study-7/image-compose.drawio.png" alt="镜像组成"></p>
<span id="more"></span>

<h2 id="镜像构建过程"><a href="#镜像构建过程" class="headerlink" title="镜像构建过程"></a>镜像构建过程</h2><p><img src="/2023/05/docker-study-7/image-process.drawio.png" alt="镜像构建过程"></p>
<h2 id="build-cache-机制"><a href="#build-cache-机制" class="headerlink" title="build cache 机制"></a>build cache 机制</h2><p>Docker Daemnon 通过 Dockerfile 构建镜像时，当发现即将新构建出的镜像（层）与本地己存在的某镜像（层）重复时，默认会复用己存在镜像（层）而不是重新构建新的镜像（层），这种机制称为 docker build cache 机制。该机制不仅加快了镜像的构建过程，同时也大量节省了 Docker 宿主机的空间。<br>docker build cache 并不是占用内存的 cache,而是一种对磁盘中相应镜像层的检索、复用机制。所以，无论是关闭 Docker 引擎，还是重启 Docker 宿主机，只要该镜像（层）存在于本地，那么就会复用。</p>
<h2 id="build-cache-失效"><a href="#build-cache-失效" class="headerlink" title="build cache 失效"></a>build cache 失效</h2><p>Docker build cache 在以下几种情况下会失效：</p>
<h3 id="Dockerfile-变化"><a href="#Dockerfile-变化" class="headerlink" title="Dockerfile 变化"></a>Dockerfile 变化</h3><p>当 Dockerfile 文件中某个指令内容发生变化，那么从发生变化的这个指令层开始的所有镜像层 cache 全部失效。即从该指令行开始的镜像层将构建出新的镜像层，而不再使用 build cache,即使后面的指令并未发生变化。因为镜像关系本质上是一种树状关系，只要其上层节点变了，那么该发生变化节点的所有下层节点也就全部变化了。·</p>
<h3 id="ADD-或-COPY-指令内容变化"><a href="#ADD-或-COPY-指令内容变化" class="headerlink" title="ADD 或 COPY 指令内容变化"></a>ADD 或 COPY 指令内容变化</h3><p>Dockerfile 文件内容没有变化，但 ADD 或 coPY 指令所复制的文件内容发生了变化，同样会使从该指令镜像层开始的后面所有镜像层的 build cache 失效。</p>
<h3 id="RUN-指令外部依赖变化"><a href="#RUN-指令外部依赖变化" class="headerlink" title="RUN 指令外部依赖变化"></a>RUN 指令外部依赖变化</h3><p>与 ADD&#x2F;COPY 指令相似。Dockerfile 文件内容没有变化，但 RUN 命令的外部依赖发生了变化，例如本例中要安装的 ⅵm 软件源发生了变更（版本变化、下载地址变化等），那么从发生变化的这个指令层开始的所有镜像层 cache 全部失效。</p>
<h3 id="指定不使用-build-cache"><a href="#指定不使用-build-cache" class="headerlink" title="指定不使用 build cache"></a>指定不使用 build cache</h3><p>有些时候为了确保在镜像构建过程中使用到新的数据，在镜像构建 docker build 时，通过-no-cache 选项指定不使用 build cache。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和试题 (005) -- Vue.js 挑战</title>
    <url>/2023/02/recommend-algorithm-05/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-algorithm-05/banner.png" alt="Vue.js 挑战"></p>
<h2 id="LeetCode-解题指南"><a href="#LeetCode-解题指南" class="headerlink" title="LeetCode 解题指南"></a>LeetCode 解题指南</h2><p>一个 Vue.js 在线挑战平台</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/webfansplz/vuejs-challenges" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=webfansplz&repo=vuejs-challenges&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=webfansplz/vuejs-challenges&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 学习 9. Docker 本地网络</title>
    <url>/2023/05/docker-study-9/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实现 linux 虚拟网络 veth pair + bridge 模型。每个容器会有一个或多个网卡，每个网卡会连接到某个网桥上的终端。</p>
<p><img src="/2023/05/docker-study-9/docker-network.drawio.png" alt="原理"></p>
<span id="more"></span>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="创建-bridge"><a href="#创建-bridge" class="headerlink" title="创建 bridge"></a>创建 bridge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -d bridge [网络名]</span><br></pre></td></tr></table></figure>

<h3 id="创建容器指定-bridge"><a href="#创建容器指定-bridge" class="headerlink" title="创建容器指定 bridge"></a>创建容器指定 bridge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --network [网络标识] [镜像标识]</span><br></pre></td></tr></table></figure>

<h3 id="指定容器和-bridge-网络链接"><a href="#指定容器和-bridge-网络链接" class="headerlink" title="指定容器和 bridge 网络链接"></a>指定容器和 bridge 网络链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network connect [网络标识] [容器标识]</span><br></pre></td></tr></table></figure>

<h3 id="创建容器指定和别的容器共享网卡"><a href="#创建容器指定和别的容器共享网卡" class="headerlink" title="创建容器指定和别的容器共享网卡"></a>创建容器指定和别的容器共享网卡</h3><p>新创建的容器用 inspect 查不到网卡。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --network container:[容器标识] [镜像标识]</span><br></pre></td></tr></table></figure>

<h3 id="null-网络"><a href="#null-网络" class="headerlink" title="null 网络"></a>null 网络</h3><p>没有 IP,不能连外部网络。</p>
<h3 id="host-网络"><a href="#host-网络" class="headerlink" title="host 网络"></a>host 网络</h3><p>和宿主机共享网卡。<strong>不用做端口映射</strong>。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集</title>
    <url>/2023/02/recommend-algorithm-06/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/02/recommend-algorithm-01/" title="算法和试题 (001) -- JavaScript Algorithms and Data Structures">算法和试题 (001) – JavaScript Algorithms and Data Structures</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-02/" title="算法和试题 (002) -- Hello，算法">算法和试题 (002) – Hello，算法</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-03/" title="算法和试题 (003) -- The Algorithms - JavaScript">算法和试题 (003) – The Algorithms - JavaScript</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-04/" title="算法和试题 (004) -- LeetCode 解题指南">算法和试题 (004) – LeetCode 解题指南</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-05/" title="算法和试题 (005) -- Vue.js 挑战">算法和试题 (005) – Vue.js 挑战</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-06/" title="算法和试题 (006) -- Type Challenge TypeScript 类型体操姿势合集">算法和试题 (006) – Type Challenge TypeScript 类型体操姿势合集</a></p>
</li>
<li><p><a href="/2023/02/recommend-algorithm-07/" title="算法和试题 (007) -- 一日一题">算法和试题 (007) – 一日一题</a></p>
</li>
</ul>

</details>


<p><img src="/2023/02/recommend-algorithm-06/banner.svg" alt="Type Challenge TypeScript 类型体操姿势合集"></p>
<h2 id="Type-Challenge"><a href="#Type-Challenge" class="headerlink" title="Type Challenge"></a>Type Challenge</h2><p>TypeScript 类型体操姿势合集</p>
<span id="more"></span>

<p style="text-align: center;"><a href="https://github.com/type-challenges/type-challenges" target="_blank">官网地址</a></p><img src="https://github-readme-stats.vercel.app/api/pin/?username=type-challenges&repo=type-challenges&show_owner=true" loading="lazy" /><img src="https://api.star-history.com/svg?repos=type-challenges/type-challenges&type=Date" loading="lazy" />
]]></content>
      <categories>
        <category>算法和试题</category>
      </categories>
  </entry>
  <entry>
    <title>iTerm2 快捷键</title>
    <url>/2023/05/iterm2-hot-key/</url>
    <content><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Preferences &gt; Profiles &gt; Other Actions &gt; Import JSON Profiles…</p>
<p><a href="/2023/05/iterm2-hot-key/Profiles.json">点击下载</a></p>
<span id="more"></span>

<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">command + t</td>
<td align="center">新建标签</td>
</tr>
<tr>
<td align="center">command + w</td>
<td align="center">关闭标签</td>
</tr>
<tr>
<td align="center">command + 数字 或 command + 左右方向键</td>
<td align="center">切换标签</td>
</tr>
<tr>
<td align="center">command + enter</td>
<td align="center">切换全屏</td>
</tr>
</tbody></table>
<h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">command + d</td>
<td align="center">垂直分屏</td>
</tr>
<tr>
<td align="center">command + shift + d</td>
<td align="center">水平分屏</td>
</tr>
<tr>
<td align="center">command + option + 方向键</td>
<td align="center">切换屏幕</td>
</tr>
</tbody></table>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><mark class="label ">command +</mark></td>
<td align="center"><mark class="label ">撤销</mark></td>
</tr>
<tr>
<td align="center">command + f</td>
<td align="center">查找</td>
</tr>
</tbody></table>
<h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><mark class="label ">command + ;</mark></td>
<td align="center"><mark class="label ">查看历史命令</mark></td>
</tr>
<tr>
<td align="center">ctrl + r</td>
<td align="center">搜索命令历史</td>
</tr>
<tr>
<td align="center"><mark class="label ">command + alt + b</mark></td>
<td align="center"><mark class="label ">按键回放</mark></td>
</tr>
<tr>
<td align="center">command + shift + h</td>
<td align="center">查看剪贴板历史</td>
</tr>
</tbody></table>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><mark class="label ">ctrl + u</mark></td>
<td align="center"><mark class="label ">清除当前行</mark></td>
</tr>
<tr>
<td align="center"><mark class="label ">ctrl + w</mark></td>
<td align="center"><mark class="label ">删除光标之前的单词</mark></td>
</tr>
<tr>
<td align="center">ctrl + k</td>
<td align="center">删除到文本末尾</td>
</tr>
<tr>
<td align="center"><mark class="label ">ctrl + l 或 command + r</mark></td>
<td align="center"><mark class="label ">清屏</mark></td>
</tr>
</tbody></table>
<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><mark class="label ">ctrl + a</mark></td>
<td align="center"><mark class="label ">到行首</mark></td>
</tr>
<tr>
<td align="center"><mark class="label ">ctrl + e</mark></td>
<td align="center"><mark class="label ">到行尾</mark></td>
</tr>
<tr>
<td align="center"><mark class="label ">ctrl + shift + ⬆️ 或 ⬇️</mark></td>
<td align="center"><mark class="label ">切换输入点</mark>，需要配置 Preference &gt; Profiles &gt; Terminal &gt; Shell Integration &gt; Show mark indicators，勾选后输入点左侧会出现三角形标记。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iTerm2</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 使用 - 编辑器 Editor</title>
    <url>/2023/05/vscode-help-editor/</url>
    <content><![CDATA[<p><strong>声明： 本文档信息来源于<a href="https://code.visualstudio.com/docs">VSCode官方文档</a>。</strong></p>


<span id="more"></span>

<h2 id="编辑器演练场"><a href="#编辑器演练场" class="headerlink" title="编辑器演练场"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_getting-started">编辑器演练场</a></h2><p>帮助 &gt; 编辑器演练场</p>
<img alt="编辑器演练场" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/interactive_playground.png" width="60%">

<h2 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h2><h3 id="多光标选择"><a href="#多光标选择" class="headerlink" title="多光标选择"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_multi-cursor-selection">多光标选择</a></h3><p>添加光标：<strong>Option+Click</strong><br>键盘快捷方式: <strong>⌥⌘↑</strong> 或 <strong>⌥⌘↓</strong></p>
<img alt="添加光标" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/multicursor.gif" width="60%">

<p>根据当前选择的内容，对所有同样的内容添加选择光标：<strong>⇧⌘L</strong></p>
<img alt="对所有同样的内容添加选择光标" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection.gif" width="60%">

<p>根据当前选择的内容，对下一个同样的内容添加选择光标：<strong>⌘D</strong></p>
<img alt="对下一个同样的内容添加选择光标" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection_one_by_one.gif" width="60%">

<h3 id="撤销光标位置"><a href="#撤销光标位置" class="headerlink" title="撤销光标位置"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_undo-cursor-position">撤销光标位置</a></h3><p><strong>⌘U</strong></p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><h3 id="收缩-x2F-扩张选择"><a href="#收缩-x2F-扩张选择" class="headerlink" title="收缩&#x2F;扩张选择"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_shrinkexpand-selection">收缩&#x2F;扩张选择</a></h3><p><strong>⌃⇧⌘←</strong> 和 <strong>⌃⇧⌘→</strong></p>
<img alt="收缩/扩张选择" src="https://code.visualstudio.com/assets/docs/editor/codebasics/expandselection.gif" width="60%">

<h3 id="列选择"><a href="#列选择" class="headerlink" title="列选择"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_column-box-selection">列选择</a></h3><p>按住 <strong>Shift+Option</strong> 选择。</p>
<img alt="列选择" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/column-select.gif" width="60%">

<h3 id="列选择模式"><a href="#列选择模式" class="headerlink" title="列选择模式"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_column-selection-mode">列选择模式</a></h3><p><strong>选择 &gt; 列选择模式</strong></p>
<h2 id="向上-x2F-下"><a href="#向上-x2F-下" class="headerlink" title="向上&#x2F;下"></a>向上&#x2F;下</h2><h3 id="向上-x2F-下复制行"><a href="#向上-x2F-下复制行" class="headerlink" title="向上&#x2F;下复制行"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_copy-line-up-down">向上&#x2F;下复制行</a></h3><p><strong>⇧⌥↑</strong> or <strong>⇧⌥↓</strong></p>
<img alt="向上/下复制行" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/copy_line_down.gif" width="60%">

<h3 id="向上-x2F-下移动行"><a href="#向上-x2F-下移动行" class="headerlink" title="向上&#x2F;下移动行"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_move-line-up-and-down">向上&#x2F;下移动行</a></h3><p><strong>⌥↑</strong> or <strong>⌥↓</strong></p>
<img alt="向上/下移动行" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/move_line.gif" width="60%">

<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_transform-text-commands">大小写转换</a></h2><p>命令面板中输入 <strong>Transform</strong></p>
<img alt="大小写转换" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/transform-text-commands.png" width="60%">

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_code-formatting">格式化</a></h2><p>选中代码格式化: <strong>⌘K ⌘F</strong><br>整个文档格式话：<strong>⇧⌥F</strong></p>
<img alt="格式化" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/code_formatting.gif" width="60%">

<h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_code-folding">代码折叠</a></h3><p>当前区域：<strong>⌥⌘[</strong> and <strong>⌥⌘]</strong></p>
<img alt="代码折叠" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/code_folding.gif" width="60%">

<p>整个文档：<strong>⌘K ⌘0</strong> and <strong>⌘K ⌘J</strong><br>整个文档注释折叠：<strong>⌘K ⌘&#x2F;</strong></p>
<h3 id="递归折叠"><a href="#递归折叠" class="headerlink" title="递归折叠"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_folding">递归折叠</a></h3><p>开关折叠： <strong>⌘K ⌘L</strong><br>递归折叠: <strong>⌘K ⌘[</strong><br>递归展开: <strong>⌘K ⌘]</strong></p>
<p>使用折叠标记 <strong>&#x2F;&#x2F;#region</strong> ， <strong>&#x2F;&#x2F;#endregion</strong></p>
<h3 id="选择代码折叠"><a href="#选择代码折叠" class="headerlink" title="选择代码折叠"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_fold-selection">选择代码折叠</a></h3><p>创建折叠区域: <strong>⌘K ⌘,</strong><br>移除折叠区域: <strong>⌘K ⌘.</strong></p>
<h2 id="显示建议"><a href="#显示建议" class="headerlink" title="显示建议"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_intellisense">显示建议</a></h2><p><strong>⌘I</strong></p>
<img alt="显示建议" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/intellisense.gif" width="60%">

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="查看定义"><a href="#查看定义" class="headerlink" title="查看定义"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_peek">查看定义</a></h3><p><strong>⌥F12</strong></p>
<img alt="查看定义" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/peek.gif" width="60%">

<h3 id="跳转到定义"><a href="#跳转到定义" class="headerlink" title="跳转到定义"></a>跳转到定义</h3><p><strong>F12</strong> 或 <strong>⌘ + click</strong></p>
<img alt="跳转到定义" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/goto_definition.gif" width="60%">

<h3 id="转到引用"><a href="#转到引用" class="headerlink" title="转到引用"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-references">转到引用</a></h3><p><strong>⇧F12</strong></p>
<img alt="转到引用" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/find_all_references.gif" width="60%">

<h3 id="查看所有引用"><a href="#查看所有引用" class="headerlink" title="查看所有引用"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_find-all-references-view">查看所有引用</a></h3><p><strong>⇧⌥F12</strong></p>
<h3 id="跳转到实现"><a href="#跳转到实现" class="headerlink" title="跳转到实现"></a><a href="https://code.visualstudio.com/docs/editor/editingevolved#_go-to-implementation">跳转到实现</a></h3><p><strong>⌘F12</strong></p>
<p>如果选择一个接口，这将查看该接口的所有实现。</p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a><a href="https://code.visualstudio.com/docs/editor/refactoring#_code-actions-quick-fixes-and-refactorings">重构</a></h3><p><strong>⌃⇧R</strong></p>
<h2 id="重命名变量"><a href="#重命名变量" class="headerlink" title="重命名变量"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_rename-symbol">重命名变量</a></h2><p><strong>F2</strong></p>
<img alt="重命名变量" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/rename_symbol.gif" width="60%">

<h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><h3 id="快速打开"><a href="#快速打开" class="headerlink" title="快速打开"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_quick-open">快速打开</a></h3><p><strong>⌘P</strong></p>
<img alt="快速打开" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/QuickOpen.gif" width="60%">

<p>输入 <strong>?</strong> 显示命令建议</p>
<img alt="命令建议" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/quick-open-command-dropdown.png" width="60%">

<h3 id="快速打开多个文件"><a href="#快速打开多个文件" class="headerlink" title="快速打开多个文件"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_open-multiple-files-from-quick-open">快速打开多个文件</a></h3><p><strong>⌘P➡️</strong></p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="跳转到文中的变量"><a href="#跳转到文中的变量" class="headerlink" title="跳转到文中的变量"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-symbol-in-file">跳转到文中的变量</a></h3><p><strong>⇧⌘O</strong></p>
<img alt="跳转到文中的变量" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/find_by_symbol.gif" width="60%">

<p>如果要把变量分组，则输入 <strong>@:</strong></p>
<img alt="变量分组" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/group_symbols_by_kind.png" width="60%">

<h3 id="跳转工作区中的变量"><a href="#跳转工作区中的变量" class="headerlink" title="跳转工作区中的变量"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-symbol-in-workspace">跳转工作区中的变量</a></h3><p><strong>⌘T</strong></p>
<img alt="跳转工作区中的变量" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/go_to_symbol_in_workspace.png" width="60%">

<h3 id="跳转到指定行"><a href="#跳转到指定行" class="headerlink" title="跳转到指定行"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_navigate-to-a-specific-line">跳转到指定行</a></h3><p><strong>⌃G</strong></p>
<h3 id="跳转到文件头部和尾部"><a href="#跳转到文件头部和尾部" class="headerlink" title="跳转到文件头部和尾部"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_navigate-to-beginning-and-end-of-file">跳转到文件头部和尾部</a></h3><p><strong>⌘↑</strong> and <strong>⌘↓</strong></p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="编辑器网格布局"><a href="#编辑器网格布局" class="headerlink" title="编辑器网格布局"></a><a href="https://code.visualstudio.com/docs/getstarted/userinterface#_grid-editor-layout">编辑器网格布局</a></h3><p><strong>查看 &gt; 编辑器布局</strong></p>
<img alt="编辑器网格布局" src="https://code.visualstudio.com/assets/docs/getstarted/userinterface/grid-layout-menu.png" width="60%">

<p>鼠标拖动 编辑器 Tab，调整布局（如果同时按住 <strong>⌥</strong> , 会有分裂效果）：</p>
<img alt="鼠标拖动tab，调整布局" src="https://code.visualstudio.com/assets/docs/getstarted/userinterface/grid-dnd.gif" width="60%">

<p>分裂编辑器 Tab 快捷按钮（按住 <strong>⌥</strong> 可调整分裂方向）：</p>
<img alt="分裂编辑器Tab快捷按钮" src="https://code.visualstudio.com/assets/docs/getstarted/userinterface/grid-alt.gif" width="60%">

<h3 id="切换编辑器快捷键"><a href="#切换编辑器快捷键" class="headerlink" title="切换编辑器快捷键"></a><a href="https://code.visualstudio.com/docs/getstarted/userinterface#_keyboard-shortcuts">切换编辑器快捷键</a></h3><p>切换到右边的编辑器: <strong>⌥⌘→</strong><br>切换到左边的编辑器: <strong>⌥⌘←</strong><br>切换到最左边的编辑器组: <strong>⌘1</strong><br>切换到中间的编辑器组: <strong>⌘2</strong><br>切换到最右边的编辑器组: <strong>⌘3</strong><br>关闭当前编辑器: <strong>⌘W</strong><br>关闭编辑器组内的所有编辑器: <strong>⌘K W</strong><br>关闭所有编辑器: <strong>⌘K ⌘W</strong></p>
<h2 id="tab显示工作区"><a href="#tab显示工作区" class="headerlink" title="tab显示工作区"></a><a href="https://code.visualstudio.com/docs/editor/multi-root-workspaces#_editor">tab显示工作区</a></h2><p>“workbench.editor.labelFormat”: “medium”</p>
<h2 id="开-x2F-关Tab"><a href="#开-x2F-关Tab" class="headerlink" title="开&#x2F;关Tab"></a>开&#x2F;关Tab</h2><p>关闭: <strong>⌘W</strong><br>重新打开已关闭的：<strong>⇧⌘T</strong></p>
<h2 id="和并行"><a href="#和并行" class="headerlink" title="和并行"></a>和并行</h2><p><strong>⌃J</strong></p>
]]></content>
      <categories>
        <category>VSCode 使用</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 功能推荐 - Sticky Scroll 粘性滚动</title>
    <url>/2023/05/vscode-feature-sticky-scroll/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“sticky scroll”UI 将显示编辑器顶部所在的类&#x2F;接口&#x2F;名称空间&#x2F;函数&#x2F;方法&#x2F;构造函数，帮助您了解文档中的位置。<a href="https://code.visualstudio.com/updates/v1_70#_editor-sticky-scroll">官网介绍</a></p>
<span id="more"></span>

<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p><img src="/2023/05/vscode-feature-sticky-scroll/sticky-scroll.gif" alt="方法Sticky Scroll一"></p>
]]></content>
      <categories>
        <category>VSCode 功能推荐</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 技巧 - 基础</title>
    <url>/2023/05/vscode-skill-basic/</url>
    <content><![CDATA[<p><strong>声明： 本文档信息来源于<a href="https://code.visualstudio.com/docs">VSCode官方文档</a>。</strong></p>


<span id="more"></span>

<h2 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_getting-started">欢迎页面</a></h2><p><strong>帮助 &gt; 欢迎</strong></p>
<img alt="欢迎" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/getstarted_page.png" width="60%">

<h2 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_command-palette">命令面板</a></h2><p><strong>⇧⌘P</strong></p>
<img alt="命令面板" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/OpenCommandPalatte.gif" width="60%">

<h2 id="键盘快捷方式参考"><a href="#键盘快捷方式参考" class="headerlink" title="键盘快捷方式参考"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_keyboard-reference-sheets">键盘快捷方式参考</a></h2><p><strong>帮助 &gt; 键盘快捷方式参考</strong></p>
<img alt="键盘快捷方式参考" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/KeyboardReferenceSheet.png" width="60%">

<h2 id="导航在最近的文件夹和工作区"><a href="#导航在最近的文件夹和工作区" class="headerlink" title="导航在最近的文件夹和工作区"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_navigate-between-recently-opened-folders-and-workspaces">导航在最近的文件夹和工作区</a></h2><p><strong>⌃R</strong><br>等于 <strong>文件 -&gt; 打开最近的文件</strong></p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_command-line">命令行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># open code with current directory</span></span><br><span class="line">code .</span><br><span class="line"></span><br><span class="line"><span class="comment"># open the current directory in the most recently used code window</span></span><br><span class="line">code -r .</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new window</span></span><br><span class="line">code -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># change the language</span></span><br><span class="line">code --locale=es</span><br><span class="line"></span><br><span class="line"><span class="comment"># open diff editor</span></span><br><span class="line">code --diff &lt;file1&gt; &lt;file2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># open file at specific line and column &lt;file:line[:character]&gt;</span></span><br><span class="line">code --goto package.json:10:5</span><br><span class="line"></span><br><span class="line"><span class="comment"># see help options</span></span><br><span class="line">code --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable all extensions</span></span><br><span class="line">code --disable-extensions .</span><br></pre></td></tr></table></figure>

<h2 id="查看切换"><a href="#查看切换" class="headerlink" title="查看切换"></a>查看切换</h2><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>切换: <strong>⌃W</strong><br>新建: <strong>⇧⌘N</strong></p>
<h3 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h3><p>主侧栏: <strong>⌘B</strong><br>辅侧栏: <strong>⌥⌘B</strong><br>资源管理器: <strong>⇧⌘E</strong><br>扩展: <strong>⇧⌘X</strong><br>搜索: <strong>⇧⌘F</strong><br>源代码管理: <strong>⌃⇧G</strong><br>运行和调试: <strong>⇧⌘D</strong></p>
<h3 id="底栏"><a href="#底栏" class="headerlink" title="底栏"></a>底栏</h3><p>终端: <strong>⌃&#96;</strong><br>输出: <strong>⇧⌘U</strong><br>调试控制台: <strong>⇧⌘Y</strong><br>问题: <strong>⇧⌘M</strong></p>
<h3 id="禅模式"><a href="#禅模式" class="headerlink" title="禅模式"></a>禅模式</h3><p><strong>⌘M Z</strong></p>
<h2 id="开关底栏"><a href="#开关底栏" class="headerlink" title="开关底栏"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_toggle-panel">开关底栏</a></h2><p><strong>⌘J</strong></p>
<h2 id="历史导航"><a href="#历史导航" class="headerlink" title="历史导航"></a><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_navigation-history">历史导航</a></h2><p>完整历史导航：<strong>⌃Tab</strong><br>返回：<strong>⌃-</strong><br>前进：<strong>⌃⇧-</strong></p>
<img alt="历史导航" src="https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/navigate_history.gif" width="60%">

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="查看有改动的配置"><a href="#查看有改动的配置" class="headerlink" title="查看有改动的配置"></a><a href="https://code.visualstudio.com/docs/getstarted/settings#_modified-settings">查看有改动的配置</a></h3><p>在配置搜索框输入: <strong>@modified</strong></p>
<img alt="查看有改动的配置" src="https://code.visualstudio.com/assets/docs/getstarted/settings/modified-filter-settings.png" width="60%">

<h3 id="配置搜索"><a href="#配置搜索" class="headerlink" title="配置搜索"></a><a href="https://code.visualstudio.com/docs/getstarted/settings#_other-filters">配置搜索</a></h3><img alt="配置搜索" src="https://code.visualstudio.com/assets/docs/getstarted/settings/settings-editor-filters.png" width="60%">

<p><strong>@ext</strong>: 配置一个扩展。例如: <strong>@ext:ms-python.python</strong><br><strong>@feature</strong>: 配置一个特性。例如：**@feature:explorer**<br><strong>@id</strong>: 根据配置 ID 搜索。例如：**@id:workbench.activityBar.visible**<br><strong>@lang</strong>: 根据语言 ID 搜索。例如：**@lang:typescript**<br><strong>@tag</strong>: 根据 VSCode 系统搜索。例如：**@tag:workspaceTrust**</p>
<h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a><a href="https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations">配置文件路径</a></h3><p>Windows: <strong>%APPDATA%\Code\User\settings.json</strong><br>macOS: <strong>$HOME&#x2F;Library&#x2F;Application\ Support&#x2F;Code&#x2F;User&#x2F;settings.json</strong><br>Linux: <strong>$HOME&#x2F;.config&#x2F;Code&#x2F;User&#x2F;settings.json</strong></p>
<h3 id="重制所有配置"><a href="#重制所有配置" class="headerlink" title="重制所有配置"></a><a href="https://code.visualstudio.com/docs/getstarted/settings#_reset-all-settings">重制所有配置</a></h3><p>打开配置文件 <strong>settings.json</strong> , 清空 <strong>{}</strong> 之间的内容。</p>
<h3 id="设置优先级"><a href="#设置优先级" class="headerlink" title="设置优先级"></a><a href="https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence">设置优先级</a></h3><p>后一个层级覆盖前前一个层级：</p>
<ul>
<li>Default settings</li>
<li>User settings</li>
<li>Remote settings</li>
<li>Workspace settings</li>
<li>Workspace Folder settings</li>
<li>Language-specific default settings</li>
<li>Language-specific user settings</li>
<li>Language-specific remote settings</li>
<li>Language-specific workspace settings</li>
<li>Language-specific workspace folder settings</li>
<li>Policy settings</li>
</ul>
<h2 id="显示修改过的按键绑定"><a href="#显示修改过的按键绑定" class="headerlink" title="显示修改过的按键绑定"></a><a href="https://code.visualstudio.com/docs/getstarted/keybindings#_viewing-modified-keybindings">显示修改过的按键绑定</a></h2><img alt="显示修改过的按键绑定" src="https://code.visualstudio.com/assets/docs/getstarted/keybinding/user-keyboard-shortcuts.png" width="60%">

<h2 id="设置显示语言"><a href="#设置显示语言" class="headerlink" title="设置显示语言"></a><a href="https://code.visualstudio.com/docs/getstarted/locales#_changing-the-display-language">设置显示语言</a></h2><img alt="设置显示语言" src="https://code.visualstudio.com/assets/docs/getstarted/locales/configure-language-command.png" width="60%">

<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a><a href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options">高级搜索</a></h3><img alt="高级搜索" src="https://code.visualstudio.com/assets/docs/editor/codebasics/searchadvanced.png" width="60%">

<p>在 <strong>包含的文件</strong> 和 <strong>排除的文件</strong> 中，如果输入 <strong>example</strong> ，则会匹配工作区内的名字包含 <strong>example</strong> 的目录和文件。如果输入 <strong>.&#x2F;example</strong> ，则会匹配工作区顶级的目录 <strong>example&#x2F;</strong> 。使用 <strong>,</strong> 分隔多个匹配条件。</p>
<p>更多匹配语法：</p>
<ul>
<li><strong>*</strong> 零或多个字符</li>
<li><strong>?</strong> 一个字符</li>
<li><strong>**</strong> 任意长度的路径，包括空路径</li>
<li><strong>{}</strong> 分组条件。例如 <strong>{**&#x2F;*.html,**&#x2F;*.txt}</strong> 匹配所有 html 和 text 文件。</li>
<li>[] 声明一个字符范围。例如 <strong>example.[0-9]</strong> 匹配 <strong>example.0</strong> , <strong>example.1</strong>, …</li>
<li>[!…] 否定一个字符范围。例如 <strong>example.[!0-9]</strong> 匹配 <strong>example.a</strong>, <strong>example.b</strong>, 但不匹配 <strong>example.0</strong> 。</li>
</ul>
<p><strong>排除的文件</strong> 的小齿轮点亮后会自动排除 配置中 files.exclude 和 search.exclude 指定的文件。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="工作区推荐扩展"><a href="#工作区推荐扩展" class="headerlink" title="工作区推荐扩展"></a><a href="https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions">工作区推荐扩展</a></h3><p>在 .vscode 目录中添加 extensions.json 文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;recommendations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">,</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展安装路径"><a href="#扩展安装路径" class="headerlink" title="扩展安装路径"></a><a href="https://code.visualstudio.com/docs/editor/extension-marketplace#_where-are-extensions-installed">扩展安装路径</a></h3><ul>
<li>Windows: %USERPROFILE%.vscode\extensions</li>
<li>macOS: ~&#x2F;.vscode&#x2F;extensions</li>
<li>Linux: ~&#x2F;.vscode&#x2F;extensions</li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="调试记录点"><a href="#调试记录点" class="headerlink" title="调试记录点"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_logpoints">调试记录点</a></h3><img alt="记录点" src="https://code.visualstudio.com/assets/docs/editor/debugging/log-points.gif" width="60%">

<p>debug的时候显示日志信息。不用console.log了。</p>
<h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a><a href="https://code.visualstudio.com/docs/editor/variables-reference#_predefined-variables">引用变量</a></h3><p>VSCode提供引用变量，供debugging 和 task 配置文件使用。</p>
<h3 id="调试平台指定参数"><a href="#调试平台指定参数" class="headerlink" title="调试平台指定参数"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_platformspecific-properties">调试平台指定参数</a></h3><p>launch.json 可以针对 <strong>“windows”<strong>，</strong>“linux”<strong>，</strong>“osx”</strong> 设置指定参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/node_modules/gulp/bin/gulpfile.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;myFolder/path/app.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;myFolder\\path\\app.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="行内断点"><a href="#行内断点" class="headerlink" title="行内断点"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_inline-breakpoints">行内断点</a></h3><p>⇧F9</p>
<p>只有当执行到达与内联断点相关联的列时，才会命中内联断点。这在调试在一行中包含多个语句的精简代码时特别有用。</p>
<h3 id="函数断点"><a href="#函数断点" class="headerlink" title="函数断点"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_function-breakpoints">函数断点</a></h3><p>调试器可以通过指定函数名来支持创建断点，而不是直接在源代码中放置断点。这在源代码不可用但函数名已知的情况下很有用。</p>
<p>通过按BREAKPOINTS部分标题中的 “+” 按钮并输入函数名称，可以创建函数断点。函数断点在断点部分用红色三角形表示。</p>
<h3 id="数据断点"><a href="#数据断点" class="headerlink" title="数据断点"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_data-breakpoints">数据断点</a></h3><p>如果调试器支持数据断点，则可以从VARIABLES视图中的上下文菜单设置它们。Break on Value Change&#x2F;Read&#x2F;Access命令将添加一个数据断点，当底层变量的值发生变化&#x2F;被读取&#x2F;被访问时，该断点将被击中。数据断点在断点部分用红色六边形显示。</p>
<p>不是所有的语言都支持。</p>
<h3 id="组合调试"><a href="#组合调试" class="headerlink" title="组合调试"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_compound-launch-configurations">组合调试</a></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/server.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Client&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/client.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server/Client&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Server&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Client&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;defaultBuildTask&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="调试时自动打开URI"><a href="#调试时自动打开URI" class="headerlink" title="调试时自动打开URI"></a><a href="https://code.visualstudio.com/docs/editor/debugging#_automatically-open-a-uri-when-debugging-a-server-program">调试时自动打开URI</a></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;serverReadyAction&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;listening on port ([0-9]+)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uriFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:%s&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openExternally&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><h3 id="运行构建任务"><a href="#运行构建任务" class="headerlink" title="运行构建任务"></a><a href="https://code.visualstudio.com/docs/editor/tasks#_typescript-hello-world">运行构建任务</a></h3><p><strong>⇧⌘B</strong></p>
<h3 id="配置任务"><a href="#配置任务" class="headerlink" title="配置任务"></a><a href="https://code.visualstudio.com/docs/editor/tasks#_custom-tasks">配置任务</a></h3><p>终端 &gt; 配置任务</p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><h3 id="插入代码片段"><a href="#插入代码片段" class="headerlink" title="插入代码片段"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_builtin-snippets">插入代码片段</a></h3><p>命令搜索: <strong>Insert Snippet</strong></p>
<h3 id="配置代码片段"><a href="#配置代码片段" class="headerlink" title="配置代码片段"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets">配置代码片段</a></h3><p>Code &gt; 首选项 &gt; 配置用户代码片段</p>
<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a><a href="https://code.visualstudio.com/docs/editor/accessibility#_zoom">缩放</a></h2><p>放大: <strong>⌘&#x3D;</strong><br>缩小: <strong>⌘-</strong><br>重制: <strong>⌘Numpad0</strong></p>
]]></content>
      <categories>
        <category>VSCode 技巧</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 5. 容器退出命令</title>
    <url>/2023/05/docker-study-5/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="退出并停止容器"><a href="#退出并停止容器" class="headerlink" title="退出并停止容器"></a>退出并停止容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="退出不停止容器"><a href="#退出不停止容器" class="headerlink" title="退出不停止容器"></a>退出不停止容器</h2><p>Ctrl + p + q</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 1. 原理</title>
    <url>/2023/03/docker-study-1/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="为什么会有-Docker"><a href="#为什么会有-Docker" class="headerlink" title="为什么会有 Docker ?"></a>为什么会有 Docker ?</h2><p>在 Docker 出现之前，如果要实现在一台电脑上同时运行多系统，需要使用虚拟机，例如 VMware。</p>
<span id="more"></span>

<p>虚拟机虽然可以虚拟多系统，但是其原理是虚拟系统内核，相当于每个虚拟机都在运行一个完整的操作系统。这样造成大量资源占用。</p>
<p>而 Docker 是与宿主机公用系统内核，占资源少，安装和启动速度快。</p>
<h2 id="虚拟机原理"><a href="#虚拟机原理" class="headerlink" title="虚拟机原理"></a>虚拟机原理</h2><p>举个例子，用 VMware 虚拟出一个 Ubuntu ，用 Tomcat 服务运行网站。操作如下：</p>
<ol>
<li>在宿主机上的操作系统中安装 VMware 软件。</li>
<li>复制 Ubuntu 系统安装文件 iso 。</li>
<li>在宿主机上的操作系统中虚拟出一个 Linux 内核。</li>
<li>给 Linux 内核分配相关硬件资源，例如CPU，内存，硬盘。（虚拟机要手动分配硬件资源）</li>
<li>在 Linux 内核上安装 Ubuntu 发行版。</li>
<li>在 Ubuntu 上安装 JDK。</li>
<li>在 JDK 上安装 Tomcat。</li>
<li>服务网站文件到 Tomcat 指定目录。</li>
</ol>
<p><img src="/2023/03/docker-study-1/Docker-VMware.png" alt="虚拟机原理"></p>
<h2 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h2><p>同样的例子，用 Docker 虚拟出一个 Tomcat 服务运行网站。操作如下：</p>
<ol>
<li>在宿主机的操作系统中安装 Docker 服务。</li>
<li>从 Docker Hub 拉取 Tomcat 镜像。</li>
<li>使用拉取的镜像生成 Tomcat 容器。</li>
<li>生成的容器没有 Linux 内核，而是和宿主机的操作系统公用 Linux 内核。（无需手动为容器分配硬件资源）</li>
<li>该容器第一层是 Linux 发行版，具体是什么发行版，由拉取的镜像定义，该层为只读镜像层。</li>
<li>该容器第二层是 JDK ，由拉取的镜像定义，该层为只读镜像层。</li>
<li>该容器第三层是 Tomcat ，由拉取的镜像定义，该层为只读镜像层。</li>
<li>该容器第四层是 可写容器层，所有文件增加，修改，删除（操作记录）都保存在该层中。程序要查找某文件，先到该层找。找不到再到更低一层找。</li>
</ol>
<p><img src="/2023/03/docker-study-1/Docker-Docker.png" alt="Docker 原理"></p>
<p>Docker 的层可重用，例如 两个镜像 Tomcat 和 Nginx，他们的 Linux 发行版 都使用了 debian:bullseye，那么这两个镜像都公使用了该层。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 2. 常用命令</title>
    <url>/2023/03/docker-study-2/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h2 id="查看-Docker-详细信息"><a href="#查看-Docker-详细信息" class="headerlink" title="查看 Docker 详细信息"></a>查看 Docker 详细信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br><span class="line"><span class="comment"># 或者查看某项信息</span></span><br><span class="line">docker info |grep Root</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="查看本地镜像列表"><a href="#查看本地镜像列表" class="headerlink" title="查看本地镜像列表"></a>查看本地镜像列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h4 id="搜索悬虚镜像"><a href="#搜索悬虚镜像" class="headerlink" title="搜索悬虚镜像"></a>搜索悬虚镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="根据-created-搜索"><a href="#根据-created-搜索" class="headerlink" title="根据 created 搜索"></a>根据 created 搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -f [since 或 before]=[镜像标识]</span><br></pre></td></tr></table></figure>

<h4 id="根据-repository-和-tag-模糊搜索"><a href="#根据-repository-和-tag-模糊搜索" class="headerlink" title="根据 repository 和 tag 模糊搜索"></a>根据 repository 和 tag 模糊搜索</h4><p>只能搜索 Docker 官方发布的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -f reference=<span class="string">&#x27;*:22*&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索-Hub-中镜像"><a href="#搜索-Hub-中镜像" class="headerlink" title="搜索 Hub 中镜像"></a>搜索 Hub 中镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search image_name</span><br></pre></td></tr></table></figure>

<h4 id="搜索-Docker-官方发布的镜像"><a href="#搜索-Docker-官方发布的镜像" class="headerlink" title="搜索 Docker 官方发布的镜像"></a>搜索 Docker 官方发布的镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search image_name -f is-official=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="限制-stars-最小数搜索"><a href="#限制-stars-最小数搜索" class="headerlink" title="限制 stars 最小数搜索"></a>限制 stars 最小数搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search mysql -f stars=100</span><br></pre></td></tr></table></figure>

<h3 id="拉取-Hub-中镜像"><a href="#拉取-Hub-中镜像" class="headerlink" title="拉取 Hub 中镜像"></a>拉取 Hub 中镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:22.04</span><br></pre></td></tr></table></figure>

<h3 id="移除本地镜像"><a href="#移除本地镜像" class="headerlink" title="移除本地镜像"></a>移除本地镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi ubuntu:latest</span><br></pre></td></tr></table></figure>

<h3 id="批量移除本地镜像"><a href="#批量移除本地镜像" class="headerlink" title="批量移除本地镜像"></a>批量移除本地镜像</h3><div class="note danger"><p>危险操作</p>
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi `docker images -aq`</span><br></pre></td></tr></table></figure>

<h3 id="批量移除悬虚镜像"><a href="#批量移除悬虚镜像" class="headerlink" title="批量移除悬虚镜像"></a>批量移除悬虚镜像</h3><p>注意有关联的容器，要先把容器删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h3 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image save centos:latest &gt; ~/temp/centos.tgz</span><br></pre></td></tr></table></figure>

<h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i ~/temp/centos.tgz</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像详情"><a href="#查看镜像详情" class="headerlink" title="查看镜像详情"></a>查看镜像详情</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image inspect centos:latest</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像历史（分层）"><a href="#查看镜像历史（分层）" class="headerlink" title="查看镜像历史（分层）"></a>查看镜像历史（分层）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> [镜像标识]</span><br></pre></td></tr></table></figure>

<h3 id="给镜像重贴tag"><a href="#给镜像重贴tag" class="headerlink" title="给镜像重贴tag"></a>给镜像重贴tag</h3><p>相当于给原镜像复制一份。imageID不变。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [原镜像名]:[原tag] [新镜像名]:[新tag]</span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu bash</span><br></pre></td></tr></table></figure>

<p>常用 options:</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">解释</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">–detach , -d</td>
<td align="center">Run container in background and print container ID</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–device</td>
<td align="center">Add a host device to the container</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–env , -e</td>
<td align="center">Set environment variables</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–env-file</td>
<td align="center">Read in a file of environment variables</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–interactive , -i</td>
<td align="center">Keep STDIN open even if not attached</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–mount</td>
<td align="center">Attach a filesystem mount to the container</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–name</td>
<td align="center">Assign a name to the container</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–network</td>
<td align="center">Connect a container to a network</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–publish , -p</td>
<td align="center">Publish a container’s port(s) to the host</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–pull</td>
<td align="center">Pull image before running (always, missing, never)</td>
<td align="center">missing</td>
</tr>
<tr>
<td align="center">–rm</td>
<td align="center">Automatically remove the container when it exits</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–tty , -t</td>
<td align="center">Allocate a pseudo-TTY</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–volume , -v</td>
<td align="center">Bind mount a volume</td>
<td align="center"></td>
</tr>
</tbody></table>
<div class="note warning"><p>容器内的进程必须处于前台运行状态，否则容器就会直接退出。自己部署一个容器运行，命令不得后台运行，前台运行即可。</p>
<p>如果容器内什么事也没做，容器也会挂掉。容器内，必须有一个进场在前台运行。</p>
</div>

<p>同创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -it ubuntu bash</span><br></pre></td></tr></table></figure>

<h3 id="查看-Docker-容器列表"><a href="#查看-Docker-容器列表" class="headerlink" title="查看 Docker 容器列表"></a>查看 Docker 容器列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps --all</span><br></pre></td></tr></table></figure>

<p>还根据 image，状态，存储卷，归属网络，映射端口等条件过滤。<a href="https://docs.docker.com/engine/reference/commandline/ps/">参考</a></p>
<h3 id="移除容器"><a href="#移除容器" class="headerlink" title="移除容器"></a>移除容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> a808d0f581d5</span><br></pre></td></tr></table></figure>

<h3 id="批量删除容器"><a href="#批量删除容器" class="headerlink" title="批量删除容器"></a>批量删除容器</h3><div class="note danger"><p>危险操作</p>
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> `docker ps -aq`</span><br></pre></td></tr></table></figure>

<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start my_centos</span><br></pre></td></tr></table></figure>

<h3 id="停止容器运行"><a href="#停止容器运行" class="headerlink" title="停止容器运行"></a>停止容器运行</h3><h4 id="优雅停止"><a href="#优雅停止" class="headerlink" title="优雅停止"></a>优雅停止</h4><p>有别的客户端正在使用该容器，则无法停止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop my_centos</span><br></pre></td></tr></table></figure>

<h4 id="强制停止"><a href="#强制停止" class="headerlink" title="强制停止"></a>强制停止</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> my_centos</span><br></pre></td></tr></table></figure>

<h3 id="批量停止"><a href="#批量停止" class="headerlink" title="批量停止"></a>批量停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop `docker ps -aq`</span><br></pre></td></tr></table></figure>

<h3 id="容器重启"><a href="#容器重启" class="headerlink" title="容器重启"></a>容器重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart [容器标识]</span><br></pre></td></tr></table></figure>

<h3 id="容器停止"><a href="#容器停止" class="headerlink" title="容器停止"></a>容器停止</h3><p>容器停止这是停止容器的对外访问，不是停止整个容器。容器中运行的服务不会停止。和start, stop有本质区别。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pause [容器标识]</span><br><span class="line">docker unpause [容器标识] <span class="comment"># 恢复</span></span><br></pre></td></tr></table></figure>

<h3 id="打印容器日志"><a href="#打印容器日志" class="headerlink" title="打印容器日志"></a>打印容器日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f -t -n 20 my_centos</span><br></pre></td></tr></table></figure>

<p>常用 options:</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">解释</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">–follow , -f</td>
<td align="center">Follow log output</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">–tail , -n</td>
<td align="center">Number of lines to show from the end of the logs</td>
<td align="center">all</td>
</tr>
<tr>
<td align="center">–timestamps , -t</td>
<td align="center">Show timestamps</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="进入正在运行的容器空间内"><a href="#进入正在运行的容器空间内" class="headerlink" title="进入正在运行的容器空间内"></a>进入正在运行的容器空间内</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ping_baidu bash</span><br></pre></td></tr></table></figure>

<h3 id="查看容器详细信息"><a href="#查看容器详细信息" class="headerlink" title="查看容器详细信息"></a>查看容器详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container inspect ping_baidu</span><br></pre></td></tr></table></figure>

<h3 id="查看容器端口转发情况"><a href="#查看容器端口转发情况" class="headerlink" title="查看容器端口转发情况"></a>查看容器端口转发情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker port my_nginx</span><br></pre></td></tr></table></figure>

<h3 id="提交容器"><a href="#提交容器" class="headerlink" title="提交容器"></a>提交容器</h3><p>这一步操作相当于把容器打包成一个本地镜像。如果不指定新的 repository 和 tag，会生成悬虚镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">&quot;Tang Lijin &lt;ho_ho_gl@hotmail.com&gt;&quot;</span> -m <span class="string">&quot;测试信息&quot;</span> my_nginx ljtang2009/centos-test-file:2023</span><br></pre></td></tr></table></figure>

<p>常用 options:</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a, –author</td>
<td align="center">作者</td>
</tr>
<tr>
<td align="center">-m, –message</td>
<td align="center">附加信息</td>
</tr>
</tbody></table>
<h3 id="对容器执行命令"><a href="#对容器执行命令" class="headerlink" title="对容器执行命令"></a>对容器执行命令</h3><h4 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a>exec 命令</h4><p>exec 原理是在容器中创建一个新的进程，执行新的命令。所以执行命令结束后，容器不会停止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [容器标识] [命令，例如 /bin/bash <span class="built_in">ls</span>]</span><br></pre></td></tr></table></figure>

<h4 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a>attach 命令</h4><p>attach 原理是在容器中附着一个标准输入输出流，不是执行新的命令。输入和输出都影响和出自容器的主进程 command（DockerFile 的 CMD 配置，或者创建容器时指定的命令）。</p>
<p>同一个容器 attach 出来的输入输出流都会输出同样信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach [容器标识]</span><br></pre></td></tr></table></figure>

<p>例如在 ubuntu 容器中，DockerFile 的 CMD 是<code>bash</code>,  主进程是运行 bash。<br>所以 attach 到该容器可以执行 bash 上的任何操作。</p>
<p>例如在 Tomcat 容器中，DockerFile 的 CMD 配置是<code>CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</code>，主进程是执行启动 Tomcat，并输出启动日志。<br>所以 attach 到该容器不能执行任何操作（除了执行停止 Tomcat 服务的操作）。</p>
<h3 id="查看容器正在运行的进程"><a href="#查看容器正在运行的进程" class="headerlink" title="查看容器正在运行的进程"></a>查看容器正在运行的进程</h3><p>top 命令可用于查看容器中的服务是否正常运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top [容器标识]</span><br><span class="line"><span class="comment"># 后面可以接linux的ps参数例如 docker top [容器标识] | grep 8080</span></span><br></pre></td></tr></table></figure>

<h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>Docker 会记录容器的主进程 command（DockerFile 的 CMD 配置，或者创建容器时指定的命令）执行的日志。</p>
<p>相当于 VSCode 终端里显示的日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs [容器标识]</span><br></pre></td></tr></table></figure>

<p>常用 options:</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">–since</td>
<td align="center">查询日志最早的时间点，(e.g. 2013-01-02T13:23:37Z) or (e.g. 42m for 42 minutes)</td>
</tr>
<tr>
<td align="center">–until</td>
<td align="center">查询日志最晚的时间点，(e.g. 2013-01-02T13:23:37Z) or (e.g. 42m for 42 minutes)</td>
</tr>
<tr>
<td align="center">-t, –timestamps</td>
<td align="center">显示时间戳</td>
</tr>
<tr>
<td align="center">-n, –tail</td>
<td align="center">显示条数</td>
</tr>
<tr>
<td align="center">-f, –follow</td>
<td align="center">是否动态显示，即时显示日志</td>
</tr>
</tbody></table>
<h3 id="容器和宿主机文件互拷"><a href="#容器和宿主机文件互拷" class="headerlink" title="容器和宿主机文件互拷"></a>容器和宿主机文件互拷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 容器文件到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> [容器标识]:[源文件地址] [目标文件地址]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机文件到容器</span></span><br><span class="line">docker <span class="built_in">cp</span> [源文件地址] [容器标识]:[目标文件地址]</span><br></pre></td></tr></table></figure>

<h3 id="导出容器到-tar"><a href="#导出容器到-tar" class="headerlink" title="导出容器到 tar"></a>导出容器到 tar</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">export</span> -o [tar文件地址在宿主机中] [容器标识]</span><br></pre></td></tr></table></figure>

<h3 id="导入容器-tar-文件成镜像"><a href="#导入容器-tar-文件成镜像" class="headerlink" title="导入容器 tar 文件成镜像"></a>导入容器 tar 文件成镜像</h3><p>不写 repository 和 tag 会生成悬虚镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker import [tar文件地址在宿主机中] [repository:tag]</span><br></pre></td></tr></table></figure>

<h3 id="查看运行的容器占用的资源"><a href="#查看运行的容器占用的资源" class="headerlink" title="查看运行的容器占用的资源"></a>查看运行的容器占用的资源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure>

<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>查询帮助：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h3 id="查看磁盘使用情况"><a href="#查看磁盘使用情况" class="headerlink" title="查看磁盘使用情况"></a>查看磁盘使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system <span class="built_in">df</span> -v</span><br><span class="line"><span class="comment"># -v 表示verbose, 查看详情。</span></span><br></pre></td></tr></table></figure>

<h3 id="获取服务日志"><a href="#获取服务日志" class="headerlink" title="获取服务日志"></a>获取服务日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system</span><br></pre></td></tr></table></figure>

<h3 id="获取实时事件"><a href="#获取实时事件" class="headerlink" title="获取实时事件"></a>获取实时事件</h3><p>该命令类似于查看日志，可添加 –since、–until 可选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system events</span><br></pre></td></tr></table></figure>

<h3 id="移除不使用的数据"><a href="#移除不使用的数据" class="headerlink" title="移除不使用的数据"></a>移除不使用的数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure>

<p>将移除一下类型数据：</p>
<ul>
<li>all stopped containers</li>
<li>all networks not used by at least one container</li>
<li>all dangling images</li>
<li>all dangling build cache</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -d [driver类型] [网络名]</span><br></pre></td></tr></table></figure>

<h3 id="创建容器指定bridge"><a href="#创建容器指定bridge" class="headerlink" title="创建容器指定bridge"></a>创建容器指定bridge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --network [网络标识] [镜像标识]</span><br></pre></td></tr></table></figure>

<h3 id="指定容器和bridge网络链接"><a href="#指定容器和bridge网络链接" class="headerlink" title="指定容器和bridge网络链接"></a>指定容器和bridge网络链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network connect [网络标识] [容器标识]</span><br></pre></td></tr></table></figure>

<h3 id="创建容器指定和别的容器共享网卡"><a href="#创建容器指定和别的容器共享网卡" class="headerlink" title="创建容器指定和别的容器共享网卡"></a>创建容器指定和别的容器共享网卡</h3><p>新创建的容器用inspect查不到网卡。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --network container:[容器标识] [镜像标识]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 3. 编写 Dockerfile</title>
    <url>/2023/03/docker-study-3/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="书写注意点"><a href="#书写注意点" class="headerlink" title="书写注意点"></a>书写注意点</h2><ol>
<li>指定对大小写不敏感，但惯例是全为大写。</li>
<li>指定之后至少携带一个参数。</li>
<li># 开头的行为注释。</li>
<li>一条指定能完成的动作不要分成两条。因为指令越多，分层就越多，效率越低。</li>
<li>如果一条指令较长，可以使用 \ 分割。例如</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LABEL \</span><br><span class="line">    org.label-schema.schema-version=&quot;1.0&quot; \</span><br><span class="line">    org.label-schema.name=&quot;CentOS Base Image&quot; \</span><br><span class="line">    org.label-schema.vendor=&quot;CentOS&quot; \</span><br><span class="line">    org.label-schema.license=&quot;GPLv2&quot;</span><br></pre></td></tr></table></figure>

<h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><h3 id="scratch-镜像"><a href="#scratch-镜像" class="headerlink" title="scratch 镜像"></a>scratch 镜像</h3><p>scratch 镜像是一个空镜像，是所有镜像的 Base Image（相当于面向对象编程中的 Object 类）。scratch 镜像只能在 Dockerfile 中被继承，不能通过 pull 命令拉取，不能 run，也没有 tag。 并且它也不会生成镜像中的文件系统层。在 Docker 中，scratch 是一个保留字，用户不能作为自己的镜像名称使用。</p>
<h2 id="MAINTAINER-维护者"><a href="#MAINTAINER-维护者" class="headerlink" title="MAINTAINER 维护者"></a>MAINTAINER 维护者</h2><p>【语法】 MAINTAINER <name><br>【解析】 MAINTAINER 指令的参数填写的一般是维护者姓名和信箱。不过，该指令官方已**<em>不建议使用</em>**，而是使用 LABEL 指令代替。</p>
<h2 id="LABEL-标签"><a href="#LABEL-标签" class="headerlink" title="LABEL 标签"></a>LABEL 标签</h2><p>【语法】LABEL ＜ key ＞＝＜ value ＞ ＜ key ＞＝＜ value ＞··…·.<br>【解析】LABEL 指令中可以以键值对的方式包含任意镜像的元数据信息，用于替代 MAINTAINER 指令。通过 docker inspect 可查看到 LABEL 与 MAINTAINER 的内容。</p>
<h2 id="ENV-环境变量"><a href="#ENV-环境变量" class="headerlink" title="ENV 环境变量"></a>ENV 环境变量</h2><p>【语法 1】ENV ＜ key ＞ ＜ value ＞．<br>【解析】用于指定环境变量，这些环境变量，后续可以被 RUN 指令使用容器运行起来之 后，也可以在容器中获取这些环境变量。</p>
<p>【语法 2】ENV ＜ key1 ＞＝＜ value1 ＞ ＜ key2 ＞＝＜ value2 ＞．．．．<br>【解析】可以设置多个变量，每个变量为一对＜ key ＞＝＜ value ＞指定。</p>
<h2 id="ARG-变量"><a href="#ARG-变量" class="headerlink" title="ARG 变量"></a>ARG 变量</h2><p>【语法】ARG &lt; varname &gt;[&#x3D;&lt; default value &gt;]<br>【解析】定义一个变量，该变量将会使用于镜像构建运行时。若要定义多个变量，则需要定义多个 ARG 指令。</p>
<h3 id="ENV-和-ARG-区别"><a href="#ENV-和-ARG-区别" class="headerlink" title="ENV 和 ARG 区别"></a>ENV 和 ARG 区别</h3><p>ARG 定义的变量可以在 docker build 的使用用–build-arg 重新指定，ENV 不可以。</p>
<h2 id="WORKDIR-工作目录"><a href="#WORKDIR-工作目录" class="headerlink" title="WORKDIR 工作目录"></a>WORKDIR 工作目录</h2><p>【语法】WORKDIR path.<br>【解析】容器打开后默认进入的目录，一般在后续的 RUN、CMD、ENTRYPOINT、ADD 等指令中会引用该目录。可以设置多个 WORKDIR 指令。后续 WORKDIR 指令若用的是相对路径，则会基于之前 WORKDIR 指令指定的路径。在使用 docker run 运行容器时，可以通过—w 参数覆盖构建时所设置的工作目录。</p>
<h2 id="RUN-运行"><a href="#RUN-运行" class="headerlink" title="RUN 运行"></a>RUN 运行</h2><p>【语法 1】 RUN <command><br>【解析】这里的<command>就是 shell 命令。docker build 执行过程中，会使用 shell 运行指定的 command。</p>
<p>【语法 2】 RUN [“EXECUTABLE”,”PARAM1”,”PARAM2”, …].<br>【解析】在 docker build 执行过程中，会调用第一个参数“EXECUTABLE”指定的应用程序运行，并使用后面第二、三等参数作为应用程序的运行参数。</p>
<h2 id="CMD-执行命令"><a href="#CMD-执行命令" class="headerlink" title="CMD 执行命令"></a>CMD 执行命令</h2><p>【语法 1】 CMD [“EXECUTABLE”,”PARAM1”,”PARAM2”, ..].<br>【解析】在容器启动后，即在执行完 docker run 后会立即调用执行“EXECUTABLE”指定的可执行文件，并使用后面第二、三等参数作为应用程序的运行参数。</p>
<p>【语法 2】 CMD command param1 param2， .<br>【解析】这里的 command 就是 shell 命令。在容器启动后会立即运行指定的 shell 命令。</p>
<p>【语法 3】 CMD [“PARAM1”，“PARAM2”， …].<br>【解析】提供给 ENTERYPOINT 的默认参数。.</p>
<h2 id="ENTRYPOINT-入口"><a href="#ENTRYPOINT-入口" class="headerlink" title="ENTRYPOINT 入口"></a>ENTRYPOINT 入口</h2><p>【语法 1】 ENTRYPOINT [“EXECUTABLE”, “PARAM1”, “PARAM2” …]<br>【解析】在容器启动过程中,即在执行 docker run 时,会调用执行“EXECUTABLE”指定的应用程序，并使用后面第二、三等参数作为应用程序的运行参数。</p>
<p>【语法 2】ENTRYPOINT command param1 param2,…<br>【解析】这里的 command 就是 shell 命令。在容器启动过程中,即在执行 docker run 时，会运行指定的 shell 命令。</p>
<h3 id="CMD-和-ENTRYPOINT-区别"><a href="#CMD-和-ENTRYPOINT-区别" class="headerlink" title="CMD 和 ENTRYPOINT 区别"></a>CMD 和 ENTRYPOINT 区别</h3><table>
<thead>
<tr>
<th align="center">CMD</th>
<th align="center">ENTRYPOINT</th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker run 的 COMMAND 可以替换 CMD 内容。</td>
<td align="center">docker run 的 COMMAND 不可以替换 ENTRYPOINT 的内容。</td>
</tr>
<tr>
<td align="center">docker run 如果没有 COMMAND， 只有 ARG。CMD 会报错，因为 CMD 没有拼接 ARG 的作用。</td>
<td align="center">docker run 如果没有 COMMAND， 只有 ARG， 并且 ENTRYPOINT 用[“EXECUTABLE”, “PARAM1”, “PARAM2” …]的形式使用 ARG 会被拼接。</td>
</tr>
</tbody></table>
<p>结论：无论是 RUN 还是 ENTRYPOINT，使用[“EXECUTABLE”, “PARAM1”, “PARAM2” …]的**<em>通用性</em>**会更强。</p>
<h2 id="EXPOSE-暴露"><a href="#EXPOSE-暴露" class="headerlink" title="EXPOSE 暴露"></a>EXPOSE 暴露</h2><p>【语法】RUN<port>[<port>]<br>【解析】指定容器准备对外暴露的端口号，但该端口号并不会真正的对外暴露。若要真正暴<br>露，则需要在执行 docker run 命令时使用-p(小 p)来指定说要真正暴露出的端口号。<strong>给人看的</strong></p>
<h2 id="ADD-添加"><a href="#ADD-添加" class="headerlink" title="ADD 添加"></a>ADD 添加</h2><p>【语法 1】ADD ＜ src ＞ ＜ dest ＞．<br>【语法 2】ADD［＂＜ src ＞＂，＂＜ dest ＞＂］＃路径中存在空格时使用双引号引起来<br>【解析】该指令将复制当前宿主机中指定文件 src 到容器中的指定目录 dest 中。src 可以是宿主机中的绝对路径，也可以时相对路径。但相对路径是相对于 docker build 命令所指定的路径的。src 指定的文件可以是一个压缩文件，压缩文件复制到容器后会**<em>自动解压</em>**为目录；src 也可以是一个 URL，此时的 ADD 指令相当于 wget 命令；src 最好不要是目录，其会将该目录中所有内容复制到容器的指定目录中。dest 是一个绝对路径，其最后面的路径必须要加上斜杠，否则系统会将最后的目录名称当做是文件名的。</p>
<h2 id="COPY-复制"><a href="#COPY-复制" class="headerlink" title="COPY 复制"></a>COPY 复制</h2><p>功能与 ADD 指令相同，只不过 src 不能是 URL。若 src 为压缩文件，复制到容器后不会自动解压。</p>
<h2 id="ONBUILD-子镜像编译时的操作"><a href="#ONBUILD-子镜像编译时的操作" class="headerlink" title="ONBUILD 子镜像编译时的操作"></a>ONBUILD 子镜像编译时的操作</h2><p>【语法】ONBUILD[INSTRUCTION]<br>【解析】该指令用于指定当前镜像的子镜像进行构建时要执行的指令。</p>
<h2 id="构建新镜像的方法总结"><a href="#构建新镜像的方法总结" class="headerlink" title="构建新镜像的方法总结"></a>构建新镜像的方法总结</h2><ul>
<li>docker build</li>
<li>docker commit</li>
<li>docker import(注意，docker load 并没有构建新镜像，其与原镜像是同一个镜像。)</li>
<li>docker compose</li>
<li>docker hub 中 Automated Builds</li>
</ul>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习 11. 多级构建</title>
    <url>/2023/06/docker-study-11/</url>
    <content><![CDATA[<details class="note info no-icon"><summary><p>目录</p>
</summary>
<ul>
<li><p><a href="/2023/03/docker-study-1/" title="Docker 学习 1. 原理">Docker 学习 1. 原理</a></p>
</li>
<li><p><a href="/2023/03/docker-study-2/" title="Docker 学习 2. 常用命令">Docker 学习 2. 常用命令</a></p>
</li>
<li><p><a href="/2023/03/docker-study-3/" title="Docker 学习 3. 编写 Dockerfile">Docker 学习 3. 编写 Dockerfile</a></p>
</li>
<li><p><a href="/2023/05/docker-study-4/" title="Docker 学习 4. Docker引擎架构">Docker 学习 4. Docker引擎架构</a></p>
</li>
<li><p><a href="/2023/05/docker-study-5/" title="Docker 学习 5. 容器退出命令">Docker 学习 5. 容器退出命令</a></p>
</li>
<li><p><a href="/2023/05/docker-study-6/" title="Docker 学习 6. 镜像导入导出和容器导入导出的区别">Docker 学习 6. 镜像导入导出和容器导入导出的区别</a></p>
</li>
<li><p><a href="/2023/05/docker-study-7/" title="Docker 学习 7. Docker Cache">Docker 学习 7. Docker Cache</a></p>
</li>
<li><p><a href="/2023/05/docker-study-8/" title="Docker 学习 8. 数据卷持久化">Docker 学习 8. 数据卷持久化</a></p>
</li>
<li><p><a href="/2023/05/docker-study-9/" title="Docker 学习 9. Docker 本地网络">Docker 学习 9. Docker 本地网络</a></p>
</li>
</ul>

</details>


<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker Compose 是一个需要在 Docker 主机上进行安装的 Docker 容器编排外部工具。其并不是通过脚本或各种冗长的 Docker 命令来将应用组件组织起来，而是通过一个声明式的配置文件描述整个应用，然后通过一条命令完成应用部署。部署成功后，还可通过一系列简单命令实现对其完整生命周期的管理。</p>
]]></content>
      <categories>
        <category>Docker 学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - ES6-ES13</title>
    <url>/2023/07/interview-fontend-es6/</url>
    <content><![CDATA[<h2 id="ER6-新增方法"><a href="#ER6-新增方法" class="headerlink" title="ER6 新增方法"></a>ER6 新增方法</h2><ol>
<li>let 和 const，解构赋值、模板字符串、箭头函数。</li>
<li>Symbol、Map、Set 三种常用的数据类型。</li>
<li>Proxy 重新定义了数据劫持的能力. （相对于 Object.defineProperty, Proxy 更多功能，例如可以劫持数组）。</li>
<li>Reflect 定义了一套标准化的数据操作的方式。</li>
<li>Promise 确实的解决了异步逻辑嵌套及回调地狱问题。定义了异步逻辑的三种状态 pending、rejected、fullfilled, 搭配 then、catch、all、race 等方法以及 async await 语法糖，大量简化了异步操作。</li>
<li>Generator 函数，可以将异步逻辑划片执行(async&#x2F;await 是它的语法糖)。</li>
<li>新增了 class 类的概念</li>
<li>ES6 Modules<span id="more"></span></li>
</ol>
<h2 id="var-let-const-区别"><a href="#var-let-const-区别" class="headerlink" title="var, let, const 区别"></a>var, let, const 区别</h2><p>ES6 新增了定义变量的关键字 let 和 const， 分别用于定义块级变量和常量。<br>var 有提前声明的特性。而 let， const 不会声明提前， 存在暂时性死区。<br>外部无法使用到内部的 let 和 const 定义的变量， 存在块级作用域限制。<br>const 定义的常量， 无法更改。</p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>按照对象或者数组的结构，把对应的属性值或项提取出来。例如后端返回了一个超大的对象，而前端不需要这个对象里面的所有属性值。这时用解构赋值就使代码非常简洁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; type, payload &#125; = data; <span class="comment">// &#123;type:&quot;&quot;,payload:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="模版字符串什么时候用？"><a href="#模版字符串什么时候用？" class="headerlink" title="模版字符串什么时候用？"></a>模版字符串什么时候用？</h2><p>在动态创建 HTML 页面，一旦涉及到换行，使用模版字符串就比用\n 方便。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><table>
<thead>
<tr>
<th align="center">函数类型</th>
<th align="center">语法格式</th>
<th align="center">new 和原型</th>
<th align="center">arguments <br>super <br>new.target</th>
<th align="center">this 指向</th>
<th align="center">call, apply 和 bind</th>
</tr>
</thead>
<tbody><tr>
<td align="center">普通函数</td>
<td align="center">function() {} <br>函数声明 <br>函数表达式</td>
<td align="center">有</td>
<td align="center">有</td>
<td align="center">函数被调用的时候决定<br>谁调用就指向谁</td>
<td align="center">修改 this 值</td>
</tr>
<tr>
<td align="center">箭头函数</td>
<td align="center">() &#x3D;&gt; {} <br>函数表达式</td>
<td align="center">没有<br>可调用外围</td>
<td align="center">没有 <br>可调用外围</td>
<td align="center">函数被定义的时候决定<br>指向上一层</td>
<td align="center">不可修改 this 值</td>
</tr>
</tbody></table>
<p>new 和原型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Normal</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Normal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;原型name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> normal = <span class="keyword">new</span> <span class="title class_">Normal</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(normal.<span class="property">name</span>); <span class="comment">// 原型name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Func</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> func = <span class="keyword">new</span> <span class="title class_">Func</span>(); <span class="comment">// TypeError: Func is not a constructor</span></span><br></pre></td></tr></table></figure>

<p>arguments：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天吃了&#x27;</span> + <span class="title function_">normal</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) + <span class="string">&#x27;碗饭&#x27;</span>); <span class="comment">// 今天吃了3碗饭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="variable language_">arguments</span>.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用外围</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normal2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">arguments</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arrow2 = <span class="title function_">normal2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天吃了&#x27;</span> + <span class="title function_">arrow2</span>() + <span class="string">&#x27;碗饭&#x27;</span>); <span class="comment">// 今天吃了3碗饭</span></span><br></pre></td></tr></table></figure>

<p>this 指向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> normal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">  <span class="attr">introduce</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.name);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">normal.<span class="title function_">introduce</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrow = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;arrow&#x27;</span>,</span><br><span class="line">  <span class="attr">introduce</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">arrow.<span class="title function_">introduce</span>();</span><br></pre></td></tr></table></figure>

<p>箭头函数是 ES6 推出的，所以在低版本浏览器是有兼容问题的，语法简介明了，逻辑更清晰。</p>
<p>传统的函数</p>
<p>箭头函数没有自己的 this，this 指向外部的 this，并且 this 会在创建的时候就绑定好.</p>
<blockquote>
<p>人话：谁调用箭头函数，箭头函数的 this 就指向谁。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fn1</span>(); <span class="comment">// window</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure>

<h2 id="细说-this-指向"><a href="#细说-this-指向" class="headerlink" title="细说 this 指向"></a>细说 this 指向</h2><h3 id="普通函数的-this-在调用的时候决定"><a href="#普通函数的-this-在调用的时候决定" class="headerlink" title="普通函数的 this 在调用的时候决定"></a>普通函数的 this 在调用的时候决定</h3><blockquote>
<p>人话：该普通函数的调用者，它是谁点出来，该普通函数的 this 就是谁。找不到就是 window 对象；构造函数的 this 就是对象本身。</p>
</blockquote>
<h4 id="独立调用的函数都归属于-window"><a href="#独立调用的函数都归属于-window" class="headerlink" title="独立调用的函数都归属于 window"></a>独立调用的函数都归属于 window</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window。test的调用者就是它本身。找不到它是谁点出来的，那this就指向window。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h4 id="用对象调用"><a href="#用对象调用" class="headerlink" title="用对象调用"></a>用对象调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向obj。this所在匿名函数，该匿名函数的调用者是foo，foo是obj点出来的。所以this指向obj。</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向obj。理由同上</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window。test的调用者就是它本身。找不到它是谁点出来的，那this就指向window。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window。this所在匿名函数，该匿名函数的调用者是bar, 找不到它是谁点出来的，那this就指向window。</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = obj.<span class="property">foo</span>;</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><p>自定义函数作参数，this 指向 window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">bar</span>: bar,</span><br><span class="line">&#125;;</span><br><span class="line">obj2.<span class="title function_">bar</span>(obj1.<span class="property">foo</span>);</span><br></pre></td></tr></table></figure>

<p>setTimeout 的函数参数，this 指向 window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>DOM 元素事件的函数参数，this 指向 DOM 元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向 HTMLButtonElement 元素</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>forEach 里第一个参数是一个函数，第二个参数就是 this 绑定的对象，不写默认绑定 window。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">currentValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(currentValue + <span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//this 指向&#123; name: &#x27;test&#x27; &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span> &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的-this-在定义的时候决定"><a href="#箭头函数的-this-在定义的时候决定" class="headerlink" title="箭头函数的 this 在定义的时候决定"></a>箭头函数的 this 在定义的时候决定</h3><blockquote>
<p>人话：箭头函数在定义的时候，一层一层向上找，找到离自己最近的 this，就指向它。（只要有对象出现，对象里就有 this）</p>
</blockquote>
<h4 id="箭头函数独立调用的函数都归属于-window"><a href="#箭头函数独立调用的函数都归属于-window" class="headerlink" title="箭头函数独立调用的函数都归属于 window"></a>箭头函数独立调用的函数都归属于 window</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window。因为箭头函数定义的时候，向上一层找，上一层就是window对象，所以this指向window.</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h4 id="箭头函数用对象调用"><a href="#箭头函数用对象调用" class="headerlink" title="箭头函数用对象调用"></a>箭头函数用对象调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向window。因为箭头函数定义的时候，向上一层找，上一层就是window对象，所以this指向window.</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向obj。this所在匿名函数，该匿名函数的调用者是foo，foo是obj点出来的。所以this指向obj。</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//this指向obj。因为箭头函数定义的时候，向上一层找，上一层就是obj对象，所以this指向obj.</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<h2 id="用过哪些异步处理方案"><a href="#用过哪些异步处理方案" class="headerlink" title="用过哪些异步处理方案"></a>用过哪些异步处理方案</h2><ol>
<li>回调函数</li>
<li>Promise</li>
<li>generator 生成器 yield</li>
<li>async await</li>
</ol>
<h3 id="Promise-怎么解决回调地狱"><a href="#Promise-怎么解决回调地狱" class="headerlink" title="Promise 怎么解决回调地狱"></a>Promise 怎么解决回调地狱</h3><p>链式回调：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;1.php&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="number">2.</span>php,&#123;res&#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="number">3.</span>php)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async await:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="number">2</span>, &#123; a &#125;);</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="number">3</span>, &#123; b &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Promise-对象有什么好用的方法？"><a href="#Promise-对象有什么好用的方法？" class="headerlink" title="Promise 对象有什么好用的方法？"></a>Promise 对象有什么好用的方法？</h3><ul>
<li>Promise.all()中的 Promise 序列会全部执行通过才认为是成功，否则认为是失败；</li>
<li>Promise.race()中的 Promise 序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的 Promise 是拒绝，则认为失败；</li>
<li>Promise.any()中的 Promise 序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；</li>
</ul>
<h2 id="class-是-构造函数的语法糖"><a href="#class-是-构造函数的语法糖" class="headerlink" title="class 是 构造函数的语法糖"></a>class 是 构造函数的语法糖</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  say = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, location</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">location</span> = location;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ES6-模块化规范是什么？"><a href="#ES6-模块化规范是什么？" class="headerlink" title="ES6 模块化规范是什么？"></a>ES6 模块化规范是什么？</h2><blockquote>
<p>人话：引入一个模块用 import … from 或者 import {某几个方法} from。导出用 export default 或者 export {某几个方法 }。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> aaa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; test &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> test = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="模块化发展历史"><a href="#模块化发展历史" class="headerlink" title="模块化发展历史"></a>模块化发展历史</h3><ol>
<li>AMD 规范：前端 异步加载 - 提前下载， 提前加载 require.js</li>
<li>CMD 规范：异步加载 - 提前下载 ， 按需加载 – 玉伯 -sea.js</li>
<li>CommonJs 规范：同步加载，用在 NodeJS 环境</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="built_in">exports</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>ES6 模块化规范</li>
</ol>
<p>CommonJs 不可以按需饮用，ES6 模块化可以。</p>
<h2 id="异步遍历器生成函数-大厂面试"><a href="#异步遍历器生成函数-大厂面试" class="headerlink" title="异步遍历器生成函数(大厂面试)"></a>异步遍历器生成函数(大厂面试)</h2><blockquote>
<p>Generator 函数返回一个同步遍历器，异步 Generator 函数的作用，是返回一个异步遍历器对象。在语法上，异步 Generator 函数就是 async 函数与 Generator 函数的结合。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(t);</span><br><span class="line">    &#125;, t);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">1000</span>); <span class="comment">//任务1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">2000</span>); <span class="comment">//任务2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">3000</span>); <span class="comment">//任务3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一下 for await ...of</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> val <span class="keyword">of</span> <span class="title function_">fn</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - CSS</title>
    <url>/2023/06/interview-fontend-css/</url>
    <content><![CDATA[<h2 id="display-none-与-visibility-hidden-的区别"><a href="#display-none-与-visibility-hidden-的区别" class="headerlink" title="display: none; 与 visibility: hidden; 的区别 ?"></a>display: none; 与 visibility: hidden; 的区别 ?</h2><ul>
<li>联系：它们都能让元素不可见</li>
<li>区别：<ul>
<li><code>display:none</code>;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden</code>;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li>
<li>修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="如何避免外边折叠-collapsing-margins-？"><a href="#如何避免外边折叠-collapsing-margins-？" class="headerlink" title="如何避免外边折叠(collapsing margins) ？"></a>如何避免外边折叠(collapsing margins) ？</h2><p><img src="/2023/06/interview-fontend-css/%E5%A4%96%E8%BE%B9%E6%8A%98%E5%8F%A0.drawio.png" alt="外边折叠"></p>
<p>毗邻的两个或多个 <code>margin</code> 会合并成一个<code>margin</code>，叫做外边距折叠。规则如下：</p>
<ul>
<li>两个或多个毗邻的普通流中的块元素垂直方向上的<code>margin</code>会折叠</li>
<li>浮动元素或<code>display: inline-block</code>元素或绝对定位元素的<code>margin</code>不会和垂直方向上的其他元素的 margin 折叠</li>
<li>创建了块级格式化上下文（BFC）的元素，不会和它的子元素发生 margin 折叠</li>
</ul>
<h2 id="z-index-是什么？在-position-的值什么时候可以触发"><a href="#z-index-是什么？在-position-的值什么时候可以触发" class="headerlink" title="z-index 是什么？在 position 的值什么时候可以触发?"></a>z-index 是什么？在 position 的值什么时候可以触发?</h2><p>z-index 属性设置元素的堆叠顺序。拥有更⾼堆叠顺序的元素总是会处于堆叠顺序较低的元素的前⾯，当 脱离⽂档流内容较多，并且相互重叠的时候，就有可能发⽣本想完全显示的内容被其他内容遮挡的结 果，这时我们就需要⼈为指定哪个层在上⾯，哪个在下⾯，z-index 属性就是⼲这个⽤的。</p>
<p>注意：Z-index 仅能在定位元素上奏效.</p>
<p>在 position 的值是 relative、absolute、fixed、sticky 时候可以触发。</p>
<h2 id="简述-box-sizing-的有效值以及所对应的盒模型规则"><a href="#简述-box-sizing-的有效值以及所对应的盒模型规则" class="headerlink" title="简述 box-sizing 的有效值以及所对应的盒模型规则"></a>简述 box-sizing 的有效值以及所对应的盒模型规则</h2><p>box-sizing 属性允许您以特定的⽅式定义匹配某个区域的特定元素。</p>
<p>语法：box-sizing: content-box|border-box|inherit;</p>
<p>1）box-sizing:content-box；这是由 CSS2.1 规定的宽度⾼度⾏为。宽度和⾼度分别应⽤到元素的内容框。 在宽度和⾼度之外绘制元素的内边距和边框。是默认值。如果你设置⼀个元素的宽为 100px，那么这个元 素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中</p>
<p>2）box-sizing:border-box；为元素指定的任何内边距和边框都将在已设定的宽度和⾼度内进⾏绘制。告诉 浏览器去理解你设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将⼀个元素的 width 设 为 100px,那么这 100px 会包含其它的 border 和 padding，内容区的实际宽度会是 width 减去 border + padding 的计算值。⼤多数情况下这使得我们更容易的去设定⼀个元素的宽⾼</p>
<p>3）box-sizing:inherit;；规定应从⽗元素继承 box-sizing 属性的值</p>
<blockquote>
<p>人话：box-sizing:content-box 的元素 width 和 height 不包含 padding 和 border；box-sizing:border-box 的元素包含。</p>
</blockquote>
<h2 id="移动端适配怎么做？"><a href="#移动端适配怎么做？" class="headerlink" title="移动端适配怎么做？"></a>移动端适配怎么做？</h2><p>1） meta viewport（视⼝）</p>
<p>移动端初始视⼝的⼤⼩为什么默认是 980px？</p>
<p>因为世界上绝⼤多数 PC ⽹⻚的版⼼宽度为 980px ，如果⽹⻚没有专⻔做移动端适配，此时⽤⼿机访问⽹ ⻚旁边刚好没有留⽩，不过⻚⾯缩放后⽂字会变得⾮常⼩。</p>
<p>为了解决⻚⾯缩放的体验问题，在⽹⻚代码的头部，加⼊⼀⾏ viewport 元标签。</p>
<p>这⾥的 device-width 告诉浏览器，将视⼝的宽度设置为设备宽度（这个宽度是⼈为预设的，不设的话就是 980px）。 属性含义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">initial-scale：第⼀次进⼊⻚⾯的初始⽐例</span><br><span class="line">minimum-scale：允许缩⼩最⼩⽐例</span><br><span class="line">maximum-scale：允许放⼤最⼤⽐例</span><br><span class="line">user-scalable：允许使⽤者缩放，<span class="number">1</span> or <span class="number">0</span> (yes or no)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>人话：用 viewport 告诉浏览器“页面的宽度和设备的宽度一致“。</p>
</blockquote>
<p>2） 图⽚适配</p>
<p>img { max-width: 100%; } 此时图⽚会⾃动缩放，同时图⽚最⼤显示为其⾃身的 100%（即最⼤只 可以显示为⾃身那么⼤） 为什么不⽤ img { width: 100%; } ？ 当容器⼤于图⽚宽度时，图⽚会⽆ 情的拉伸变形</p>
<blockquote>
<p>人话：图片设置最大宽度。</p>
</blockquote>
<p>3） 媒体查询</p>
<p>为什么要媒体查询？</p>
<p>针对不⽤的设备提前为⽹⻚设定各种 CSS 样式 CSS3 中的 Media Query 模块，⾃动检测屏幕宽度，然后加载 相应的 CSS ⽂件</p>
<p>语法举例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当屏幕宽度⼤于 1200px 时，背景⾊变为红⾊</p>
<p>4） 动态 rem ⽅案</p>
<p>为什么要⽤ rem？</p>
<p>和媒体查询配合，实现响应式布局</p>
<p>px、em、rem 有什么不同？</p>
<p>px 是 pixel（像素），是屏幕上显示数据的最基本的点，在 HTML 中，默认的单位就是 px；em 是⼀个相对 ⼤⼩，相对于⽗元素 font-size 的百分⽐⼤⼩ rem 是相对于根元素的 font-size</p>
<p>⽤法示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        这里根据设计稿来。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        比如设计稿基于的页面宽度是375px，用vm表示整个宽度为100vw，1vw = 3.75px。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        为了方面和设计稿对应，即设例如计稿上显示字体大小16px，样式代码就写16rem。而设计稿的 1px = 0.2666667vw。(100 / 375)</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        所以根元素的font-size就设置为.2666667vw</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: .<span class="number">2666667vw</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16rem</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>赵钱孙李<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>人话：px 是绝对大小。rem, em是相对大小。em是相对父元素的大小，rem是相对根元素(HTML)的font-size大小。一般前端拿到页面设计稿，设计稿上有页面宽度大小，用百分比可计算出设计稿上的一个像素多少宽度百分比vw。即可定义根元素的font-size的大小是多少vw.</p>
</blockquote>
<h2 id="什么是CSS3-transform-transition-animation-区别是什么？"><a href="#什么是CSS3-transform-transition-animation-区别是什么？" class="headerlink" title="什么是CSS3 transform? transition? animation? 区别是什么？"></a>什么是CSS3 transform? transition? animation? 区别是什么？</h2><p>CSS3属性中关于制作动画的三个属性：Transform,Transition,Animation。<br>1、transform：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进⾏ 旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">　　<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transition和animation两者都能实现动画效果<br>transform常常配合transition和animation使⽤</p>
<p>2、transition样式过渡，从⼀种效果逐渐改变为另⼀种效果<br>transition是⼀个合写属性<br>transition:transition-property transition-duration transition-timing-function transition-delay<br>从左到右分别是：css属性、过渡效果花费时间、速度曲线、过渡开始的延迟时间</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>：<span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">transition</span>:transform <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>：hover&#123;</span><br><span class="line"> <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transition通常和hover等事件配合使⽤，需要由事件来触发过渡<br>我们知道 transition 虽然简单好⽤，但是我们会发现它受到各种限制。<br>(1)transition需要⼀个事件来触发，⽐如hover，所以没法在⽹⻚加载时⾃动发⽣<br>(2) transition是⼀次性的，不能重复发⽣，除⾮⼀再触发。<br>(3) transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。<br>(4)⼀条transition规则，只能定义⼀个属性的变化，不能涉及多个属性。</p>
<p>3、animation动画 由@keyframes来描述每⼀帧的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">　　<span class="attribute">animation</span>:myAnimation <span class="number">5s</span> infinite</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> myAnimation &#123;</span><br><span class="line">　　<span class="number">0%</span>&#123;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>);&#125;</span><br><span class="line">　　<span class="number">100%</span>&#123;<span class="attribute">left</span>:<span class="number">200px</span>;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>区别：<br>（1）transform仅描述元素的静态样式，常常配合transition和animation使⽤<br>（2）transition通常和hover等事件配合使⽤，animation是⾃发的，⽴即播放<br>（3）animation可设置循环次数<br>（4）animation可设置每⼀帧的样式和时间，transition只能设置头尾<br>（5）transition可与js配合使⽤，js设定要变化的样式，transition负责动画效果，如：</p>
<p>animation属性类似于transition，他们都是随着时间改变元素的属性值，<br>其主要区别在于：transition需要触发⼀个事件才会随着时间改变其CSS属性；<br>animation在不需要触发任何事件的情况下，也可以显式的随时间变化来改变元素CSS属性，达到⼀种动画的效果<br>1）动画不需要事件触发，过渡需要。<br>2）过渡只有⼀组（两个：开始-结束） 关键帧，动画可以设置多个。</p>
<blockquote>
<p>人话：</p>
<ul>
<li>transform和动画无关，它设置元素的旋转、缩放，位移等样式；</li>
<li>transition可以设置起点样式、终点样式、过渡时间、速度曲线和延迟时间。一条transition只可以设置一个样式属性。触发是通过元素的伪类（例如hover）或者JS（element.classList.add）。</li>
<li>animation可以设置起点样式、关键帧样式、过渡时间、速度曲线、延迟时间、播放次数等。一条animation可以设置多个样式属性。不需要事件触发。和transition最大的区别是animation可以设置多个关键帧的样式，而transition只能设置起点和终点的样式。</li>
</ul>
</blockquote>
<h2 id="⽗元素和⼦元素宽⾼不固定，如何实现⽔平垂直居中"><a href="#⽗元素和⼦元素宽⾼不固定，如何实现⽔平垂直居中" class="headerlink" title="⽗元素和⼦元素宽⾼不固定，如何实现⽔平垂直居中"></a>⽗元素和⼦元素宽⾼不固定，如何实现⽔平垂直居中</h2><p>方法一：父元素用相对定位，子元素用绝对定位。子元素定位left:50%,top:50%，最后用transform做位移translate(-50%, -50%)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: azure;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 使⽤css3的transform来实现 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.child</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法二：父元素使用flex布局，横轴居中（justify-content: center），纵轴居中（align-items: center）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="假设高度默认100px-，请写出三栏布局，其中左栏、右栏各为300px，中间自适应"><a href="#假设高度默认100px-，请写出三栏布局，其中左栏、右栏各为300px，中间自适应" class="headerlink" title="假设高度默认100px ，请写出三栏布局，其中左栏、右栏各为300px，中间自适应"></a>假设高度默认<code>100px</code> ，请写出三栏布局，其中左栏、右栏各为<code>300px</code>，中间自适应</h2><p><img src="/2023/06/interview-fontend-css/%E5%81%87%E8%AE%BE%E9%AB%98%E5%BA%A6%E9%BB%98%E8%AE%A4.png" alt="假设高度默认"></p>
<p>方法一：父元素用flex布局，中间子元素设置<code>flex:1</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法二：子元素用绝对定位，左侧元素<code>left：0px</code>，右侧元素<code>right：0px</code>，中间元素<code>left</code>和<code>right</code> 都为<code>300px</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法三：左侧子元素设置左浮动，右侧子元素设置右浮动。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Macos 查看硬盘已读写情况</title>
    <url>/2023/03/macos-sdd-health/</url>
    <content><![CDATA[<ol>
<li>下载 <a href="https://www.smartmontools.org/">smartmontools</a> (官网有下载链接)。</li>
<li>安装。</li>
<li>命令行输入:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/sbin/smartctl -a /dev/disk0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Macos</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - JS</title>
    <url>/2023/06/interview-fontend-js/</url>
    <content><![CDATA[<h2 id="介绍-JS-有哪些内置对象？"><a href="#介绍-JS-有哪些内置对象？" class="headerlink" title="介绍 JS 有哪些内置对象？"></a>介绍 JS 有哪些内置对象？</h2><ul>
<li>数据封装类对象(可以 new 的)：Object、Array、Boolean、Number、String</li>
<li>其他对象：Function、Arguments、Math、Date、RegExp、Error</li>
<li>ES6 新增对象：Symbol（标识唯一性的 ID）、Map、Set、Promises、Proxy、Reflect<span id="more"></span></li>
</ul>
<h2 id="如何最小化重绘-repaint-和回流-reflow-？"><a href="#如何最小化重绘-repaint-和回流-reflow-？" class="headerlink" title="如何最小化重绘(repaint)和回流(reflow)？"></a>如何最小化重绘(repaint)和回流(reflow)？</h2><ul>
<li>需要要对元素进行复杂的操作时，可以先隐藏(display:”none”)，操作完成后再显示</li>
<li>需要创建多个 DOM 节点时，使用 document.createDocumentFragment 创建完后一次性的加入 document</li>
<li>缓存 Layout 属性值，如：var left &#x3D; elem.offsetLeft; 这样，多次使用 left 只产生一次回流</li>
<li>尽量避免用 table 布局（table 元素一旦触发回流就会导致 table 里所有的其它元素回流）</li>
</ul>
<h2 id="Javascript-作用域链"><a href="#Javascript-作用域链" class="headerlink" title="Javascript 作用域链?"></a>Javascript 作用域链?</h2><ul>
<li>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节</li>
<li>如果当前作用域没有找到属性或方法，会向上层作用域[[Scoped]]查找，直至全局函数，这种形式就是作用域链</li>
</ul>
<blockquote>
<p>例如一个函数需要使用一个属性，如果在当前函数作用域找不到这个属性，则会到更上一级的函数作用域去找，直至全局函数。这种形式就是作用域链。</p>
</blockquote>
<h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><p>方法一：fetch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">credencial</span>: <span class="string">&#x27;include&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 兼容性问题，如果要兼容老浏览器，则需要用polyfill</span></span><br><span class="line"><span class="comment">// 发出的请求，默认是不带cookie.  credencial:&#x27;include&#x27;</span></span><br></pre></td></tr></table></figure>

<p>方法二：XHR</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&quot;www.aaaa.com&quot;</span>,<span class="literal">true</span>);<span class="comment">//异步</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// readstate  4</span></span><br><span class="line">    <span class="comment">// status  200-300</span></span><br><span class="line">    <span class="comment">// 200 成功 （有可能强缓存策略，cache-control,expired）</span></span><br><span class="line">    <span class="comment">// 301 302 redirect</span></span><br><span class="line">    <span class="comment">// 304 从缓存读取数据。(协商缓存策略,etag)</span></span><br><span class="line">    <span class="comment">// 404 not found</span></span><br><span class="line">    <span class="comment">// 500 服务器错误。</span></span><br><span class="line">&#125;</span><br><span class="line">  xhr 可以取消？</span><br><span class="line">  xhr.<span class="title function_">abort</span>();<span class="comment">//终止请求。</span></span><br></pre></td></tr></table></figure>

<p>方法三：jsonp<br><span id="jsonp"></span></p>
<blockquote>
<p>jsonp 的原理是 用 script 标签应用 JS 文件不受跨域限制。<br>所以前端动态创建 script 标签指向服务端接口。<br>服务端返回的数据格式是<code>test(&#39;[&quot;111&quot;,&quot;222&quot;,&quot;3333&quot;]&#39;);</code>。<br>前端定义好<code>test</code>这个方法接收数据。<br>jsonp 只能做 get 请求，不可以中断。</p>
</blockquote>
<h2 id="跨域和同源策略"><a href="#跨域和同源策略" class="headerlink" title="跨域和同源策略"></a>跨域和同源策略</h2><p>所谓的同源策略其实是浏览器的一种机制，只允许在同源，也就是同协议、同域名、同端口的的情况下才能进行数据交互。 但是我们在开发项目的过程中， 往往一个项目的接口不止一个域，所以往往就需要做跨域的处理，通常的跨域方式有这么几种：</p>
<p>方法一：jsonp</p>
<p><a href="#jsonp">详细说明</a></p>
<p>方法二：CORS，依赖服务端对前端的请求头信息进行放行，不做限制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>配置成*</span><br></pre></td></tr></table></figure>

<p>方法三：前端在开发阶段，可以使用代理服务器去访问目标服务器。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>(1)构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test();</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;kerwin&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>人话：在一个函数内部，写好了 this 挂上属性。外面再 new 这个函数，就可以创建出实例对象出来。</p>
</blockquote>
<p>(2)原型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//内存只有一份</span></span><br><span class="line"><span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缺点是？</span></span><br><span class="line"></span><br><span class="line">原型容易被覆盖</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span> = ....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>人话：原型的目的是共享内存。<br>每个对象的属性和方法在内存中都是独立的。如果某些属性或方法<strong>不需要</strong>各个对象内存独立，则可以使用原型。使用原型就可以使同一个构造函数创建出来的所有对象有共同的属性或方法。例如所有的数组都有 concat 方法。<br>原型容易被覆盖，例如 vue 中覆盖了数组原型中的操作方法（例如 push，pop，splice），使得数组调用这些方法后，有响应式效果。</p>
</blockquote>
<p>(3)继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test2</span>(<span class="params">name, age, location</span>) &#123;</span><br><span class="line">  <span class="comment">// this.name =name;</span></span><br><span class="line">  <span class="comment">// this.age =age;</span></span><br><span class="line">  <span class="comment">// Test.call(this,name,age);</span></span><br><span class="line">  <span class="title class_">Test</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [name, age]);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">location</span> = location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型继承</span></span><br><span class="line"><span class="title class_">Test2</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">//Test2.prototype =new Test()</span></span><br><span class="line"><span class="title class_">Test2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Test2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//混合继承</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>人话：有两种继承方式：<br>方法一：构造函数继承。在子构造函数中使用 call 或者 apply，把父构造函数的属性都继承过来。这个方法的缺点是无法继承父构造函数的原型。<br>方法二：原型继承。子构造函数的原型覆盖为父构造函数的原型。</p>
</blockquote>
<p>(4)原型链</p>
<p>原型链的基本原理：任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。</p>
<blockquote>
<p>人话：如果一个对象<code>obj</code>访问一个属性<code>a</code>，会先找对象本身有没有属性<code>a</code>。如果没有，就会通过<code>obj.__proto__</code>找到创建<code>obj</code>的构造函数的<code>prototype</code>，在这上面找属性<code>a</code>。如果还没有找到，就继续沿着上一级继续找，直到找到原型的顶点<code>Object</code>。如果在没有找到就报错了。</p>
</blockquote>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>函数内部返回另一个函数。另一个函数被外界引用。垃圾回收机制无法回收。这就是 js 的一个特性：闭包。</p>
<p>目的：实现数据持久化，并私有，但会有内存泄露风险。例如做一个计数函数，调用一次，计数器++。</p>
<p>计数器实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn1 = <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>实际应用：模块化，防抖，截流。</p>
<p>模块化实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyModule</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increment,</span><br><span class="line">    reset,</span><br><span class="line">    getCount,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="title class_">MyModule</span>();</span><br><span class="line">myModule.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="title function_">getCount</span>()); <span class="comment">// 输出1</span></span><br><span class="line">myModule.<span class="title function_">reset</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="title function_">getCount</span>()); <span class="comment">// 输出0</span></span><br></pre></td></tr></table></figure>

<p>防抖实例：(先延迟，后执行，例如文本框输入，自动搜索)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="comment">// 定时器，每次执行防抖函数都会清除旧的定时器，设置新的定时器。</span></span><br><span class="line">  <span class="comment">// 这样在wait时间内，所有目标函数只有最后一次被执行。</span></span><br><span class="line">  <span class="keyword">let</span> timeoutId;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>截流实例：（先执行，后延迟，例如点击按钮）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="comment">// 标记是否为截流状态。如果不是截流状态，则立即执行目标函数，并设置截流状态。</span></span><br><span class="line">  <span class="comment">// 这样在wait时间内，所有目标函数只有第一次被执行。</span></span><br><span class="line">  <span class="keyword">let</span> isThrottled = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isThrottled) &#123;</span><br><span class="line">      isThrottled = <span class="literal">true</span>;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        isThrottled = <span class="literal">false</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>方法一：利用 Set 去重</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myset = <span class="keyword">new</span> <span class="title class_">Set</span>(arr); <span class="comment">// set会把重复的元素提掉</span></span><br><span class="line"><span class="keyword">var</span> mya = <span class="title class_">Array</span>.<span class="title function_">from</span>(myset);</span><br></pre></td></tr></table></figure>

<p>方法二：利用 for 嵌套 for，然后 splice 去重</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">        <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">NaN</span>,</span><br><span class="line">  <span class="title class_">NaN</span>,</span><br><span class="line">  <span class="string">&#x27;NaN&#x27;</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">//[1,&quot;true&quot;,true,15,false,undefined,null,NaN,NaN,&quot;NaN&quot;,0,&quot;a&quot;,&#123;&#125;,&#123;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h2><ul>
<li>concat</li>
<li>[…a, …b]展开运算符</li>
<li>[a, b].flat()</li>
</ul>
<h2 id="cookie-和-session-（登录鉴权是怎么做的）"><a href="#cookie-和-session-（登录鉴权是怎么做的）" class="headerlink" title="cookie 和 session （登录鉴权是怎么做的）"></a>cookie 和 session （登录鉴权是怎么做的）</h2><p>传统的 cookie 验证(有 Cookie 被盗用风险)：</p>
<p><img src="/2023/06/interview-fontend-js/cookie%E5%92%8Csession%E9%89%B4%E6%9D%83-%E4%BC%A0%E7%BB%9Fcookie%E9%AA%8C%E8%AF%81.drawio.png" alt="传统的cookie验证"></p>
<p>session 验证：</p>
<p><img src="/2023/06/interview-fontend-js/cookie%E5%92%8Csession%E9%89%B4%E6%9D%83-session%E9%AA%8C%E8%AF%81.drawio.png" alt="session验证"></p>
<h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><p>进程是资源分配的最小单元，线程是代码执行的最小单元。</p>
<p>一个应用程序可能会开启多个进程，进程之间数据不共享，一个进程内部可以开启多个线程，线程之间的数据可以共享的，所以多线程的情况下，往往要考虑的是线程间的执行顺序问题。</p>
<p>浏览器其实也可以通过 webWorkers 开启多线程。</p>
<h2 id="协商缓存和强缓存区别"><a href="#协商缓存和强缓存区别" class="headerlink" title="协商缓存和强缓存区别"></a>协商缓存和强缓存区别</h2><p>强缓存不走服务器，协商缓存服务器返回 304 状态码。</p>
<p><img src="/2023/06/interview-fontend-js/cookie%E5%92%8Csession%E9%89%B4%E6%9D%83-%E7%BC%93%E5%AD%98.drawio.png" alt="协商缓存和强缓存区别"></p>
<h2 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h2><p>HTTP 是明文传输，数据容易被网络中间节点偷窥或篡改。例如有些网络提供商会在用户浏览的网页中输入广告，就是篡改了网页文件。<br>HTTP 使用 80 端口。</p>
<p>HTTPS 是加密传输。流程如下：</p>
<ol>
<li>客户端向服务端发送握手信息；</li>
<li>服务端会将 SSL 证书（包含加密公钥，签发的 CA 机构）发送给客户端；</li>
<li>客户端检查签发的 CA 机构是否值得信任。如果检查通过就用证书中的加密公钥加密要传输的数据（该数据无法用公钥解密，应为非对称加密）给服务端。</li>
<li>服务端拿到客户端的加密数据后，用与公钥配对的私钥解密。<br>HTTPS 使用 443 端口。</li>
</ol>
<p>HTTPS 也不一定安全。SSL 证书是由 CA 机构审核签发的，如果 CA 机构没有做好审核，就把 SSL 证书签发给了坏家伙，那 HTTPS 也不安全了。</p>
<h2 id="对于工作中的跨域问题你是怎么解决的"><a href="#对于工作中的跨域问题你是怎么解决的" class="headerlink" title="对于工作中的跨域问题你是怎么解决的"></a>对于工作中的跨域问题你是怎么解决的</h2><p>在本地开发的过程中，本地服务器访问测试服务器接口的，也基本都是后端去处理 CORS 跨域，但是有些时候也可能需要前端在脚手架对应的 devServer 中配置 Proxy 来进行开发时候的跨域处理。</p>
<p>在线上的各种环境中（开发、测试、生产）环境一般是不会有跨域问题的，因为服务器和前端资源一般是会部署在同一个域的服务器下的，但是也有端口或者不同域的情况，这些时候往往都是后端去利用 CORS 来处理的跨域问题。</p>
<p>在一些极少的情况下加，项目中可能会访问一些第三方的 Api，比如定位、天气等等接口的时候，可能会根据接口需求进行 jsonp 的跨域处理。</p>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>同步代码（同步任务）：<strong>立即</strong>放到<strong>JS 引擎</strong>（JS 主线程）执行，并<strong>原地等待</strong>结果。</p>
<p>异步代码（异步任务）：先放入<strong>宿主环境</strong>（浏览器&#x2F;Node），不必原地等待结果，并<strong>不阻塞</strong>主线程继续往下执行，异步结果在<strong>将来执行</strong>。</p>
<p>异步代码有：</p>
<ul>
<li>定时器</li>
<li>Ajax 请求</li>
<li>UI 事件</li>
<li>Promise 的 then（Promise 本身是同步的）</li>
</ul>
<iframe src="//player.bilibili.com/player.html?aid=360659668&bvid=BV1QX4y1H7uB&cid=1187954658&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>总结：</p>
<ol>
<li>JS 是单线程，为防止代码阻塞，把代码（任务）分成：同步和异步。</li>
<li>同步代码给 JS 引擎执行，异步代码交给宿主环境。</li>
<li>同步代码放入执行栈中，异步代码等待时机成熟送入任务队列排队。</li>
<li>执行栈执行完毕，会去任务队列看是否有异步任务，有就送到执行栈执行。反复循环查看执行，这个过程就是事件循环。</li>
</ol>
<h2 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h2><p>JS 把<strong>异步任务</strong>分为宏任务和微任务。</p>
<p>宏任务是由宿主（浏览器、Node）发起：script 全部代码、setTimeout、setInterval、网络请求（Ajax&#x2F;Fetch）、事件。</p>
<p>微任务是由 JS 引擎发起：Promise、Process.nextTick（Node 独有）。</p>
<blockquote>
<p>Promise 本身同步，then&#x2F;catch 的回调函数时异步的。</p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=360687675&bvid=BV1FX4y1p7v1&cid=1189497305&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>总结：</p>
<ol>
<li>同步代码放到执行栈中；微任务的回调函数在时机成熟时，放到微任务队列中；宏任务的回调函数在时机成熟时，放到宏任务队列中。</li>
<li>执行在执行栈中的同步代码。</li>
<li>到微任务队列中找微任务，放到执行栈中执行。直至微任务队列中没有微任务。</li>
<li>到宏任务队列中找宏任务，放到执行栈中执行。直至宏任务队列中没有宏任务。</li>
</ol>
<p><a href="https://www.jsv9000.app/">事件循环-微任务宏任务-练习网站</a></p>
<h2 id="http-状态码有那些？分别代表是什么意思？"><a href="#http-状态码有那些？分别代表是什么意思？" class="headerlink" title="http 状态码有那些？分别代表是什么意思？"></a>http 状态码有那些？分别代表是什么意思？</h2><p>100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200 OK 正常返回信息<br>201 Created 请求成功并且服务器创建了新的资源<br>202 Accepted 服务器已接受请求，但尚未处理</p>
<p>301 Moved Permanently 请求的网页已永久移动到新位置。<br>302 Found 临时性重定向。<br>307 Internal Redirect 内部重定向</p>
<p>304 Not Modified 自从上次请求后，请求的网页未修改过。 协商缓存<br>200 memory cache 强缓存</p>
<p>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br>401 Unauthorized 请求未授权。<br>403 Forbidden 禁止访问。<br>404 Not Found 找不到如何与 URI 相匹配的资源。</p>
<p>500 Internal Server Error 最常见的服务器端错误。<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>
<h2 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><ol>
<li>浏览器查找域名对应的 IP 地址(DNS 查询：浏览器缓存-&gt;系统缓存-&gt;路由器缓存-&gt;ISP DNS 缓存-&gt;根域名服务器)</li>
<li>浏览器向 Web 服务器发送一个 HTTP 请求（TCP 三次握手），如果是 HTTPS，多 9 次握手。</li>
<li>服务器 301 重定向（从 <a href="http://example.com/">http://example.com</a> 重定向到 <a href="http://www.example.com)/">http://www.example.com）</a></li>
<li>浏览器跟踪重定向地址，请求另一个带 www 的网址</li>
<li>服务器处理请求（通过路由读取资源）</li>
<li>服务器返回一个 HTTP 响应（报头中把 Content-type 设置为 ‘text&#x2F;html’）</li>
<li>浏览器进 DOM 树构建</li>
<li>浏览器发送请求获取嵌在 HTML 中的资源（如图片、音频、视频、CSS、JS 等）</li>
<li>浏览器显示完成页面</li>
<li>浏览器发送异步请求</li>
</ol>
<h2 id="前端攻击"><a href="#前端攻击" class="headerlink" title="前端攻击"></a>前端攻击</h2><p>一、CSRF（Cross-site request forgery）：跨站请求伪造。</p>
<p>攻击者盗用普通用户的身份，以该用户的名义，向服务端发送恶意的请求。（例如以该用户的身份发帖，点赞，甚至银行交易）</p>
<p><img src="/2023/06/interview-fontend-js/CSRF%E6%94%BB%E5%87%BB.drawio.png" alt="CSRF攻击原理"></p>
<p>防御方法：</p>
<ol>
<li>尽量使用 POST 请求。</li>
<li>加入验证码。</li>
<li>验证 Referer。（Referer 是请求方域名）</li>
<li>推荐：验证 token。客户端先问服务端要一个 token（服务端也会缓存这个 token），提交请求的时候连这个 token 一起给服务端。服务端接收到请求，验证 token 是否是自己生成的。如果是，则执行请求，并销毁当前 token，并给客户端一个新的 token.</li>
</ol>
<p>二、XSS（Cross-site scripting）跨站脚本攻击</p>
<p>攻击者通过各种办法，在网站的页面上插入自己的脚本。普通用户访问该网站页面的时候，执行攻击者的脚本。（攻击者的脚本可以是把普通用户的 Cookie 发送到攻击者的网站）</p>
<p>防御方法：</p>
<ol>
<li>服务端对接口请求参数做过滤。</li>
<li>客户端对接口响应结果做 HTML 转义。</li>
</ol>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 功能推荐 - 对多目录搜索包含和排除目录</title>
    <url>/2023/06/vscode-feature-sticky-scroll/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当在Search视图的结果树视图中右键单击文件夹时，上下文菜单中现在有两个新选项。<a href="https://code.visualstudio.com/updates/v1_73#_include-and-exclude-folders-from-search">官网介绍</a></p>
<span id="more"></span>

<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p><img src="https://code.visualstudio.com/assets/updates/1_73/restrict-search-to-folder.gif" alt="限制搜索文件夹"></p>
<p><img src="https://code.visualstudio.com/assets/updates/1_73/exclude-folder-from-search.gif" alt="从搜索中排除文件夹"></p>
]]></content>
      <categories>
        <category>VSCode 功能推荐</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - HTML5</title>
    <url>/2023/06/interview-fontend-html5/</url>
    <content><![CDATA[<h2 id="HTML5-有哪些新特性？"><a href="#HTML5-有哪些新特性？" class="headerlink" title="HTML5 有哪些新特性？"></a>HTML5 有哪些新特性？</h2><ul>
<li>增强多媒体功能：video,audio 元素。</li>
<li>新增本地存储：localStorage, SessionStorage。</li>
<li>语义化标签：header,article,footer 等。**<em>伴随提问：</em>**<a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTML5%E7%BB%93%E6%9E%84%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F">如何理解 HTML5 结构语义化？</a></li>
<li>新增表单控件：date, time, email 等。写法是 <code>&lt;input type=&quot;date&quot; /&gt;</code></li>
<li>新增位置，多任务等功能：GeoLocation，webWorker。</li>
</ul>
<h2 id="如何理解-HTML5-结构语义化？"><a href="#如何理解-HTML5-结构语义化？" class="headerlink" title="如何理解 HTML5 结构语义化？"></a>如何理解 HTML5 结构语义化？</h2><span id="more"></span>

<p>HTML5 语义元素有 header,article,footer 等。</p>
<p>对于开发者：</p>
<ul>
<li>易于阅读。</li>
<li>便于团队开发和维护。</li>
</ul>
<p>对于浏览器：</p>
<ul>
<li>有利于 SEO 优化，方便搜索引擎的爬虫确定上下文和关键字的权重。</li>
<li>方便其他特殊设备解析，例如盲人阅读器。</li>
</ul>
<h2 id="老浏览器如何支持新的-HTML5-标签？"><a href="#老浏览器如何支持新的-HTML5-标签？" class="headerlink" title="老浏览器如何支持新的 HTML5 标签？"></a>老浏览器如何支持新的 HTML5 标签？</h2><p>又一个 JS 库：HTML5 Shiv 。 它的原理是使用 document.createElement。</p>
<h2 id="如何区分-HTML5-文档和非-HTML5-文档？"><a href="#如何区分-HTML5-文档和非-HTML5-文档？" class="headerlink" title="如何区分 HTML5 文档和非 HTML5 文档？"></a>如何区分 HTML5 文档和非 HTML5 文档？</h2><p>在文档开头会有 <code>&lt;!DOCTYPE&gt;</code> 声明。</p>
<p>HTML4 是基于 SGML （Standard Generalized Markup Language 标准通用标记语言），所以 HTML4 要在声明中指定 DTD，例如：<br><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code>。<br>HTML5 不是基于 SGML，所以只要声明 html 就行了：<code>&lt;!DOCTYPE html&gt;</code>。</p>
<h2 id="请描述一下-Cookie，-LocalStorage-或-SessionStorage-的区别？"><a href="#请描述一下-Cookie，-LocalStorage-或-SessionStorage-的区别？" class="headerlink" title="请描述一下 Cookie， LocalStorage 或 SessionStorage 的区别？"></a>请描述一下 Cookie， LocalStorage 或 SessionStorage 的区别？</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">目的</th>
<th align="center">存储大小</th>
<th align="center">有效时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Cookie</td>
<td align="center">网页前后端访问是无状态的。为了让后端知道当前是谁在访问，浏览器就在 Cookie 中就存放用户信息，在同源的 HTTP 请求中携带。即 Cookie 会在浏览器和服务器中来回传递。</td>
<td align="center">4k</td>
<td align="center">设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭 ｜</td>
</tr>
<tr>
<td align="center">LocalStorage</td>
<td align="center">客户端本地存储数据</td>
<td align="center">5M</td>
<td align="center">存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</td>
</tr>
<tr>
<td align="center">SessionStorage</td>
<td align="center">同上</td>
<td align="center">同上</td>
<td align="center">数据在当前浏览器窗口关闭后自动删除</td>
</tr>
</tbody></table>
<h2 id="浏览器的渲染机制一般分为几个步骤"><a href="#浏览器的渲染机制一般分为几个步骤" class="headerlink" title="浏览器的渲染机制一般分为几个步骤?"></a>浏览器的渲染机制一般分为几个步骤?</h2><ul>
<li>处理 <code>HTML</code> 并构建 <code>DOM</code> 树。</li>
<li>处理 <code>CSS</code> 构建 <code>CSSOM</code> 树。</li>
<li>将 <code>DOM</code> 与 <code>CSSOM</code> 合并成一个渲染树。</li>
<li>根据渲染树来布局，计算每个节点的位置。</li>
<li>调用 <code>GPU</code> 绘制，合成图层，显示在屏幕上。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM 树构建完成。并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，尽量减少选择层叠，越是具体的 CSS 选择器，执行速度越慢。</p>
</li>
<li><p>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。</p>
</li>
</ul>
<h2 id="怎么理解重绘（Repaint）和回流（Reflow）？"><a href="#怎么理解重绘（Repaint）和回流（Reflow）？" class="headerlink" title="怎么理解重绘（Repaint）和回流（Reflow）？"></a>怎么理解重绘（Repaint）和回流（Reflow）？</h2><ul>
<li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</li>
<li>回流是布局或者几何属性需要改变就称为回流（需要计算它们在设备视口(viewport)内的确切位置和大小）</li>
</ul>
<blockquote>
<p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流</p>
</blockquote>
<h2 id="具体什么操作会导致重绘和回流？"><a href="#具体什么操作会导致重绘和回流？" class="headerlink" title="具体什么操作会导致重绘和回流？"></a>具体什么操作会导致重绘和回流？</h2><ul>
<li>添加或删除可见的 DOM 元素</li>
<li>元素的位置发生变化</li>
<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>
<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li>
<li>定位或者浮动</li>
<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>
</ul>
<h2 id="如何减少重绘和回流？"><a href="#如何减少重绘和回流？" class="headerlink" title="如何减少重绘和回流？"></a>如何减少重绘和回流？</h2><ul>
<li>批量修改 DOM，即减少修改 DOM 次数。</li>
<li>对于复杂动画效果,使用绝对定位让其脱离文档流。</li>
<li>对一个节点做大量复杂操作的时候，可先让该元素 <code>display:none</code></li>
<li>css3 硬件加速（GPU 加速）transform、opacity、filters 这些动画不会引起回流重绘。</li>
</ul>
<h2 id="简述data-属性的用法（如何设置，如何获取），有何优势？"><a href="#简述data-属性的用法（如何设置，如何获取），有何优势？" class="headerlink" title="简述data:属性的用法（如何设置，如何获取），有何优势？"></a>简述data:属性的用法（如何设置，如何获取），有何优势？</h2><p>data-* 的值的获取和设置，2种方法：</p>
<p>一、 传统方法</p>
<p>getAttribute() 获取data-属性值；</p>
<p>setAttribute() 设置data-属性值</p>
<p>二、HTML5新⽅法</p>
<p>例如 data-kerwin</p>
<p>dataset.kerwin 获取data-kerwin属性值</p>
<p>dataset.kerwin &#x3D; “赵钱孙李” 设置data-kerwin属性值</p>
<p>注意：</p>
<ul>
<li>传统⽅法⽆兼容性问题，但是不够优雅、⽅便</li>
<li>HTML5新⽅法很优雅、⽅便，但是有兼容性问题。</li>
</ul>
<p>优势：把数据存放在标签属性中可以让⻚⾯拥有更好的交互体验（不需要使⽤ Ajax 或去服务端查询数据）</p>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 插入排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-charupaixu/</url>
    <content><![CDATA[<p>插入排序每次排一个数组项，以此方式构建最后的排序数组。</p>
<span id="more"></span>
<p>  的  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    temp = array[i];</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = array[a];</span><br><span class="line">  array[a] = array[b];</span><br><span class="line">  array[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 快速排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-kuaisupaixu/</url>
    <content><![CDATA[<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = arr;</span><br><span class="line">  <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> base = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> min = arr.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &lt;= base);</span><br><span class="line">  <span class="keyword">let</span> max = arr.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; base);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(min).<span class="title function_">concat</span>([base]).<span class="title function_">concat</span>(<span class="title function_">quickSort</span>(max));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 扩展推荐 - Live Server 实时服务</title>
    <url>/2023/05/vscode-extension-live-server/</url>
    <content><![CDATA[<p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"><img src="/2023/05/vscode-extension-live-server/logo.png" alt="Live Server"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>预览 HTML，PHP 文件，并实时刷新。</p>
<span id="more"></span>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><img src="/2023/05/vscode-extension-live-server/method-1.jpg" alt="方法一"></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="/2023/05/vscode-extension-live-server/method-2.jpg" alt="方法一"></p>
]]></content>
      <categories>
        <category>VSCode 扩展推荐</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 计数排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-jishupaixu/</url>
    <content><![CDATA[<p>计数排序使用一个用来存储每个元素在原始 数组中出现次数的临时数组。在所有元素都计数完成后，临时数组已排好序并可迭代以构建排序 后的结果数组。</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> maxValue = <span class="title function_">findMaxValue</span>(array);</span><br><span class="line">  <span class="keyword">const</span> counts = <span class="keyword">new</span> <span class="title class_">Array</span>(maxValue + <span class="number">1</span>);</span><br><span class="line">  array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!counts[element]) &#123;</span><br><span class="line">      counts[element] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    counts[element]++;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">  counts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">count, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      array[sortedIndex++] = i;</span><br><span class="line">      count--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findMaxValue</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">      max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countingSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>计数排序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 归并排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-guibingpaixu/</url>
    <content><![CDATA[<p>归并排序是一种分而治之算法。其思想是将原始数组切分成较小的数组，直到每个小数组只 有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。</p>
<span id="more"></span>

<p><img src="/2023/09/interview-fontend-arithmetic-sort-guibingpaixu/image1.png" alt="归并排序"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            length</span><br><span class="line">        &#125; = array;</span><br><span class="line">        <span class="keyword">const</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left = <span class="title function_">mergeSort</span>(array.<span class="title function_">slice</span>(<span class="number">0</span>, middle));</span><br><span class="line">        <span class="keyword">const</span> right = <span class="title function_">mergeSort</span>(array.<span class="title function_">slice</span>(middle, length));</span><br><span class="line">        array = <span class="title function_">merge</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right </span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.<span class="property">length</span> &amp;&amp; j &lt; right.<span class="property">length</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(</span><br><span class="line">            left[i] &lt; right[j] ? left[i++] : right[j++]</span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">        <span class="comment">//先push ，再++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">concat</span>(i &lt; left.<span class="property">length</span> ? left.<span class="title function_">slice</span>(i) : right.<span class="title function_">slice</span>(j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 桶排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-tongpaixu/</url>
    <content><![CDATA[<p>桶排序（也被称为箱排序）也是分布式排序算法，它将元素分为不同的桶（较小的数组）， 再使用一个简单的排序算法，例如插入排序（用来排序小数组的不错的算法），来对每个桶进行 排序。然后，它将所有的桶合并为结果数组。</p>
<span id="more"></span>

<p><img src="/2023/09/interview-fontend-arithmetic-sort-tongpaixu/image-20221213091612715.png" alt="归并排序"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = arr;</span><br><span class="line">  <span class="keyword">let</span> temp; <span class="comment">//存 当前这一轮对应索引的元素值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bucketSort</span>(<span class="params">array, bucketSize = <span class="number">3</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> buckets = <span class="title function_">createBuckets</span>(array, bucketSize);</span><br><span class="line">  <span class="comment">//分桶装</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">sortBuckets</span>(buckets);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBuckets</span>(<span class="params">array, bucketSize</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> minValue = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> maxValue = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; minValue) &#123;</span><br><span class="line">      minValue = array[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">//一次循环找到最小最大值</span></span><br><span class="line">  <span class="keyword">const</span> bucketCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>((maxValue - minValue) / bucketSize) + <span class="number">1</span>; <span class="comment">// 最后一个索引+1</span></span><br><span class="line">  <span class="keyword">const</span> buckets = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">    buckets[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucketIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((array[i] - minValue) / bucketSize);</span><br><span class="line">    buckets[bucketIndex].<span class="title function_">push</span>(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buckets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortBuckets</span>(<span class="params">buckets</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buckets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buckets[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">insertSort</span>(buckets[i]);</span><br><span class="line">      sortedArray.<span class="title function_">push</span>(...buckets[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sortedArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>桶排序s</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 选择排序</title>
    <url>/2023/09/interview-fontend-arithmetic-sort-xuanzepaixu/</url>
    <content><![CDATA[<p>选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并 将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">  <span class="keyword">let</span> indexMin;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    indexMin = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[indexMin] &gt; array[j]) &#123;</span><br><span class="line">        indexMin = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i !== indexMin) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i, indexMin);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = array[a];</span><br><span class="line">  array[a] = array[b];</span><br><span class="line">  array[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 算法 - 排序 - 冒泡排序</title>
    <url>/2023/08/interview-fontend-arithmetic-sort-maopaopaixu/</url>
    <content><![CDATA[<p>冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至 正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(array, j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = array[a];</span><br><span class="line">  array[a] = array[b];</span><br><span class="line">  array[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(arr));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试题-前端-算法-排序</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 微信小程序</title>
    <url>/2023/08/interview-fontend-miniprogram/</url>
    <content><![CDATA[<h2 id="简述微信小程序原理"><a href="#简述微信小程序原理" class="headerlink" title="简述微信小程序原理"></a>简述微信小程序原理</h2><p>微信小程序采用 <code>JavaScript</code>、<code>WXML</code>、<code>WXSS</code> 三种技术进行开发,本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口微信的架构，是数据驱动的架构模式，它的 <code>UI</code> 和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现 小程序分为两个部分 <code>webview</code> 和 <code>appService</code> 。其中 <code>webview</code> 主要用来展现 <code>UI</code> ，<code>appService</code> 有来处理业务逻辑、数据及接口调用。它们在两个进程中运行，通过系统层 <code>JSBridge</code> 实现通信，实现 <code>UI</code> 的渲染、事件的处理</p>
<span id="more"></span>

<h2 id="简单描述下微信小程序的相关文件类型"><a href="#简单描述下微信小程序的相关文件类型" class="headerlink" title="简单描述下微信小程序的相关文件类型"></a>简单描述下微信小程序的相关文件类型</h2><ul>
<li><code>WXML</code>（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。内部主要是微信自己定义的一套组件</li>
<li><code>WXSS</code> (WeiXin Style Sheets)是一套样式语言，用于描述 <code>WXML</code> 的组件样式</li>
<li><code>js</code> 逻辑处理，网络请求</li>
<li><code>json</code> 小程序设置，如页面注册，页面标题及<code>tabBar</code></li>
</ul>
<blockquote>
<p>主要文件</p>
</blockquote>
<ul>
<li><code>app.json</code> 必须要有这个文件，如果没有这个文件，项目无法运行，因为微信框架把这个作为配置文件入口，整个小程序的全局配置。包括页面注册，网络设置，以及小程序的 <code>window</code> 背景色，配置导航条样式，配置默认标题</li>
<li><code>app.js</code> 必须要有这个文件，没有也是会报错！但是这个文件创建一下就行 什么都不需要写以后我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量</li>
<li><code>app.wxss</code> 可选</li>
</ul>
<h2 id="小程序的双向绑定和-vue-哪里不一样"><a href="#小程序的双向绑定和-vue-哪里不一样" class="headerlink" title="小程序的双向绑定和 vue 哪里不一样"></a>小程序的双向绑定和 vue 哪里不一样</h2><p>1、小程序直接修改 <code>this.data</code> 的属性是不可以同步到视图的，必须调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  <span class="comment">// 这里设置</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、在 vue 中,只需要再表单元素上加上 v-model,然后再绑定 data 中对应的一个值，当表单元素内容发生变化时，data 中对应的值也会相应改变，这是 vue 非常 nice 的一点。 但是在小程序中，却没有这个功能。那怎么办呢？当表单内容发生变化时，会触发表单元素上绑定的方法，然后在该方法中，通过 this.setData({key:value})来将表单上的值赋值给 data 中的对应值。下面是代码，可以感受一下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input bindinput=<span class="string">&quot;bindReason&quot;</span> placeholder=<span class="string">&quot;填写理由&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;reason&quot;</span> value=<span class="string">&quot;&#123;&#123;reason&#125;&#125;&quot;</span> name=<span class="string">&quot;reason&quot;</span> /&gt;;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">reason</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">bindReason</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">reason</span>: e.<span class="property">detail</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当页面表单元素很多的时候，更改值就是一件体力活了。和小程序一比较，vue 的 v-model 简直爽的不要不要的。</p>
<p>3、取值</p>
<ul>
<li><p>vue 中，通过 this.reason 取值</p>
</li>
<li><p>小程序中，通过 this.data.reason 取值</p>
</li>
</ul>
<h2 id="如何自定义小程序的-navigationBar"><a href="#如何自定义小程序的-navigationBar" class="headerlink" title="如何自定义小程序的 navigationBar"></a>如何自定义小程序的 navigationBar</h2><ul>
<li><p>思路</p>
<blockquote>
<p>隐藏原生样式 获取胶囊按钮、状态栏相关数据以供后续计算 根据不同机型计算出该机型的导航栏高度，进行适配 编写新的导航栏 引用到页面</p>
</blockquote>
</li>
</ul>
<p>参考<a href="https://zhuanlan.zhihu.com/p/117244248">这里</a></p>
<h2 id="说说小程序中-wx-if-和-hidden-的区别"><a href="#说说小程序中-wx-if-和-hidden-的区别" class="headerlink" title="说说小程序中 wx:if 和 hidden 的区别"></a>说说小程序中 wx:if 和 hidden 的区别</h2><blockquote>
<p>相同点：</p>
</blockquote>
<p>wx:if 与 hidden 都用来控制小程序元素的显示</p>
<blockquote>
<p>不同点</p>
</blockquote>
<p>wx:if：</p>
<ul>
<li>1、条件为 true 时显示</li>
<li>2、当元素显示时渲染</li>
<li>3、元素变为不显示时销毁元素</li>
</ul>
<p>hidden：</p>
<ul>
<li>1、条件为 false 时显示</li>
<li>2、当元素显示时渲染</li>
<li>3、元素变为不显示时保留元素</li>
<li>4、相当于使用了 dispaly</li>
</ul>
<p>总结： 1、当元素频繁切换是否显示时使用 hidden ，因为 wx:if 会频繁地销毁渲染元素 2、当元素不频繁切换是否显示时使用 wx:if，因为 wx:if 会避免页面加载时渲染过多，导致页面加载缓慢</p>
<h2 id="小程序的-wxss-和-css-有哪些不一样的地方"><a href="#小程序的-wxss-和-css-有哪些不一样的地方" class="headerlink" title="小程序的 wxss 和 css 有哪些不一样的地方"></a>小程序的 wxss 和 css 有哪些不一样的地方</h2><blockquote>
<p><code>WXSS</code> 和 <code>CSS</code> 类似，不过在 <code>CSS</code> 的基础上做了一些补充和修改</p>
</blockquote>
<ul>
<li>尺寸单位 <code>rpx</code></li>
</ul>
<p><code>rpx</code> 是响应式像素,可以根据屏幕宽度进行自适应。规定屏幕宽为 <code>750rpx</code>。如在 <code>iPhone6</code> 上，屏幕宽度为 <code>375px</code>，共有 <code>750</code> 个物理像素，则 <code>750rpx = 375px = 750</code> 物理像素</p>
<ul>
<li>使用 <code>@import</code> 标识符来导入外联样式。<code>@import</code> 后跟需要导入的外联样式表的相对路径，用;表示语句结束</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** index.wxss **/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./base.wxss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小程序页面间有哪些传递数据的方法"><a href="#小程序页面间有哪些传递数据的方法" class="headerlink" title="小程序页面间有哪些传递数据的方法"></a>小程序页面间有哪些传递数据的方法</h2><ul>
<li>使用全局变量实现数据传递</li>
</ul>
<p>在 <code>app.js</code> 文件中定义全局变量 <code>globalData</code>， 将需要存储的信息存放在里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="comment">// 全局变量</span></span><br><span class="line">  <span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用的时候，直接使用 <code>getApp()</code> 拿到存储的信息</p>
<ul>
<li>使用 <code>wx.navigateTo</code> 与 <code>wx.redirectTo</code> 的时候，可以将部分数据放在 <code>url</code> 里面，并在新页面 <code>onLoad</code> 的时候初始化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Navigate</span></span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../pageD/pageD?name=raymond&amp;gender=male&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect</span></span><br><span class="line">wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../pageD/pageD?name=raymond&amp;gender=male&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// pageB.js</span></span><br><span class="line">...</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">option</span>)&#123;<span class="comment">//option里面可以拿到路由参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(option.<span class="property">name</span> + <span class="string">&#x27;is&#x27;</span> + option.<span class="property">gender</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">option</span>: option</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>需要注意的问题：</p>
<p><code>wx.navigateTo</code> 和 <code>wx.redirectTo</code> 不允许跳转到 <code>tab</code> 所包含的页面</p>
<p><code>onLoad</code> 只执行一次</p>
<ul>
<li>使用本地缓存 <code>Storage</code> 相关</li>
</ul>
<h2 id="小程序的生命周期函数"><a href="#小程序的生命周期函数" class="headerlink" title="小程序的生命周期函数"></a>小程序的生命周期函数</h2><ul>
<li><code>onLoad</code> 页面加载时触发。一个页面只会调用一次，可以在 <code>onLoad</code> 的参数中获取打开当前页面路径中的参数,建议在此调接口</li>
<li><code>onShow()</code> 页面显示&#x2F;切入前台时触发，不建议在此调接口</li>
<li><code>onReady()</code> 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互</li>
<li><code>onHide()</code> 页面隐藏&#x2F;切入后台时触发。 如 <code>navigateTo</code> 或底部 <code>tab</code> 切换到其他页面，小程序切入后台等</li>
<li><code>onUnload()</code> 页面卸载时触发。如 <code>redirectTo</code> 或 <code>navigateBack</code> 到其他页面时</li>
</ul>
<p>详见 <a href="https://link.zhihu.com/?target=https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html%23%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">生命周期回调函数</a></p>
<h2 id="哪些方法可以用来提高微信小程序的应用速度"><a href="#哪些方法可以用来提高微信小程序的应用速度" class="headerlink" title="哪些方法可以用来提高微信小程序的应用速度"></a>哪些方法可以用来提高微信小程序的应用速度</h2><p>1、提高页面加载速度</p>
<p>2、用户行为预测</p>
<p>3、减少默认 <code>data</code> 的大小</p>
<p>4、组件化方案</p>
<h2 id="微信小程序的优劣势"><a href="#微信小程序的优劣势" class="headerlink" title="微信小程序的优劣势"></a>微信小程序的优劣势</h2><blockquote>
<p>优势</p>
</blockquote>
<ul>
<li>即用即走，不用安装，省流量，省安装时间，不占用桌面</li>
<li>依托微信流量，天生推广传播优势</li>
<li>开发成本比 <code>App</code> 低</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>用户留存，即用即走是优势，也存在一些问题</li>
<li>入口相对传统 <code>App</code> 要深很多</li>
<li>限制较多,页面大小不能超过 2M。不能打开超过 10 个层级的页面</li>
</ul>
<h2 id="怎么解决小程序的异步请求问题"><a href="#怎么解决小程序的异步请求问题" class="headerlink" title="怎么解决小程序的异步请求问题"></a>怎么解决小程序的异步请求问题</h2><blockquote>
<p>小程序支持大部分 <code>ES6</code> 语法</p>
</blockquote>
<ul>
<li>在返回成功的回调里面处理逻辑</li>
<li><code>Promise</code> 异步</li>
</ul>
<h2 id="小程序关联微信公众号如何确定用户的唯一性"><a href="#小程序关联微信公众号如何确定用户的唯一性" class="headerlink" title="小程序关联微信公众号如何确定用户的唯一性"></a>小程序关联微信公众号如何确定用户的唯一性</h2><p>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 <code>unionid</code> 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 <code>unionid</code> 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，<code>unionid</code> 是相同的</p>
<h2 id="如何实现下拉刷新"><a href="#如何实现下拉刷新" class="headerlink" title="如何实现下拉刷新"></a>如何实现下拉刷新</h2><ul>
<li>首先在全局 <code>config</code> 中的 <code>window</code> 配置 <code>enablePullDownRefresh</code></li>
<li>在 <code>Page</code> 中定义 <code>onPullDownRefresh</code> 钩子函数,到达下拉刷新条件后，该钩子函数执行，发起请求方法</li>
<li>请求返回后，调用 <code>wx.stopPullDownRefresh</code> 停止下拉刷新</li>
</ul>
<p>参考 <a href="https://link.zhihu.com/?target=https://juejin.im/post/5a781c756fb9a063606eb742">这里</a></p>
<h2 id="bindtap-和-catchtap-的区别是什么"><a href="#bindtap-和-catchtap-的区别是什么" class="headerlink" title="bindtap 和 catchtap 的区别是什么"></a>bindtap 和 catchtap 的区别是什么</h2><p>相同点：首先他们都是作为点击事件函数，就是点击时触发。在这个作用上他们是一样的，可以不做区分</p>
<p>不同点：他们的不同点主要是 bindtap 是不会阻止冒泡事件的，catchtap 是阻止冒泡的</p>
<h2 id="简述微信支付的业务流程"><a href="#简述微信支付的业务流程" class="headerlink" title="简述微信支付的业务流程"></a>简述微信支付的业务流程</h2><ul>
<li><p>步骤 1：用户在商户 APP 中选择商品，提交订单，选择微信支付。</p>
</li>
<li><p>步骤 2：商户后台收到用户支付单，调用微信支付统一下单接口。参见<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1">统一下单 API</a>。</p>
</li>
<li><p>步骤 3：统一下单接口返回正常的 prepay_id，再按签名规范重新生成签名后，将数据传输给 APP。参与签名的字段名为<code>appid</code>，<code>partnerid</code>，<code>prepayid</code>，<code>noncestr</code>，<code>timestamp</code>，<code>package</code>。注意：package 的值格式为<code>Sign=WXPay</code></p>
</li>
<li><p>步骤 4：商户 APP 调起微信支付。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">requestPayment</span>(&#123;</span><br><span class="line">  <span class="attr">timeStamp</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">nonceStr</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">package</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">signType</span>: <span class="string">&#x27;MD5&#x27;</span>,</span><br><span class="line">  <span class="attr">paySign</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">res</span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤 5：商户后台接收支付通知。<code>api</code>参见<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_7">支付结果通知 API</a></p>
</li>
<li><p>步骤 6：商户后台查询支付结果。，<code>api</code>参见<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_2">查询订单 API</a>（查单实现可参考：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=23_9&index=1">支付回调和查单实现指引</a>） 详情参考<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_3">这里</a></p>
</li>
</ul>
<h2 id="什么是小程序自定义组件样式隔离-他有哪几种隔离模式？"><a href="#什么是小程序自定义组件样式隔离-他有哪几种隔离模式？" class="headerlink" title="什么是小程序自定义组件样式隔离,他有哪几种隔离模式？"></a>什么是小程序自定义组件样式隔离,他有哪几种隔离模式？</h2><p>默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。除非以下两种情况：</p>
<ul>
<li><code>app.wxss</code> 或页面的 <code>wxss</code> 中使用了标签名选择器（或一些其他特殊选择器）来直接指定样式，这些选择器会影响到页面和全部组件。通常情况下这是不推荐的做法。</li>
<li>指定特殊的样式隔离选项 <code>styleIsolation</code> 。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&#x27;isolated&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.weixin.qq.com/s/xPQhJcm37e7h">在开发者工具中预览效果</a></p>
<p><code>styleIsolation</code> 选项从基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.6.5</a> 开始支持。它支持以下取值：</p>
<ul>
<li><code>isolated</code> 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（一般情况下的默认值）；</li>
<li><code>apply-shared</code> 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</li>
<li><code>shared</code> 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件。（这个选项在插件中不可用。）</li>
</ul>
<h2 id="在小程序中又哪些方法让图片宽高比例保持不变？"><a href="#在小程序中又哪些方法让图片宽高比例保持不变？" class="headerlink" title="在小程序中又哪些方法让图片宽高比例保持不变？"></a>在小程序中又哪些方法让图片宽高比例保持不变？</h2><p>使用 mode：widthFix</p>
<blockquote>
<p><code>widthFix</code>：宽度不变，高度自动变化，保持原图宽高比不变。 首先我们先设置 image 的 mode 为<code>widthFix</code>，然后给图片加一个固定<code>rpx</code>的宽度，比如：<code>730rpx</code>。 这样图片也可以自适应了。。因为小程序的<code>rpx</code>本身就是一个自适应显示的单位</p>
</blockquote>
<h2 id="小程序组件传参-父子，子父"><a href="#小程序组件传参-父子，子父" class="headerlink" title="小程序组件传参(父子，子父)"></a>小程序组件传参(父子，子父)</h2><ul>
<li><p>父传子</p>
<blockquote>
<p>自定义属性，属性的值来自声明式变量 子组件通过 props 接收</p>
</blockquote>
</li>
<li><p>子传父</p>
<blockquote>
<p>自定义事件，父组件通过事件接收子组件传过来的值 自定义封装组件的例子：</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;component-tag-name inner-text=<span class="string">&quot;Some text&quot;</span>&gt;&lt;/component-tag-name&gt;</span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里定义了 innerText 属性，属性值可以在组件使用时指定</span></span><br><span class="line">    <span class="attr">innerText</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;default value&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里是一些组件内部数据</span></span><br><span class="line">    <span class="attr">someData</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里是一个自定义方法</span></span><br><span class="line">    <span class="attr">customMethod</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;component-tag-name <span class="attr">bind</span>:myevent=<span class="string">&quot;onMyEvent&quot;</span> /&gt;</span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">onTap</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> myEventDetail = &#123;&#125; <span class="comment">// detail对象，提供给事件监听函数</span></span><br><span class="line">      <span class="keyword">var</span> myEventOption = &#123;&#125; <span class="comment">// 触发事件的选项</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;myevent&#x27;</span>, myEventDetail, myEventOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="小程序组件生命周期"><a href="#小程序组件生命周期" class="headerlink" title="小程序组件生命周期"></a>小程序组件生命周期</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">    <span class="attr">attached</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">detached</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 以下是旧式的定义方式，可以保持对 &lt;2.2.3 版本基础库的兼容</span></span><br><span class="line">  <span class="attr">attached</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">detached</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="小程序页面生命周期"><a href="#小程序页面生命周期" class="headerlink" title="小程序页面生命周期"></a>小程序页面生命周期</h2><ul>
<li>1、小程序注册完成后，加载页面，触发<code>onLoad</code>方法，一个页面只会调用一次。</li>
<li>2、页面载入后触发<code>onShow</code>方法，显示页面，每次打开页面都会调用一次。</li>
<li>3、首次显示页面，会触发<code>onReady</code>方法，渲染页面元素和样式，一个页面只会调用一次。</li>
<li>4、当小程序后台运行或跳转到其他页面时，触发<code>onHide</code>方法。</li>
<li>5、当小程序有后台进入到前台运行或重新进入页面时，触发<code>onShow</code>方法。</li>
<li>6、当使用重定向方法<code>wx.redirectTo(OBJECT)</code>或关闭当前页返回上一页<code>wx.navigateBack()</code>，触发<code>onUnload</code></li>
</ul>
<h2 id="小程序怎么样实现路由传参"><a href="#小程序怎么样实现路由传参" class="headerlink" title="小程序怎么样实现路由传参"></a>小程序怎么样实现路由传参</h2><ul>
<li>wx.navigateTo</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../placeIntroduce/placeIntroduce?placeId=2&#x27;</span>,<span class="comment">//在路径后面拼接</span></span><br><span class="line">&#125;)</span><br><span class="line">  另外一个页面通过<span class="title function_">onload</span>(options)这个生命周期获取到placeId</span><br></pre></td></tr></table></figure>

<ul>
<li>wx.redirectTo</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="property">redirectTo</span> （非 tabBar 的页面的路径，不能返回来，不限层）</span><br><span class="line">  wx.<span class="property">redirectTo</span> (&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../placeIntroduce/placeIntroduce?placeId=2&#x27;</span>,<span class="comment">//在路径后面拼接</span></span><br></pre></td></tr></table></figure>

<h2 id="小程序中的路由跳转-switchTab-navigateTo-redirectTo-的区别"><a href="#小程序中的路由跳转-switchTab-navigateTo-redirectTo-的区别" class="headerlink" title="小程序中的路由跳转 switchTab navigateTo redirectTo 的区别"></a>小程序中的路由跳转 switchTab navigateTo redirectTo 的区别</h2><ul>
<li>wx.navigateTo()：保留当前页面，跳转到应用内的某个页面。但是不能跳到 <code>tabbar</code> 页面</li>
<li>wx.redirectTo()：关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 <code>tabbar</code> 页面</li>
<li>wx.switchTab()：跳转到 <code>abBar</code> 页面，并关闭其他所有非 <code>tabBar</code> 页面</li>
<li>wx.navigateBack()关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层</li>
<li>wx.reLaunch()：关闭所有页面，打开到应用内的某个页面</li>
</ul>
<h2 id="小程序-tabbar-实现原理"><a href="#小程序-tabbar-实现原理" class="headerlink" title="小程序 tabbar 实现原理"></a>小程序 tabbar 实现原理</h2><p>要实现 tabbar 的导航条其实很简单，我们要实现全局的 tabbar 只需要在 app.json 文件中定义即可，局部的就在局部的 tabbar 文件中实现。</p>
<blockquote>
<p>来看看 app.json 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">pages</span>: [</span><br><span class="line">    <span class="string">&#x27;pages/index/index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/search/search&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/news/news&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/attention/attention&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/collect/collect&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/comment/comment&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/my/my&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/detail/detail&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/chat/chat&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">window</span>: &#123;</span><br><span class="line">    <span class="attr">backgroundTextStyle</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarBackgroundColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarTitleText</span>: <span class="string">&#x27;小红书&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarTextStyle</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">    <span class="attr">enablePullDownRefresh</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tabBar</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">pagePath</span>: <span class="string">&#x27;pages/index/index&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">        <span class="attr">iconPath</span>: <span class="string">&#x27;assets/tabbar/1.png&#x27;</span>,</span><br><span class="line">        <span class="attr">selectedIconPath</span>: <span class="string">&#x27;assets/tabbar/2.png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">pagePath</span>: <span class="string">&#x27;pages/news/news&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;消息&#x27;</span>,</span><br><span class="line">        <span class="attr">iconPath</span>: <span class="string">&#x27;assets/tabbar/news1.png&#x27;</span>,</span><br><span class="line">        <span class="attr">selectedIconPath</span>: <span class="string">&#x27;assets/tabbar/news2.png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">pagePath</span>: <span class="string">&#x27;pages/my/my&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;我的&#x27;</span>,</span><br><span class="line">        <span class="attr">iconPath</span>: <span class="string">&#x27;assets/tabbar/3.png&#x27;</span>,</span><br><span class="line">        <span class="attr">selectedIconPath</span>: <span class="string">&#x27;assets/tabbar/4.png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">permission</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;scope.userLocation&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;为了更好的为你服务，请允许访问你的地址&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://www.cnblogs.com/izhaofu/p/6278589.html">这里</a></p>
</blockquote>
<h2 id="小程序性能为什么那么好，为什么能做到即用即走的效果"><a href="#小程序性能为什么那么好，为什么能做到即用即走的效果" class="headerlink" title="小程序性能为什么那么好，为什么能做到即用即走的效果"></a>小程序性能为什么那么好，为什么能做到即用即走的效果</h2><ul>
<li>因为是轻量级的，代码包体积限制在 2M 以内，如果超过 2M 还可以进行分包，提高性能优化</li>
<li>运行在微信端,很多功能只需要使用 API 来实现，就可以实现跟 APP 的一样的功能</li>
<li>是基于微信宿主环境的，微信客户端提供双线程去执行 wxml, wxss, js 文件，让小程序可以快速的一下将数据渲染出来呈现在用户的面前</li>
</ul>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 网络</title>
    <url>/2023/08/interview-fontend-network/</url>
    <content><![CDATA[<h2 id="url-从输入到渲染页面的全过程"><a href="#url-从输入到渲染页面的全过程" class="headerlink" title="url 从输入到渲染页面的全过程"></a>url 从输入到渲染页面的全过程</h2><ul>
<li>浏览器构建 HTTP Request 请求， DNS 解析 URL 地址、生成 HTTP 请求报文、构建 TCP 连接、使用 IP 协议选择传输路线</li>
<li>将请求通过网络传输到服务端 从客户机到服务器需要通过许多网络设备，一般包括集线器、交换器、路由器等</li>
<li>服务器构建 HTTP Response 响应，响应客户端的请求</li>
<li>将响应体的数据通过网络传输返回给客户端</li>
<li>浏览器渲染页面 解析 HTML、CSS、JS，生成 RenderTree 渲染页面</li>
</ul>
<span id="more"></span>

<h2 id="tcp-三次握手，四次挥手，可靠传输原理"><a href="#tcp-三次握手，四次挥手，可靠传输原理" class="headerlink" title="tcp 三次握手，四次挥手，可靠传输原理"></a>tcp 三次握手，四次挥手，可靠传输原理</h2><ul>
<li><p>第一次握手：客户端发送 syn 报文，并发送 seq 为 x 序列号给服务端，等待服务端的确认。</p>
</li>
<li><p>第二次握手：服务端发送 syn+ack 报文，并发送 seq 为 Y 的序列号，在确认序列号为 x+1</p>
</li>
<li><p>第三次握手：客户端发送 ack 报文，并发送 seq 序列号为 z，在确认序列号为 y+1</p>
<p>四次挥手</p>
</li>
<li><p>第一次挥手：先由客户端向服务器端发送一个 FIN，请求关闭数据传输。</p>
</li>
<li><p>第二次挥手：当服务器接收到客户端的 FIN 时，向客户端发送一个 ACK，其中 ack 的值等于 FIN+SEQ</p>
</li>
<li><p>第三次挥手：然后服务器向客户端发送一个 FIN，告诉客户端应用程序关闭。</p>
</li>
<li><p>第四次挥手：当客户端收到服务器端的 FIN 是，回复一个 ACK 给服务器端。其中 ack 的值等于 FIN+SEQ</p>
</li>
</ul>
<h2 id="http200-和-302-的区别"><a href="#http200-和-302-的区别" class="headerlink" title="http200 和 302 的区别"></a><code>http200</code> 和 <code>302</code> 的区别</h2><ul>
<li>http_200 的意思是 成功处理了请求</li>
<li>http_302 的意思是（临时移动）服务器目前从不同位置的网页响应请求， 但请求者应继续使用原有位置来进行以后的请求。</li>
</ul>
<h2 id="你知道哪些-http-首部字段"><a href="#你知道哪些-http-首部字段" class="headerlink" title="你知道哪些 http 首部字段"></a>你知道哪些 http 首部字段</h2><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Connection</td>
<td>逐跳首部、连接的管理</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间</td>
</tr>
<tr>
<td>Program</td>
<td>报文指令</td>
</tr>
<tr>
<td>Trailer</td>
<td>报文末端的首部一览</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>指定报文主体的传输编码方式</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
<tr>
<td>Via</td>
<td>代理服务器的相关信息</td>
</tr>
<tr>
<td>Warning</td>
<td>错误通知</td>
</tr>
<tr>
<td>Authorization</td>
<td>Web 认证信息</td>
</tr>
</tbody></table>
<h2 id="说一下-http-缓存策略，有什么区别，分别解决了什么问题"><a href="#说一下-http-缓存策略，有什么区别，分别解决了什么问题" class="headerlink" title="说一下 http 缓存策略，有什么区别，分别解决了什么问题"></a>说一下 http 缓存策略，有什么区别，分别解决了什么问题</h2><p>浏览器每次发起请求时，先在本地缓存中查找结果以及缓存标识，根据缓存标识来判断是否使用本地缓存, 如果缓存有效，则使用本地缓存。<br>向服务器发起请求并携带缓存标识。根据是否需向服务器发起 HTTP 请求， 将缓存过程划分为两个部分：强制缓存和协商缓存，强缓优先于协商缓存。</p>
<ul>
<li>强缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。</li>
<li>协商缓存，让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率， 将缓存信息中的 Etag 和 Last-Modified,通过请求发送给服务器，由服务器校验，返回 304 状态码时，浏览器直接使用缓存。</li>
<li>解决问题 1.减少了冗余的数据传输 2.减少了服务器的负担，大大提升了网站的性能 3.加快了客户端加载网页的速度</li>
</ul>
<h2 id="为什么浏览器要限制-TCP-的最大个数"><a href="#为什么浏览器要限制-TCP-的最大个数" class="headerlink" title="为什么浏览器要限制 TCP 的最大个数"></a>为什么浏览器要限制 TCP 的最大个数</h2><ul>
<li><p>建立一个 tcp 连接需要：1，socket 文件描述符；2，IP 地址；3，端口；4，内存</p>
</li>
<li><p>1、内存资源： 一个 tcp 连接最小占用内存为 4096+4096 &#x3D; 8k， 那么对于一个 8G 内存的机器，在不考虑其他限制下， 最多支持的并发量为：810241024&#x2F;8 约等于 100 万， 在实际中，由于 linux kernel 对一些资源的限制， 加上程序的业务处理，所以，8G 内存是很难达到 100 万连接的</p>
</li>
<li><p>2、CPU 资源</p>
</li>
</ul>
<h2 id="HTTP2-0-的特点"><a href="#HTTP2-0-的特点" class="headerlink" title="HTTP2.0 的特点"></a>HTTP2.0 的特点</h2><p>HTTP2.0 大幅度的提高了 web 性能，在 HTTP1.1 完全语意兼容的基础上，进一步减少了网络的延迟。</p>
<p>1、二进制分帧</p>
<p>2、多路复用</p>
<p>3、首部压缩</p>
<p>4、流量控制</p>
<p>5、请求优先级</p>
<p>6、服务器推送</p>
<h2 id="说一下-HTTP2-多路复用原理，以及多路复用优势"><a href="#说一下-HTTP2-多路复用原理，以及多路复用优势" class="headerlink" title="说一下 HTTP2 多路复用原理，以及多路复用优势"></a>说一下 HTTP2 多路复用原理，以及多路复用优势</h2><p>HTTP&#x2F;1.1 中的消息是“管道串形化”的：只有等一个消息完成之后，才能进行下一条消息；而 HTTP&#x2F;2 中多个消息交织在了一起，这无疑提高了“通信”的效率。这就是多路复用：<strong>在一个 HTTP 的连接上，多路“HTTP 消息”同时工作</strong>。</p>
<h2 id="简述-https-原理，以及与-http-的区别"><a href="#简述-https-原理，以及与-http-的区别" class="headerlink" title="简述 https 原理，以及与 http 的区别"></a>简述 https 原理，以及与 http 的区别</h2><ul>
<li><p>HTTP 协议工作在 80 端口，HTTPS 协议工作在 443 端口</p>
</li>
<li><p>HTTPS 需要申请证书（用于验证服务器身份）</p>
</li>
<li><p>HTTP 在 TCP 三次握手建立连接之后即可开始传输数据；HTTPS 协议则需要在建立 TCP 连接之后客户端与服务器在进行 SSL 加密，确定对话密钥，完成加密后才开始传输数据。</p>
</li>
<li><p>HTTPS 协议传输是密文，HTTP 协议传输是明文</p>
</li>
</ul>
<h2 id="CDN-是什么？描述下-CDN-原理？为什么要用-CDN"><a href="#CDN-是什么？描述下-CDN-原理？为什么要用-CDN" class="headerlink" title="CDN 是什么？描述下 CDN 原理？为什么要用 CDN?"></a>CDN 是什么？描述下 CDN 原理？为什么要用 CDN?</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络 共有云厂商在全世界各地都遍布不计其数都数据中心和服务器， CDN 服务简单来讲就是这些厂商将你的服务器上面的文档分发到他们不同地区的服务器的当中， 每个地区可以称为一个节点，这样用户在访问你的网址时， 浏览器发送的请求就会优先绕去离客户最近的节点来获取数据， 这样方便客户更快的速度访问网站。 CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器， 通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容， 降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</p>
<h2 id="为什么-form-表单提交没有跨域问题，但-ajax-有跨域问题"><a href="#为什么-form-表单提交没有跨域问题，但-ajax-有跨域问题" class="headerlink" title="为什么 form 表单提交没有跨域问题，但 ajax 有跨域问题"></a>为什么 form 表单提交没有跨域问题，但 ajax 有跨域问题</h2><p>浏览器的策略本质是：一个域名下面的 JS，没有经过允许是不能读取另一个域名的内容，但是浏览器不阻止你向另外一个域名发送请求。 所以 form 表单提交没有跨域问题，提交 form 表单到另外一个域名，原来页面是无法获取新页面的内容，或者说 form 提交后不需要返回，但是 ajax 是需要返回的。 而 ajax 是想要读取响应内容，浏览器是不允许你这么做的。 浏览器的安全策略限制的是 js 脚本，并不限制 src，form 表单提交之类的请求， 就是说 form 表单提交不存在安全问题，ajax 提交跨域存在安全问题。</p>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - Node.js</title>
    <url>/2023/08/interview-fontend-nodejs/</url>
    <content><![CDATA[<h2 id="nodejs-创建静态服务器"><a href="#nodejs-创建静态服务器" class="headerlink" title="nodejs 创建静态服务器"></a>nodejs 创建静态服务器</h2><p>要使用 HTTP 服务器和客户端，则必须 <code>require(&#39;http&#39;)</code>。</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建本地服务器来从其接收数据</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建本地服务器来从其接收数据</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">request, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="commonJS-规范-vs-ES6-模块化规范"><a href="#commonJS-规范-vs-ES6-模块化规范" class="headerlink" title="commonJS 规范 vs ES6 模块化规范"></a>commonJS 规范 vs ES6 模块化规范</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; 某个几个接口 &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>; <span class="comment">//webpack (tree shaking 摇树优化)</span></span><br><span class="line"><span class="keyword">var</span> myview = <span class="built_in">require</span>(<span class="string">&#x27;antd&#x27;</span>); <span class="comment">//导入整个接口</span></span><br></pre></td></tr></table></figure>

<h2 id="socket-通信-聊天"><a href="#socket-通信-聊天" class="headerlink" title="socket 通信 聊天"></a>socket 通信 聊天</h2><p>WebSocket 并不是全新的协议，而是利用了 HTTP 协议来建立连接。我们来看看 WebSocket 连接是如何创建的。</p>
<p>首先，WebSocket 连接必须由浏览器发起，因为请求协议是一个标准的 HTTP 请求，格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">ws://localhost:3000/ws/chat</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://localhost:3000</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span><span class="punctuation">: </span>client-random-string</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span><span class="punctuation">: </span>13</span><br></pre></td></tr></table></figure>

<p>该请求和普通的 HTTP 请求有几点不同：</p>
<ol>
<li>GET 请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址；</li>
<li>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为 WebSocket 连接；</li>
<li><code>Sec-WebSocket-Key</code>是用于标识这个连接，并非用于加密数据；</li>
<li><code>Sec-WebSocket-Version</code>指定了 WebSocket 的协议版本。</li>
</ol>
<p>随后，服务器如果接受该请求，就会返回如下响应：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>server-random-string</span><br></pre></td></tr></table></figure>

<p>该响应代码<code>101</code>表示本次连接的 HTTP 协议即将被更改，更改后的协议就是<code>Upgrade: websocket</code>指定的 WebSocket 协议。</p>
<p>版本号和子协议规定了双方能理解的数据格式，以及是否支持压缩等等。如果仅使用 WebSocket 的 API，就不需要关心这些。</p>
<p>现在，一个 WebSocket 连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送 JSON 格式的文本，这样，在浏览器处理起来就十分容易。</p>
<p><strong>为什么 WebSocket 连接可以实现全双工通信而 HTTP 连接不行呢？实际上 HTTP 协议是建立在 TCP 协议之上的，TCP 协议本身就实现了全双工通信，但是 HTTP 协议的请求－应答机制限制了全双工通信。WebSocket 连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用 HTTP 协议了，直接互相发数据吧。</strong></p>
<p>安全的 WebSocket 连接机制和 HTTPS 类似。首先，浏览器用<code>wss://xxx</code>创建 WebSocket 连接时，会先通过 HTTPS 创建安全的连接，然后，该 HTTPS 连接升级为 WebSocket 连接，底层通信走的仍然是安全的 SSL&#x2F;TLS 协议。</p>
<p><code>websocket全双工, 双向通信 onopen  onmessage  onclose onerror</code></p>
<p>服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="title class_">WebSocketServer</span> = <span class="title class_">WebSocket</span>.<span class="property">WebSocketServer</span>;</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123;</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">message</span>(<span class="params">data, isBinary</span>) &#123;</span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">client</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (client !== ws &amp;&amp; client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(data, &#123; <span class="attr">binary</span>: isBinary &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;欢迎加入聊天室&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(evt.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="JSON-Web-Token-JWT"><a href="#JSON-Web-Token-JWT" class="headerlink" title="JSON Web Token (JWT)"></a>JSON Web Token (JWT)</h2><p>我为什么要保存这可恶的 session 呢， 只让每个客户端去保存该多好？</p>
<p>当然， 如果一个人的 token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的 session id 被别人偷走是一样的。</p>
<p>这样一来， 我就不保存 session id 了， 我只是生成 token , 然后验证 token ， 我用我的 CPU 计算时间获取了我的 session 存储空间 ！</p>
<p>解除了 session id 这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！</p>
<p>缺点：</p>
<blockquote>
<ol>
<li>占带宽，正常情况下要比 session_id 更大，需要消耗更多流量，挤占更多带宽，假如你的网站每月有 10 万次的浏览器，就意味着要多开销几十兆的流量。听起来并不多，但日积月累也是不小一笔开销。实际上，许多人会在 JWT 中存储的信息会更多；</li>
<li>无法在服务端注销，那么久很难解决劫持问题；</li>
<li>性能问题，JWT 的卖点之一就是加密签名，由于这个特性，接收方得以验证 JWT 是否有效且被信任。对于有着严格性能要求的 Web 应用，这并不理想，尤其对于单线程环境。</li>
</ol>
</blockquote>
<p>注意：</p>
<blockquote>
<p>CSRF 攻击的原因是浏览器会自动带上 cookie，而不会带上 token；<br>以 CSRF 攻击为例：<br>cookie：用户点击了链接，cookie 未失效，导致发起请求后后端以为是用户正常操作，于是进行扣款操作；<br>token：用户点击链接，由于浏览器不会自动带上 token，所以即使发了请求，后端的 token 验证不会通过，所以不会进行扣款操作；</p>
</blockquote>
<p>实现:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jsonwebtoken 封装</span></span><br><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&#x27;kerwin&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">JWT</span> = &#123;</span><br><span class="line">  <span class="title function_">generate</span>(<span class="params">value, exprires</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> jsonwebtoken.<span class="title function_">sign</span>(value, secret, &#123; <span class="attr">expiresIn</span>: exprires &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">verify</span>(<span class="params">token</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> jsonwebtoken.<span class="title function_">verify</span>(token, secret);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">JWT</span>;</span><br></pre></td></tr></table></figure>

<h2 id="token-存储在-localStorage-里，当过期时过期的-token-怎么处理？"><a href="#token-存储在-localStorage-里，当过期时过期的-token-怎么处理？" class="headerlink" title="token 存储在 localStorage 里，当过期时过期的 token 怎么处理？"></a>token 存储在 localStorage 里，当过期时过期的 token 怎么处理？</h2><p>当前端进行页面跳转或者需要鉴权的操作时，会发送请求到后台，而 token 会跟随请求头一起发送，后台通过请求头接收到 token 时会进行判断，若是过期了，应该返回一个 401 的状态码给前端，前端接收到以后，应该重定向到登录页要求用户重新登陆。axios 拦截器。</p>
<h2 id="如何使用原生-Node-js-操做-cookie？"><a href="#如何使用原生-Node-js-操做-cookie？" class="headerlink" title="如何使用原生 Node.js 操做 cookie？"></a>如何使用原生 Node.js 操做 cookie？</h2><ul>
<li>获取 cookie： req.headers.cookie</li>
<li>设置 cookie： res.writeHead(200, { ‘Set-Cookie’: ‘myCookie&#x3D;test’, ‘Content-Type’: ‘text&#x2F;plain’ })</li>
</ul>
<h2 id="nextTick-和-setImmediate-的区别是什么？"><a href="#nextTick-和-setImmediate-的区别是什么？" class="headerlink" title="nextTick 和 setImmediate 的区别是什么？"></a>nextTick 和 setImmediate 的区别是什么？</h2><p>nextTick 和 setImmediate 都是延迟加载。但是 nextTick 是放在当前队列的最后一个执行，setImmediate 是在下一个队列的队首执行</p>
<h2 id="koa-和-express-的区别"><a href="#koa-和-express-的区别" class="headerlink" title="koa 和 express 的区别"></a>koa 和 express 的区别</h2><ul>
<li>最大的区别在于语法，experss 的异步采用的是回调函数的形式，而 koa1 支持 generator + yeild，koa2 支持 await&#x2F;async，无疑更加优雅。</li>
<li>中间件的区别，koa 采用洋葱模型，进去顺序执行，出去反向执行，支持 context 传递数据 express 本身无洋葱模型，需要引入插件，不支持 context express 的中间件中执行异步函数，执行顺序不会按照洋葱模型，异步的执行结果有可能被放到最后，response 之前。 这是由于，其中间件执行机制，递归回调中没有等待中间件中的异步函数执行完毕，就是没有 await 中间件异步函数</li>
<li>集成度区别 express 内置了很多中间件，集成度高，使用省心， koa 轻量简洁，容易定制</li>
</ul>
<h2 id="koa-中间件的实现原理"><a href="#koa-中间件的实现原理" class="headerlink" title="koa 中间件的实现原理"></a>koa 中间件的实现原理</h2><ol>
<li>每个中间件默认接受两个参数，第一个参数是 Context 对象，第二个参数是 next 函数。只要调用 next 函数，就可以把执行权转交给下一个中间件。</li>
<li>如果中间件内部没有调用 next 函数，那么执行权就不会传递下去。</li>
<li>多个中间件会形成一个栈结构，以“先进后出”的顺序执行。整个过程就像，先是入栈，然后出栈的操作。</li>
</ol>
<h2 id="图片上传到服务器的过程"><a href="#图片上传到服务器的过程" class="headerlink" title="图片上传到服务器的过程"></a>图片上传到服务器的过程</h2><p>Multer 是一个 node.js 中间件，用于处理 <code>multipart/form-data</code> 类型的表单数据，它主要用于上传文件。</p>
<p><strong>注意</strong>: Multer 不会处理任何非 <code>multipart/form-data</code> 类型的表单数据。</p>
<p><code>npm install --save multer</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前后端分离-前端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;kerwinfile&#x27;</span>, file.<span class="property">file</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">http.<span class="title function_">post</span>(<span class="string">&#x27;/api/upload&#x27;</span>, params, config).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">imgpath</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span> + res.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Multer 会添加一个 <code>body</code> 对象 以及 <code>file</code> 或 <code>files</code> 对象 到 express 的 <code>request</code> 对象中。 <code>body</code> 对象包含表单的文本域信息，<code>file</code> 或 <code>files</code> 对象包含对象表单上传的文件信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前后端分离-后端</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;kerwinfile&#x27;</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="什么是服务端渲染，服务端渲染的优点？"><a href="#什么是服务端渲染，服务端渲染的优点？" class="headerlink" title="什么是服务端渲染，服务端渲染的优点？"></a>什么是服务端渲染，服务端渲染的优点？</h2><ul>
<li>服务端渲染：页面渲染过程是在服务端完成，最终的 HTML 字符串，直接通过请求发送给客户端。</li>
<li>服务器端渲染的优势就是利于 SEO 优化，首屏加载快，因为客户端接收到的是完整的 HTML 页面。</li>
</ul>
<h2 id="Node-js-优缺点以及适用场景"><a href="#Node-js-优缺点以及适用场景" class="headerlink" title="Node.js 优缺点以及适用场景"></a>Node.js 优缺点以及适用场景</h2><p>优点:</p>
<ul>
<li>Node.js 采用事件驱动、异步编程，为网络服务而设计。简单易学，可以很快上手做后端设计。</li>
<li>Node.js 非阻塞模式的 IO 处理给 Node.js 带来在相对低系统资源耗用下的高性能与出众的负载能力，非常适合用作依赖其它 IO 资源的中间层服务。</li>
<li>Node.js 轻量高效，可以认为是数据密集型分布式部署环境下的实时应用系统的完美解决方案。</li>
</ul>
<p>缺点:</p>
<ul>
<li>单线程，可靠性低，一旦这个进程崩掉，那么整个 web 服务就崩掉了。</li>
<li>开源组件库质量参差不齐，更新快，向下不兼容</li>
<li>不适合做企业级应用开发，特别是复杂业务逻辑的，代码不好维护，事务支持不是很好。</li>
</ul>
<p>适用场景:</p>
<ul>
<li>大量 Ajax 请求的应用，例如个性化应用，每个用户看到的页面都不一样，需要在页面加载的时候发起 Ajax 请求，NodeJS 能响应大量的并发请求。</li>
<li>实时 ：如在线聊天，实时通知推送等等</li>
<li>工具类应用：海量的工具，小到前端压缩部署，大到桌面图形界面应用程序</li>
<li>总而言之，NodeJS 适合运用在高并发、I&#x2F;O 密集、少量业务逻辑的场景。</li>
</ul>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>面试题</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - 工程化&amp;代码管理</title>
    <url>/2023/08/interview-fontend-project/</url>
    <content><![CDATA[<h2 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h2><p>git init 初始化仓库</p>
<p>git status 查看当前各个区域的代码状态。</p>
<p>git log 查看 commit 记录</p>
<span id="more"></span>

<p>git reflog 查看完整记录</p>
<p>git add 添加工作区代码到暂存区</p>
<p>Git commit 暂存区代码的提交</p>
<p>git reset 代码的版本回退</p>
<p>git stash 将暂存处代码收起来</p>
<p>git stash pop 将收起来的暂存区的代码释放出来</p>
<p>Git tag 可以打标签</p>
<p>Git branch 基于当前分支创建一个分支</p>
<p>git checkout 切换分支</p>
<p>git merge 合并分支</p>
<p>git remote add origin 添加远端仓库地址</p>
<p>git clone 克隆仓库</p>
<p>git pull 下拉对应分支代码</p>
<p>git push 上传对应分支代码</p>
<h2 id="工作中都怎么用-git"><a href="#工作中都怎么用-git" class="headerlink" title="工作中都怎么用 git"></a>工作中都怎么用 git</h2><p>公司中每一个项目都会有一个对应的远端仓库（gitLab），我们需要创建账号并配置权限。</p>
<p>一般公司会有几个主要分支，分别对应 4 个环境，当代码更新的时候会通过流水线自动部署到对应的环境：</p>
<ol>
<li><p>发布分支（prod、master）这个分支代码对应的就是线上的代码</p>
</li>
<li><p>UAT 分支（uat），这个分支上的代码对应的是公司内部演示用的分支</p>
</li>
<li><p>TEST 分支（test），这个分支的代码是用于测试</p>
</li>
<li><p>DEV 分支（dev），研发自测分支</p>
</li>
</ol>
<p>正常功能开发或者 bug 修复， 从 dev 分支拉取代码，进行开发就可以。</p>
<p>如果是解决线上 bug，应该从 master 拉取一个分支（hotfix__）, 然后开发完成后将其合并到 test 或者 uat，测试没有问题后，将其合并到 master。还要将 hotfix 上对应的 commit 合并到 dev 分支， 专业 dev 分支也就修复了这个 bug。</p>
<p>如果当前版本代码需要回退（功能不做了，要么要去先着急干别的）， 执行 git reset –hard， 再回到当前的 commit 也是 git reset 只不过需要注意，此时要通过 git reflog 来查看时间最后的一次 commit。</p>
<h2 id="sass-和-scss-的区别"><a href="#sass-和-scss-的区别" class="headerlink" title="sass 和 scss 的区别"></a>sass 和 scss 的区别</h2><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目。</p>
<p>scss 只是 sass 的一个语言版本，.scss 文件的特点是层级靠{}来区分，.sass 文件的特点的层级靠缩进来区分</p>
<h2 id="webpack-理解"><a href="#webpack-理解" class="headerlink" title="webpack 理解"></a>webpack 理解</h2><p>webpack 就是一个模块化的打包工具。而且能将浏览器不认识的语言，进行编译分析，最终打包生成浏览器认识的语言（需要配置相关 loader 和插件）。</p>
<h2 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h2><p>webpack 包含 mode 模式、entry 入口、output 出口、plugins 插件、loader、resolve、devServer 开发服务器相关的基本配置。</p>
<p>在 webpack 中可以通过多入口的配置，每个入口都会去查询对应的依赖关系图，进行单独的代码。</p>
<p>在模块化开发过程中往往会将各种不同类型的文件都看做是模块来进行互相导入导出，比如将图片、css、sass 之类的文件都可以导入到 js 文件中，但是在打包的过程中需要将这些文件都寻找到然后单独的分离出去，这样就需要用到对应的 loader 来进行文件处理，不同的文件、不同的 loader，处理方式也不一样。</p>
<p>比如 css 文件可以利用 style-loader 将其代码生成 style 标签放入到 head 中，也可以利用 minicssextra 插件中 loader 将其抽离成 css 文件。</p>
<p>img 文件可以利用 url-loader 和 file-loader 对其进行 base64 的转化或者单独抽出。</p>
<h2 id="是否熟知-webpack-代码分割"><a href="#是否熟知-webpack-代码分割" class="headerlink" title="是否熟知 webpack 代码分割"></a>是否熟知 webpack 代码分割</h2><p>对于单页面应用，为了加快首页加载，就需要进行代码分隔。</p>
<p>组件模块化导入的时候可以采用懒加载的形式，就会单独打包对应的代码。</p>
<p>有时候我们想把某个路由下的所有组件都打包在同个异步块（chunk）中。只需要使用命名 chunk，一个特殊的注释语法来提供 chunk name（需要 Webpack ＞ 2.4）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserDetails.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDashboard</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserDashboard.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfileEdit</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserProfileEdit.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="webpack-4-大核心理念，-编译原理"><a href="#webpack-4-大核心理念，-编译原理" class="headerlink" title="webpack 4 大核心理念， 编译原理"></a>webpack 4 大核心理念， 编译原理</h2><p>entry,output , loaders , pluguins<br>​ 一切皆为模块，由于 webpack 只支持 js 文件，所以需要用 loader 转换为 webpack 支持的模块，其中 plugin 用于扩张 webpack 的功能，在 webpack 构建生命周期的过程中，在合适的时机做了合适的事情。</p>
<h2 id="webapck-构建优化实战-打包时间过长，-可以优化时间短点-20s"><a href="#webapck-构建优化实战-打包时间过长，-可以优化时间短点-20s" class="headerlink" title="webapck 构建优化实战 (打包时间过长， 可以优化时间短点 20s)"></a>webapck 构建优化实战 (打包时间过长， 可以优化时间短点 20s)</h2><ol>
<li>提取公共库， 避免重复引用。 使用 DllPlugin，把第三方库文件分离出来单独编译，并且缓存; 极大的减少业务页面的编译时间。dll 方式也就是通过配置，告诉 webpack 指定库在项目中的位置，从而直接引入，不将其打包在内。</li>
<li>happypack, 多线程解析文件，如 babel-loader 等耗时较长的。还可以配合 cache-loader 使用。</li>
<li>缓存 cache-loader</li>
<li>loaders 应尽可能配置解析路径 include 参数，排除路径 exclude 参数， 减少解析时查询范围。</li>
<li>dev 阶段 devtool 设置成 cheap-module-eval-source-map， 已经能满足调试需求， 编译能更快。</li>
<li>product 阶段 去掉 source-map</li>
</ol>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>工程化</tag>
        <tag>代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 - 前端 - Vue</title>
    <url>/2023/08/interview-fontend-vue/</url>
    <content><![CDATA[<h2 id="解释单向数据流和双向数据绑定"><a href="#解释单向数据流和双向数据绑定" class="headerlink" title="解释单向数据流和双向数据绑定"></a>解释单向数据流和双向数据绑定</h2><p>对于 Vue 来说，组件之间的数据传递具有单向数据流这样的特性称为单向数据流，单向数据流（Unidirectional data flow）方式使用一个上传数据流和一个下传数据流进行双向数据通信，两个数据流之间相互独立，单向数据流指只能从一个方向来修改状态。</p>
<span id="more"></span>

<blockquote>
<p>人话：父组件数据传到子组件，这个数据流是单向的。子组件通过事件机制把数据传给父组件，这个数据流也是单向的。这两个数据流没有关联。</p>
</blockquote>
<p>而双向数据绑定即为当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化，两个数据流之间互为影响。</p>
<h2 id="Object-defineProperty-有什么缺点"><a href="#Object-defineProperty-有什么缺点" class="headerlink" title="Object.defineProperty 有什么缺点"></a>Object.defineProperty 有什么缺点</h2><ol>
<li>无法监听 es6 的 Set、Map 变化；</li>
<li>无法监听 Class 类型的数据；</li>
<li>属性的新加或者删除也无法监听；</li>
<li>数组元素的增加和删除也无法监听。</li>
</ol>
<h2 id="对-MVC，MVP，MVVM-的理解"><a href="#对-MVC，MVP，MVVM-的理解" class="headerlink" title="对 MVC，MVP，MVVM 的理解"></a>对 MVC，MVP，MVVM 的理解</h2><p><img src="/2023/08/interview-fontend-vue/image-20230215110550866.png" alt="MVC"></p>
<p><img src="/2023/08/interview-fontend-vue/image-20230215110625108.png" alt="MVP"></p>
<p><img src="/2023/08/interview-fontend-vue/image-20230215110650930.png" alt="MVVM"></p>
<p><img src="/2023/08/interview-fontend-vue/image-20230215110703001.png" alt="MVVM"></p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2023/08/interview-fontend-vue/image-20230215104416987.png" alt="生命周期"></p>
<p>使用场景：</p>
<p>mounted：发送 AJAX 请求</p>
<p>beforeDestroy: 移除事件绑定</p>
<h2 id="你知道-Vue-响应式数据原理吗？Proxy-与-Object-defineProperty-优劣对比？"><a href="#你知道-Vue-响应式数据原理吗？Proxy-与-Object-defineProperty-优劣对比？" class="headerlink" title="你知道 Vue 响应式数据原理吗？Proxy 与 Object.defineProperty 优劣对比？"></a>你知道 Vue 响应式数据原理吗？Proxy 与 Object.defineProperty 优劣对比？</h2><p>响应式原理：</p>
<p>vue 的响应式实现主要是利用了 Object.defineProperty 的方法里面的 setter 与 getter 方法的观察者模式来实现。在组件初始化时会给每一个 data 属性注册 getter 和 setter，然后再 new 一个自己的 Watcher 对象，此时 watcher 会立即调用组件的 render 函数去生成虚拟 DOM。在调用 render 的时候，就会需要用到 data 的属性值，此时会触发 getter 函数，将当前的 Watcher 函数注册进 sub 里。当 data 属性发生改变之后，就会遍历 sub 里所有的 watcher 对象，通知它们去重新渲染组件。</p>
<p>proxy 的优势如下：</p>
<p>Proxy 可以直接监听对象而非属性，可以直接监听数组的变化；<br>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；<br>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</p>
<p>Object.defineProperty 的优势如下:</p>
<p>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill(垫片)来弥补</p>
<h2 id="Composition-API-的出现带来哪些新的开发体验，为啥需要这个？"><a href="#Composition-API-的出现带来哪些新的开发体验，为啥需要这个？" class="headerlink" title="Composition API 的出现带来哪些新的开发体验，为啥需要这个？"></a>Composition API 的出现带来哪些新的开发体验，为啥需要这个？</h2><ol>
<li>在 Compostion API 中时根据逻辑相关组织代码的，提高可读性和可维护性，类似于 react 的 hook 写法。</li>
<li>更好的重用逻辑代码，在 Options API 中通过 MIxins 重用逻辑代码，容易发生命名冲突且关系不清。</li>
<li>解决在生命周期函数经常包含不相关的逻辑，但又不得不把相关逻辑分离到了几个不同方法中的问题，如在 mounted 中设置定时器，但需要在 destroyed 中来清除定时器，将同一功能的代码拆分到不同的位置，造成后期代码维护的困难。</li>
</ol>
<h2 id="对比-jQuery，Vue-有什么不同"><a href="#对比-jQuery，Vue-有什么不同" class="headerlink" title="对比 jQuery，Vue 有什么不同"></a>对比 jQuery，Vue 有什么不同</h2><p>jQuery 专注视图层，通过直接操作 DOM 去实现页面的一些逻辑渲染；Vue 专注于数据层，通过数据的双向绑定，最终表现在 DOM 层面，减少了 DOM 操作。Vue 使用了组件化思想，使得项目子集职责清晰，提高了开发效率，方便重复利用，便于协同开发。Í</p>
<h2 id="如何再-Vue-的单文件组件里的样式定义全局-CSS？"><a href="#如何再-Vue-的单文件组件里的样式定义全局-CSS？" class="headerlink" title="如何再 Vue 的单文件组件里的样式定义全局 CSS？"></a>如何再 Vue 的单文件组件里的样式定义全局 CSS？</h2><p>在 style 标签上不加上 scoped 的属性，默认为全局 css 样式。</p>
<h2 id="说一下-root，-parent，-refs"><a href="#说一下-root，-parent，-refs" class="headerlink" title="说一下$root，$parent，$refs"></a>说一下$root，$parent，$refs</h2><p>$root，和$parent 都能访问父组件的属性和方法，区别在于如果存在多级子组件，通过 parent 访问得到的是它最近一级的父组件，通过 root 访问得到的是根父组件。通过在子组件标签定义 ref 属性，在父组件中可以使用$refs 访问子组件实例。</p>
<h2 id="Vue-中怎么自定义指令"><a href="#Vue-中怎么自定义指令" class="headerlink" title="Vue 中怎么自定义指令"></a>Vue 中怎么自定义指令</h2><p>通过 directive 来自定义指令，自定义指令分为全局指令和局部指令，自定义指令也有几个的钩子函数，常用的有 bind 和 update，当 bind 和 update 时触发相同行为，而不关心其它的钩子时可以简写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：Vue 指定目的是优雅地操作 DOM 元素。</p>
</blockquote>
<h2 id="Vue-中怎么自定义过滤器-vue3-不支持"><a href="#Vue-中怎么自定义过滤器-vue3-不支持" class="headerlink" title="Vue 中怎么自定义过滤器 (vue3 不支持)"></a>Vue 中怎么自定义过滤器 (vue3 不支持)</h2><p>通过 filter 来定义过滤器，过滤器分为全局和局部过滤器，过滤器的主体为一个普通的函数，来对数据进行处理，可以传递参数。当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在 `v-bind` 中 --&gt;</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">filters: &#123; capitalize: function (value) &#123; if (!value) return &#x27;&#x27; value = value.toString() return</span><br><span class="line">value.charAt(0).toUpperCase() + value.slice(1) &#125; &#125; Vue.filter(&#x27;capitalize&#x27;, function (value) &#123; if (!value) return &#x27;&#x27;</span><br><span class="line">value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-等单页面应用的优缺点"><a href="#Vue-等单页面应用的优缺点" class="headerlink" title="Vue 等单页面应用的优缺点"></a>Vue 等单页面应用的优缺点</h2><p>优点:</p>
<ol>
<li>单页应用的内容的改变不需要重新加载整个页面，web 应用更具响应性和更令人着迷。</li>
<li>单页应用没有页面之间的切换，就不会出现“白屏现象”,也不会出现假死并有“闪烁”现象</li>
<li>单页应用相对服务器压力小，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍。</li>
<li>良好的前后端分离。后端不再负责模板渲染、输出页面工作，后端 API 通用化，即同一套后端程序代码，不用修改就可以用于 Web 界面、手机、平板等多种客户端。</li>
</ol>
<p>缺点:</p>
<ol>
<li>首次加载耗时比较多。</li>
<li>SEO 问题，不利于百度，360 等搜索引擎收录。</li>
<li>容易造成 Css 命名冲突。</li>
<li>前进、后退、地址栏、书签等，都需要程序进行管理，页面的复杂度很高，需要一定的技能水平和开发成本高。</li>
</ol>
<h2 id="Vue-router-使用-params-与-query-传参有什么区别"><a href="#Vue-router-使用-params-与-query-传参有什么区别" class="headerlink" title="Vue-router 使用 params 与 query 传参有什么区别"></a>Vue-router 使用 params 与 query 传参有什么区别</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法上</span></span><br><span class="line"><span class="number">1</span>：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>和<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示上</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>：params是路由的一部分,必须要有。query是拼接在url后面的参数</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url /users/eduardo</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-中-keep-alive-的作用"><a href="#Vue-中-keep-alive-的作用" class="headerlink" title="Vue 中 keep-alive 的作用"></a>Vue 中 keep-alive 的作用</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。一旦使用 keepalive 包裹组件，此时 mouted，created 等钩子函数只会在第一次进入组件时调用，当再次切换回来时将不会调用。此时如果我们还想在每次切换时做一些事情，就需要用到另外的周期函数，actived 和 deactived，这两个钩子函数只有被 keepalive 包裹后才会调用。</p>
<h2 id="Vue-如何实现单页面应用"><a href="#Vue-如何实现单页面应用" class="headerlink" title="Vue 如何实现单页面应用"></a>Vue 如何实现单页面应用</h2><p>通常的 url 地址由以下内容构成：协议名 域名 端口号 路径 参数 哈希值，当哈希值改变，页面不会发生跳转，单页面应用就是利用了这一点，给 window 注册 onhashchange 事件，当哈希值改变时通过 location.hash 就能获得相应的哈希值，然后就能跳到相应的页面。</p>
<p>1.hash 通过监听浏览器的 onhashchange()事件变化，查找对应的路由规则</p>
<p>2.history 原理： 利用 H5 的 history 中新增的两个 API pushState() 和 replaceState() 和一个事件 onpopstate 监听 URL 变化</p>
<h2 id="说出至少-4-种-Vue-当中的指令和它的用法？"><a href="#说出至少-4-种-Vue-当中的指令和它的用法？" class="headerlink" title="说出至少 4 种 Vue 当中的指令和它的用法？"></a>说出至少 4 种 Vue 当中的指令和它的用法？</h2><p>v-if(判断是否隐藏，用来判断元素是否创建)<br>v-show(元素的显示隐藏，类似 css 中的 display 的 block 和 hidden)<br>v-for(把数据遍历出来)<br>v-bind(绑定属性)<br>v-model(实现双向绑定)</p>
<h2 id="如何实现一个路径渲染多个组件？"><a href="#如何实现一个路径渲染多个组件？" class="headerlink" title="如何实现一个路径渲染多个组件？"></a>如何实现一个路径渲染多个组件？</h2><p>可以通过命名视图(router-view)，它容许同一界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。通过设置 components 即可同时渲染多个组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LeftSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123; history: createWebHashHistory(), routes: [ &#123; path: &#x27;/&#x27;, components: &#123; default: Home, //</span><br><span class="line">LeftSidebar: LeftSidebar 的缩写 LeftSidebar, // 它们与 `<span class="tag">&lt;<span class="name">router-view</span></span></span><br><span class="line"><span class="tag">  &gt;</span>` 上的 `name` 属性匹配 RightSidebar, &#125;, &#125;, ], &#125;)&lt;/router-view</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h2 id="如何实现多个路径共享一个组件？"><a href="#如何实现多个路径共享一个组件？" class="headerlink" title="如何实现多个路径共享一个组件？"></a>如何实现多个路径共享一个组件？</h2><p>只需将多个路径的 component 字段的值设置为同一个组件即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="如何监测动态路由的变化"><a href="#如何监测动态路由的变化" class="headerlink" title="如何监测动态路由的变化"></a>如何监测动态路由的变化</h2><p>可以通过 watch 方法来对$route 进行监听，或者通过导航守卫的钩子函数 beforeRouteUpdate 来监听它的变化。</p>
<h2 id="vue-router-中的-router-link-上-v-slot-属性怎么用？"><a href="#vue-router-中的-router-link-上-v-slot-属性怎么用？" class="headerlink" title="vue-router 中的 router-link 上 v-slot 属性怎么用？"></a>vue-router 中的 router-link 上 v-slot 属性怎么用？</h2><p>router-link 通过一个作用域插槽暴露底层的定制能力。这是一个更高阶的 API，主要面向库作者，但也可以为开发者提供便利，多数情况用在一个类似 NavLink 这样的自定义组件里。</p>
<p>有时我们可能想把激活的 class 应用到一个外部元素而不是 <code>&lt;a&gt;</code> 标签本身，这时你可以在一个 router-link 中包裹该元素并使用 v-slot 属性来创建链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/foo&quot;</span> <span class="attr">custom</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; href, route, navigate, isActive, isExactActive &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive &amp;&amp; &#x27;router-link-active&#x27;, isExactActive &amp;&amp; &#x27;router-link-exact-active&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;href&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span>&#123;&#123; route.fullPath &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue-如何去除-url-中的"><a href="#Vue-如何去除-url-中的" class="headerlink" title="Vue 如何去除 url 中的 #"></a>Vue 如何去除 url 中的 <code>#</code></h2><p>将路由模式改为 history</p>
<p>由于我们的应用是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问 <a href="https://example.com/user/id%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA">https://example.com/user/id，就会得到一个</a> 404 错误。这就尴尬了。</p>
<p>不用担心：要解决这个问题，你需要做的就是在你的服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">history</span>(&#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="string">&#x27;/index.html&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">); <span class="comment">//注意放在所有的接口后面</span></span><br></pre></td></tr></table></figure>

<h2 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="$route 和 $router 的区别"></a>$route 和 $router 的区别</h2><p>$route用来获取路由的信息的，它是路由信息的一个对象，里面包含路由的一些基本信息，包括name、meta、path、hash、query、params、fullPath、matched、redirectedFrom等。而$router 主要是用来操作路由的，它是 VueRouter 的实例，包含了一些路由的跳转方法 push，go, replace，钩子函数等</p>
<h2 id="Vue-路由守卫"><a href="#Vue-路由守卫" class="headerlink" title="Vue 路由守卫"></a>Vue 路由守卫</h2><p>vue-router 提供的导航守卫主要用来对路由的跳转进行监控，控制它的跳转或取消，路由守卫有全局的, 单个路由独享的, 或者组件级的。导航钩子有 3 个参数：</p>
<ol>
<li>to:即将要进入的目标路由对象；</li>
<li>from:当前导航即将要离开的路由对象；</li>
<li>next ：调用该方法后，才能进入下一个钩子函数（afterEach）。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 检查用户是否已登录</span></span><br><span class="line">    !isAuthenticated &amp;&amp;</span><br><span class="line">    <span class="comment">// ❗️ 避免无限重定向</span></span><br><span class="line">    to.<span class="property">name</span> !== <span class="string">&#x27;Login&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 将用户重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Vue-路由实现的底层原理"><a href="#Vue-路由实现的底层原理" class="headerlink" title="Vue 路由实现的底层原理"></a>Vue 路由实现的底层原理</h2><p>在 Vue 中利用数据劫持 defineProperty 在原型 prototype 上初始化了一些 getter,分别是 router 代表当前 Router 的实例 、 route 代表当前 Router 的信息。在 install 中也全局注册了 router-view,router-link,其中的 Vue.util.defineReactive, 这是 Vue 里面观察者劫持数据的方法，劫持_route，当_route 触发 setter 方法的时候，则会通知到依赖的组件。</p>
<p>接下来在 init 中，会挂载判断是路由的模式，是 history 或者是 hash,点击行为按钮，调用 hashchange 或者 popstate 的同时更_route,_route 的更新会触发 route-view 的重新渲染。</p>
<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>Vue Router 支持开箱即用的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports">动态导入</a>，这意味着你可以用动态导入代替静态导入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="comment">// import UserDetails from &#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="用过插槽吗？用的是具名插槽还是匿名插槽"><a href="#用过插槽吗？用的是具名插槽还是匿名插槽" class="headerlink" title="用过插槽吗？用的是具名插槽还是匿名插槽"></a>用过插槽吗？用的是具名插槽还是匿名插槽</h2><p>用过，都使用过。插槽相当于预留了一个位置，可以将我们书写在组件内的内容放入，写一个插槽就会将组件内的内容替换一次，两次则替换两次。为了自定义插槽的位置我们可以给插槽取名，它会根据插槽名来插入内容，一一对应。</p>
<p>举例来说，这里有一个 <code>&lt;FancyButton&gt;</code> 组件，可以像这样使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FancyButton</span>&gt;</span></span><br><span class="line">  Click me!</span><br><span class="line">  <span class="comment">&lt;!-- 插槽内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FancyButton</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 <FancyButton> 的模板是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;fancy-btn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插槽出口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue-loader-解释一下"><a href="#Vue-loader-解释一下" class="headerlink" title="Vue-loader 解释一下"></a>Vue-loader 解释一下</h2><p>解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。</p>
<h2 id="Vue-和-React-中-diff-算法区别"><a href="#Vue-和-React-中-diff-算法区别" class="headerlink" title="Vue 和 React 中 diff 算法区别"></a>Vue 和 React 中 diff 算法区别</h2><p>vue 和 react 的 diff 算法，都是忽略跨级比较，只做同级比较。vue diff 时调动 patch 函数，参数是 vnode 和 oldVnode，分别代表新旧节点。</p>
<ol>
<li><p>vue 对比节点。当节点元素相同，但是 classname 不同，认为是不同类型的元素，删除重建，而 react 认为是同类型节点，只是修改节点属性。</p>
</li>
<li><p>vue 的列表对比，采用的是两端到中间比对的方式，而 react 采用的是从左到右依次对比的方式。当一个集合只是把最后一个节点移到了第一个，react 会把前面的节点依次移动，而 vue 只会把最后一个节点移到第一个。总体上，vue 的方式比较高效。</p>
</li>
</ol>
<h2 id="Vue-中-create-和-mount-的区别"><a href="#Vue-中-create-和-mount-的区别" class="headerlink" title="Vue 中 create 和 mount 的区别"></a>Vue 中 create 和 mount 的区别</h2><p>create 为组件初始化阶段，在此阶段主要完成数据观测(data observer)，属性和方法的运算， watch&#x2F;event 事件回调。然而，挂载阶段还没开始，此时还未生成真实的 DOM，也就无法获取和操作 DOM 元素。而 mount 主要完成从虚拟 DOM 到真实 DOM 的转换挂载，此时 html 已经渲染出来了，所以可以直接操作 dom 节点。</p>
<h2 id="axios-是什么？怎么使用？描述使用它实现登录功能的流程"><a href="#axios-是什么？怎么使用？描述使用它实现登录功能的流程" class="headerlink" title="axios 是什么？怎么使用？描述使用它实现登录功能的流程?"></a>axios 是什么？怎么使用？描述使用它实现登录功能的流程?</h2><p>axios 是请求后台资源的模块。 通过 npm install axios -S 来安装，在大多数情况下我们需要封装拦截器，在实现登录的过程中我们一般在请求拦截器中来加入 token，在响应请求器中通过判断后端返回的状态码来对返回的数据进行不同的处理。如果发送的是跨域请求，需在配置文件中 config&#x2F;index.js 进行代理配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="computed-和-watch-的区别？watch-实现原理？watch-有几种写法？"><a href="#computed-和-watch-的区别？watch-实现原理？watch-有几种写法？" class="headerlink" title="computed 和 watch 的区别？watch 实现原理？watch 有几种写法？"></a>computed 和 watch 的区别？watch 实现原理？watch 有几种写法？</h2><p>计算属性 computed :</p>
<ol>
<li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li>
<li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化</li>
<li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值</li>
<li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用 computed</li>
<li>如果 computed 属性属性值是函数，那么默认会走 get 方法；函数的返回值就是属性的属性值；在 computed 中的，属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 一个计算属性的 getter</span></span><br><span class="line">  <span class="title function_">publishedBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// `this` 指向当前组件实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>侦听属性 watch：</p>
<ol>
<li>不支持缓存，数据变，直接会触发相应的操作；</li>
<li>watch 支持异步；</li>
<li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li>
<li>当一个属性发生变化时，需要执行对应的操作；一对多；</li>
<li>监听数据必须是 data 中声明过或者父组件传递过来的 props 中的数据，当数据变化时，触发其他操作，函数有两个参数，<br>immediate：组件加载立即触发回调函数执行，<br>deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 每当 question 改变时，这个函数就会执行</span></span><br><span class="line">  <span class="title function_">question</span>(<span class="params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newQuestion.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getAnswer</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">someObject</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">      <span class="comment">// 注意：在嵌套的变更中，</span></span><br><span class="line">      <span class="comment">// 只要没有替换对象本身，</span></span><br><span class="line">      <span class="comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景举例：</p>
<ol>
<li>在计算购物车总金额的时候，可以用 computed。它支持缓存，页面上显示的各处总金额都只需要计算一次。</li>
<li>在有回调函数主要处理的时候，可以用 watch。它支持异步。</li>
</ol>
<h2 id="Vue-forceUpdate-的原理"><a href="#Vue-forceUpdate-的原理" class="headerlink" title="Vue $forceUpdate 的原理"></a>Vue $forceUpdate 的原理</h2><p>作用：</p>
<p>迫使 <code>Vue</code> 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p>
<p>内部原理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$forceUpdate</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">vm</span>: <span class="title class_">Component</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_watcher</span>) &#123;</span><br><span class="line">    vm.<span class="property">_watcher</span>.<span class="title function_">update</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实例需要重新渲染是在依赖发生变化的时候会通知 watcher，然后通知 watcher 来调用 update 方法，就是这么简单。</p>
<h2 id="v-for-key"><a href="#v-for-key" class="headerlink" title="v-for key"></a>v-for key</h2><ul>
<li>key 是为 Vue 中的 vnode(虚拟 DOM) 标记的唯一 id,通过这个 key,我们的 diff 操作可以更准确、更快速</li>
<li>diff 算法的过程中,先会进行新旧节点的首尾交叉对比,当无法匹配的时候会用新节点的 key 与旧节点进行比对,然后超出差异.</li>
</ul>
<p>diff 程可以概括为：oldCh 和 newCh 各有两个头尾的变量 StartIdx 和 EndIdx，它们的 2 个变量相互比较，一共有 4 种比较方式。如果 4 种比较都没匹配，如果设置了 key，就会用 key 进行比较，在比较的过程中，变量会往中间靠，一旦 StartIdx&gt;EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较,这四种比较方式就是首、尾、旧尾新头、旧头新尾.<br>准确: 如果不加 key,那么 vue 会选择复用节点(Vue 的就地更新策略),导致之前节点的状态被保留下来,会产生一系列的 bug. 快速: key 的唯一性可以被 Map 数据结构充分利用,相比于遍历查找的时间复杂度<code>O(n)</code>,<code>Map</code>的时间复杂度仅仅为<code>O(1)</code></p>
<blockquote>
<p>人话：在虚拟 DOM 构建成真实 DOM 时，Vue 会根据虚拟 DOM 的 key 判断，该 DOM 是否需要整个重新构建。如果 key 没变，则不整个重新构建，提高效率。</p>
</blockquote>
<h2 id="为什么要设置-key-值，可以用-index-吗？为什么不能？"><a href="#为什么要设置-key-值，可以用-index-吗？为什么不能？" class="headerlink" title="为什么要设置 key 值，可以用 index 吗？为什么不能？"></a>为什么要设置 key 值，可以用 index 吗？为什么不能？</h2><p>vue 中列表循环需加:key&#x3D;”唯一标识” 唯一标识可以是 item 里面 id index 等，因为 vue 组件高度复用增加 Key 可以标识组件的唯一性，为了更好地区别各个组件 key 的作用主要是为了高效的更新虚拟 DOM</p>
<h2 id="diff-复杂度原理及具体过程画图"><a href="#diff-复杂度原理及具体过程画图" class="headerlink" title="diff 复杂度原理及具体过程画图"></a>diff 复杂度原理及具体过程画图</h2><p>diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。</p>
<p><img src="/2023/08/interview-fontend-vue/image-20230216133653028.png" alt="diff过程"></p>
<blockquote>
<p>人话：先比较新老虚拟 DOM 是否是同一类组件。如果不是，则整个老组件移除，构建新组件；如果是则继续比较新老虚拟 DOM 的子组件。如果是同一类组件，但组件内容不一样，则更新组件内容。如果组件里有数组子组件，则会考虑增删改。</p>
</blockquote>
<p>diff 算法有两个比较显著的特点：</p>
<p>1、比较只会在同层级进行, 不会跨层级比较。</p>
<p>2、在 diff 比较的过程中，循环从两边向中间收拢。</p>
<p>diff 流程： 首先定义 oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 分别是新老两个 VNode 的两边的索引。</p>
<p>接下来是一个 while 循环，在这过程中，oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 会逐渐向中间靠拢。while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。</p>
<p>while 循环中会遇到四种情况：</p>
<p>情形一：当新老 VNode 节点的 start 是同一节点时，直接 patchVnode 即可，同时新老 VNode 节点的开始索引都加 1。</p>
<p>情形二：当新老 VNode 节点的 end 是同一节点时，直接 patchVnode 即可，同时新老 VNode 节点的结束索引都减 1。</p>
<p>情形三：当老 VNode 节点的 start 和新 VNode 节点的 end 是同一节点时，这说明这次数据更新后 oldStartVnode 已经跑到了 oldEndVnode 后面去了。这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldEndVnode 的后面，同时老 VNode 节点开始索引加 1，新 VNode 节点的结束索引减 1。</p>
<p>情形四：当老 VNode 节点的 end 和新 VNode 节点的 start 是同一节点时，这说明这次数据更新后 oldEndVnode 跑到了 oldStartVnode 的前面去了。这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldStartVnode 的前面，同时老 VNode 节点结束索引减 1，新 VNode 节点的开始索引加 1。</p>
<p>while 循环的退出条件是直到老节点或者新节点的开始位置大于结束位置。</p>
<p>情形一：如果在循环中，oldStartIdx 大于 oldEndIdx 了，那就表示 oldChildren 比 newChildren 先循环完毕，那么 newChildren 里面剩余的节点都是需要新增的节点，把[newStartIdx, newEndIdx]之间的所有节点都插入到 DOM 中</p>
<p>情形二：如果在循环中，newStartIdx 大于 newEndIdx 了，那就表示 newChildren 比 oldChildren 先循环完毕，那么 oldChildren 里面剩余的节点都是需要删除的节点，把[oldStartIdx, oldEndIdx]之间的所有节点都删除</p>
<h2 id="Vue-组件中的-Data-为什么是函数，根组件却是对象呢？"><a href="#Vue-组件中的-Data-为什么是函数，根组件却是对象呢？" class="headerlink" title="Vue 组件中的 Data 为什么是函数，根组件却是对象呢？"></a>Vue 组件中的 Data 为什么是函数，根组件却是对象呢？</h2><p>综上可知，如果 data 是一个函数的话，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果。</p>
<p>所以说 vue 组件的 data 必须是函数。这都是因为 js 的特性带来的，跟 vue 本身设计无关。</p>
<h2 id="Vue-的组件通信"><a href="#Vue-的组件通信" class="headerlink" title="Vue 的组件通信"></a>Vue 的组件通信</h2><p>1、props 和$emit</p>
<p>父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件</p>
<p>2、$attrs和$listeners</p>
<p>3、中央事件总线 bus</p>
<p>上面两种方式处理的都是父子组件之间的数据传递，而如果两个组件不是父子关系呢？这种情况下可以使用中央事件总线的方式。新建一个 Vue 事件 bus 对象，然后通过 bus.$emit触发事件，bus.$on 监听触发的事件。</p>
<p>4、provide 和 inject</p>
<p>父组件中通过 provider 来提供变量，然后在子组件中通过 inject 来注入变量。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。而不是局限于只能从当前父组件的 prop 属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p>
<p>5、v-model</p>
<p>父组件通过 v-model 传递值给子组件时，会自动传递一个 value 的 prop 属性，在子组件中通过 this.$emit(‘input’,val)自动修改 v-model 绑定的值</p>
<p>6、$parent和$children</p>
<p>7、boradcast 和 dispatch</p>
<p>8、vuex 处理组件之间的数据交互 如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex 的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p>
<h2 id="什么情况下使用-Vuex"><a href="#什么情况下使用-Vuex" class="headerlink" title="什么情况下使用 Vuex"></a>什么情况下使用 Vuex</h2><p>如果应用够简单，最好不要使用 Vuex，一个简单的 store 模式即可，需要构建一个中大型单页应用时，使用 Vuex 能更好地在组件外部管理状态。</p>
<h2 id="Vuex-可以直接修改-state-的值吗？"><a href="#Vuex-可以直接修改-state-的值吗？" class="headerlink" title="Vuex 可以直接修改 state 的值吗？"></a>Vuex 可以直接修改 state 的值吗？</h2><p>可以直接修改，但是极其不推荐，state 的修改必须在 mutation 来修改，否则无法被 devtool 所监测，无法监测数据的来源，无法保存状态快照，也就无法实现时间漫游&#x2F;回滚之类的操作。</p>
<h2 id="为什么-Vuex-的-mutation-不能做异步操作"><a href="#为什么-Vuex-的-mutation-不能做异步操作" class="headerlink" title="为什么 Vuex 的 mutation 不能做异步操作"></a>为什么 Vuex 的 mutation 不能做异步操作</h2><p>Vuex 中所有的状态更新的唯一途径都是 mutation，异步操作通过 Action 来提交 mutation 实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。每个 mutation 执行完成后都会对应到一个新的状态变更，这样 devtools 就可以打个快照存下来，否则无法被 devtools 所监测。如果 mutation 支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</p>
<h2 id="怎么修改-Vuex-中的状态？Vuex-中有哪些方法"><a href="#怎么修改-Vuex-中的状态？Vuex-中有哪些方法" class="headerlink" title="怎么修改 Vuex 中的状态？Vuex 中有哪些方法"></a>怎么修改 Vuex 中的状态？Vuex 中有哪些方法</h2><ul>
<li>通过<strong>this.$store.state.属性</strong> 的方法来访问状态</li>
<li>通过<strong>this.$store.commit(‘mutation 中的方法’)</strong> 来修改状态</li>
</ul>
<h2 id="Vuex-的缺点"><a href="#Vuex-的缺点" class="headerlink" title="Vuex 的缺点"></a>Vuex 的缺点</h2><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的，并且 state 中的值会伴随着浏览器的刷新而初始化，无缓存。</p>
<h2 id="什么是-Vue-nextTick-？"><a href="#什么是-Vue-nextTick-？" class="headerlink" title="什么是 Vue.nextTick()？"></a>什么是 Vue.nextTick()？</h2><p>nextTick 是在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM，意思是 等你 dom 加载完毕以后再去调用 nextTick()里面的数据内容。</p>
<h2 id="nextTick-知道吗、实现的原理是什么？是宏任务还是微任务？"><a href="#nextTick-知道吗、实现的原理是什么？是宏任务还是微任务？" class="headerlink" title="nextTick 知道吗、实现的原理是什么？是宏任务还是微任务？"></a>nextTick 知道吗、实现的原理是什么？是宏任务还是微任务？</h2><p>微任务</p>
<p>原理：nextTick 方法主要是使用了宏任务和微任务，定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空队列。</p>
<p>作用： nextTick 用于下次 Dom 更新循环结束之后执行延迟回调，在修改数据之后使用 nextTick 用于下次 Dom 更新循环结束之后执行延迟回调，在修改数据之后使用 nextTick 用于下次 Dom 更新循环结束之后执行延迟回调，在修改数据之后使用 nextTick,则可以在回调中获取更新后的 DOM。</p>
<h2 id="虚拟-dom-为什么会提高性能？"><a href="#虚拟-dom-为什么会提高性能？" class="headerlink" title="虚拟 dom 为什么会提高性能？"></a>虚拟 dom 为什么会提高性能？</h2><p>虚拟 DOM 其实就是一个 JavaScript 对象。通过这个 JavaScript 对象来描述真实 DOM，真实 DOM 的操作，一般都会对某块元素的整体重新渲染，采用虚拟 DOM 的话，当数据变化的时候，只需要局部刷新变化的位置就好了 ,</p>
<p>虚拟<code>dom</code>相当于在<code>js</code>和真实<code>dom</code>中间加了一个缓存，利用<code>dom diff</code>算法避免了没有必要的<code>dom</code>操作，从而提高性能</p>
<p><strong>具体实现步骤如下</strong></p>
<ul>
<li>用 <code>JavaScript</code> 对象结构表示 <code>DOM</code> 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中</li>
<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li>
<li>把 2 所记录的差异应用到步骤 1 所构建的真正的<code>DOM</code>树上，视图就更新</li>
</ul>
<h2 id="你做过哪些-Vue-的性能优化？"><a href="#你做过哪些-Vue-的性能优化？" class="headerlink" title="你做过哪些 Vue 的性能优化？"></a>你做过哪些 Vue 的性能优化？</h2><p>1、首屏加载优化</p>
<p>2、路由懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/home/index.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">isShowHead</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、开启服务器 Gzip</p>
<p>开启 Gzip 就是一种压缩技术，需要前端提供压缩包，然后在服务器开启压缩，文件在服务器压缩后传给浏览器，浏览器解压后进行再进行解析。首先安装 webpack 提供的<code>compression-webpack-plugin</code>进行压缩,然后在 vue.config.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> productionGzipExtensions = [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]......<span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">CompressionWebpackPlugin</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">      <span class="attr">test</span>:     <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\.(&#x27;</span> + productionGzipExtensions.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) +                 <span class="string">&#x27;)$&#x27;</span>),</span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">      <span class="attr">minRatio</span>: <span class="number">0.8</span></span><br><span class="line">       &#125;</span><br><span class="line">)]....</span><br></pre></td></tr></table></figure>

<p>4、启动 CDN 加速</p>
<p>我们继续采用 cdn 的方式来引入一些第三方资源，就可以缓解我们服务器的压力，原理是将我们的压力分给其他服务器点。</p>
<p>5、代码层面优化</p>
<ul>
<li><p>computed 和 watch 区分使用场景</p>
<p>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；<br>watch：类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>
</li>
<li><p>v-if 和 v-show 区分使用场景 v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。这里要说的优化点在于减少页面中 dom 总数，我比较倾向于使用 v-if，因为减少了 dom 数量。</p>
</li>
<li><p>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if v-for 遍历必须为 item 添加 key，循环调用子组件时添加 key，key 可以唯一标识一个循环个体，可以使用例如 item.id 作为 key 避免同时使用 v-if，v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度。</p>
</li>
</ul>
<p>6、Webpack 对图片进行压缩</p>
<p>7、避免内存泄漏</p>
<p>8、减少 ES6 转为 ES5 的冗余代码</p>
<h2 id="Vue-的常用修饰符"><a href="#Vue-的常用修饰符" class="headerlink" title="Vue 的常用修饰符"></a>Vue 的常用修饰符</h2><p><strong>一、v-model 修饰符</strong></p>
<p>1、.lazy：</p>
<p>输入框改变，这个数据就会改变，lazy 这个修饰符会在光标离开 input 框才会更新数据.</p>
<p>2、.trim：</p>
<p>输入框过滤首尾的空格.</p>
<p>3、.number：</p>
<p>先输入数字就会限制输入只能是数字，先字符串就相当于没有加 number，注意，不是输入框不能输入字符串，是这个数据是数字.</p>
<p><strong>二、事件修饰符</strong></p>
<p>4、.stop：</p>
<p>阻止事件冒泡，相当于调用了 event.stopPropagation()方法：</p>
<p>5、.prevent：</p>
<p>阻止默认行为，相当于调用了 event.preventDefault()方法，比如表单的提交、a 标签的跳转就是默认事件.</p>
<p>6、.self：</p>
<p>只有元素本身触发时才触发方法，就是只有点击元素本身才会触发。比如一个 div 里面有个按钮，div 和按钮都有事件，我们点击按钮，div 绑定的方法也会触发，如果 div 的 click 加上 self，只有点击到 div 的时候才会触发，变相的算是阻止冒泡.</p>
<p>7、.once：</p>
<p>事件只能用一次，无论点击几次，执行一次之后都不会再执行</p>
<p>8、.capture：</p>
<p>事件的完整机制是捕获-目标-冒泡，事件触发是目标往外冒泡</p>
<p>9、.sync</p>
<p>对 prop 进行双向绑定</p>
<p>10、.keyCode：</p>
<p>监听按键的指令，具体可以查看 vue 的键码对应表</p>
<h2 id="Vue-中-template-的编译过程"><a href="#Vue-中-template-的编译过程" class="headerlink" title="Vue 中 template 的编译过程"></a>Vue 中 template 的编译过程</h2><p>vue template 模板编译的过程经过 parse()生成 ast(抽象语法树),optimize 对静态节点优化，generate()生成 render 字符串 之后调用 new Watcher()函数，用来监听数据的变化，render 函数就是数据监听的回调所调用的，其结果便是重新生成 vnode。 当这个 render 函数字符串在第一次 mount、或者绑定的数据更新的时候，都会被调用，生成 Vnode。 如果是数据的更新，那么 Vnode 会与数据改变之前的 Vnode 做 diff，对内容做改动之后，就会更新到 我们真正的 DOM</p>
<h2 id="谈谈你对-Vue3-0-有什么了解？"><a href="#谈谈你对-Vue3-0-有什么了解？" class="headerlink" title="谈谈你对 Vue3.0 有什么了解？"></a>谈谈你对 Vue3.0 有什么了解？</h2><p>特点：</p>
<ol>
<li>性能比 vue2.x 快 1.2~2 倍</li>
<li>支持 tree-shaking，按需编译，体积比 vue2.x 更小</li>
<li>支持组合 API</li>
<li>更好的支持 TS</li>
<li>更先进的组件</li>
</ol>
<h3 id="性能比-vue2-x-快-1-2-2-倍如何实现的呢"><a href="#性能比-vue2-x-快-1-2-2-倍如何实现的呢" class="headerlink" title="性能比 vue2.x 快 1.2~2 倍如何实现的呢"></a>性能比 vue2.x 快 1.2~2 倍如何实现的呢</h3><p>1.diff 算法更快</p>
<p>vue2.0 是需要全局去比较每个节点的，若发现有节点发生变化后，就去更新该节点</p>
<p>vue3.0 是在创建虚拟 dom 中，会根据 DOM 的的内容会不会发生内容变化，添加静态标记， 谁有 flag！比较谁。</p>
<p>2、静态提升</p>
<p>vue2 中无论元素是否参与更新，每次都会重新创建，然后再渲染 vue3 中对于不参与更新的元素，会做静态提升，只被创建一次，在渲染时直接复用即可</p>
<p>3、事件侦听缓存</p>
<p>默认情况下，onclick 为动态绑定，所以每次都会追踪它的变化，但是因为是同一函数，没有必要追踪变化，直接缓存复用即可</p>
<p>在之前会添加静态标记 8 会把点击事件当做动态属性 会进行 diff 算法比较， 但是在事件监听缓存之后就没有静态标记了，就会进行缓存复用</p>
<h3 id="为什么-vue3-0-体积比-vue2-x-小"><a href="#为什么-vue3-0-体积比-vue2-x-小" class="headerlink" title="为什么 vue3.0 体积比 vue2.x 小"></a>为什么 vue3.0 体积比 vue2.x 小</h3><p>在 vue3.0 中创建 vue 项目 除了 vue-cli，webpack 外还有 一种创建方法是 Vite Vite 是作者开发的一款有意取代 webpack 的工具，其实现原理是利用 ES6 的 import 会发送请求去加载文件的特性，拦截这些请求，做一些预编译，省去<br>webpack 冗长的打包时间</p>
<h2 id="vue3-0-组合-API"><a href="#vue3-0-组合-API" class="headerlink" title="vue3.0 组合 API"></a>vue3.0 组合 API</h2><p>说一说 vue3.0 的组合 API 跟之前 vue2.0 在完成业务逻辑上的区别：</p>
<p>在 vue2.0 中： 主要是往 data 和 method 里面添加内容，一个业务逻辑需要什么 data 和 method 就往里面添加，而组合 API 就是 有一个自己的方法，里面有自己专注的 data 和 method。</p>
<p>再说一下组合 API 的本质是什么： 首先 composition API（组合 API） 和 Option API（vue2.0 中的 data 和 method）可以共用 composition API（组合 API）本质就是把内容添加到 Option API 中进行使用。</p>
<h2 id="ref-和-reactive-的简单理解"><a href="#ref-和-reactive-的简单理解" class="headerlink" title="ref 和 reactive 的简单理解"></a>ref 和 reactive 的简单理解</h2><ol>
<li>ref 和 reactive 都是 vue3 的监听数据的方法，本质是 proxy</li>
<li>ref 基本类型复杂类型都可以监听(我们一般用 ref 监听基本类型)，reactive 只能监听对象（arr，json）</li>
<li>ref 底层还是 reactive，ref 是对 reactive 的二次包装， ref 定义的数据访问的时候要多一个.value</li>
</ol>
<h2 id="Vuex-和-redux-有什么区别？他们的共同思想"><a href="#Vuex-和-redux-有什么区别？他们的共同思想" class="headerlink" title="Vuex 和 redux 有什么区别？他们的共同思想"></a>Vuex 和 redux 有什么区别？他们的共同思想</h2><p>区别：</p>
<ul>
<li>Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的 mutation 函数里改变 state 值就可以</li>
<li>Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 state 就可以</li>
<li>Vuex 数据流的顺序是:View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数 – store 改变(vue 检测到数据变化自动渲染)</li>
</ul>
<p>共同思想：</p>
<ul>
<li>单一的数据源</li>
<li>变化可以预测</li>
<li><code>本质上:</code>Redux 和 Vuex 都是对 MVVM 思想的服务，将数据从视图中抽离的一种方案</li>
<li><code>形式上:</code>Vuex 借鉴了 Redux，将 store 作为全局的数据中心，进行数据管理</li>
</ul>
<h2 id="简单说一下-微信小程序-与-Vue-的区别"><a href="#简单说一下-微信小程序-与-Vue-的区别" class="headerlink" title="简单说一下 微信小程序 与 Vue 的区别"></a>简单说一下 微信小程序 与 Vue 的区别</h2><p>1、生命周期：</p>
<p><code>小程序</code>的钩子函数要简单得多 。 <code>vue</code>的钩子函数在跳转新页面时，钩子函数都会触发，但是<code>小程序</code>的钩子函数，页面不同的跳转方式，触发的钩子并不一样。</p>
<p>在页面加载请求数据时，两者钩子的使用有些类似，<code>vue</code>一般会在<code>created</code>或者<code>mounted</code>中请求数据，而在<code>小程序</code>，会在<code>onLoad</code>或者<code>onShow</code>中请求数据。</p>
<p>2、数据绑定：</p>
<p>vue 动态绑定一个变量的值为元素的某个属性的时候，会在变量前面加上冒号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;imgSrc&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>小程序 绑定某个变量的值为元素属性时，会用两个大括号括起来，如果不加括号，为被认为是字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;image src=<span class="string">&quot;&#123;&#123;imgSrc&#125;&#125;&quot;</span>&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure>

<p>3、列表循环</p>
<p>4、显示与隐藏元素</p>
<p><code>vue</code>中，使用<code>v-if</code> 和<code>v-show</code>控制元素的显示和隐藏</p>
<p><code>小程序</code>中，使用<code>wx-if</code>和<code>hidden</code>控制元素的显示和隐藏</p>
<p>5、事件处理</p>
<p><code>vue</code>：使用<code>v-on:event</code>绑定事件，或者使用<code>@event</code>绑定事件</p>
<p><code>小程序</code>中，全用<code>bindtap(bind+event)</code>，或者<code>catchtap(catch+event)</code>绑定事件</p>
<p>6、数据的双向绑定</p>
<p>在<code>vue</code>中,只需要再<code>表单</code>元素上加上<code>v-model</code>,然后再绑定<code>data</code>中对应的一个值，当表单元素内容发生变化时，<code>data</code>中对应的值也会相应改变 。</p>
<p>当表单内容发生变化时，会触发表单元素上绑定的方法，然后在该方法中，通过<code>this.setData(&#123;key:value&#125;)</code>来将表单上的值赋值给<code>data</code>中的对应值 。</p>
<p>7、绑定事件传参</p>
<p>在<code>vue</code>中，绑定事件传参挺简单，只需要在触发事件的方法中，把需要传递的数据作为形参传入就可以了</p>
<p>在<code>小程序</code>中，不能直接在绑定事件的方法中传入参数，需要将参数作为属性值，绑定到元素上的<code>data-</code>属性上，然后在方法中，通过<code>e.currentTarget.dataset.*</code>的方式获取</p>
<p>8、父子组件通信</p>
<p>父组件向子组件传递数据，只需要在子组件通过<code>v-bind</code>传入一个值，在子组件中，通过<code>props</code>接收，即可完成数据的传递</p>
<p>父组件向子组件通信和<code>vue</code>类似，但是<code>小程序</code>没有通过<code>v-bind</code>，而是直接将值赋值给一个变量 在子组件<code>properties</code>中，接收传递的值</p>
<h2 id="如果你是-leader，做管理系统项目-Vue-和-React-怎么选择？"><a href="#如果你是-leader，做管理系统项目-Vue-和-React-怎么选择？" class="headerlink" title="如果你是 leader，做管理系统项目 Vue 和 React 怎么选择？"></a>如果你是 leader，做管理系统项目 Vue 和 React 怎么选择？</h2><p>评估项目成员的水平，如果成员 js 基础较好、编码能力较强则选择 React，否则 Vue。<br>评估系统的大小，如果想构建生态系统，则选择 React，如果要求而快，简单和“能用就行”,则选择 Vue。<br>评估系统运行环境，如果你想要一个同时适用于 Web 端和原生 APP 的框架，请选择 React(RN)。</p>
]]></content>
      <categories>
        <category>面试题-前端</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS 版本切换</title>
    <url>/2023/12/node-version-switching/</url>
    <content><![CDATA[<p>本文介绍 Node.js 版本切换方法</p>
<span id="more"></span>

<h2 id="本地项目-Node-js-版本切换"><a href="#本地项目-Node-js-版本切换" class="headerlink" title="本地项目 Node.js 版本切换"></a>本地项目 Node.js 版本切换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i node@20.10.0    # 本地项目安装指定版本的 Node.js</span><br><span class="line"></span><br><span class="line">npx node myScript.js</span><br></pre></td></tr></table></figure>

<h2 id="全局-Node-js-版本切换"><a href="#全局-Node-js-版本切换" class="headerlink" title="全局 Node.js 版本切换"></a>全局 Node.js 版本切换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g n # 安装 n 工具</span><br><span class="line">n 20.10.0 # 安装并切换 Node.js 版本</span><br><span class="line">n # 切换 Node.js 版本</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM学习笔记</title>
    <url>/2023/12/npm-learning/</url>
    <content><![CDATA[<p>npm 是世界上最大的软件注册表。来自各大洲的开源开发人员都使用 npm 来共享和借用包，许多组织也使用 npm 来管理私有开发。</p>
<span id="more"></span>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm login #   登录</span><br><span class="line">npm whoami #   查看当前登录用户</span><br><span class="line">npm profile get # 查看当前用户信息。修改当前用户信息参考： https://docs.npmjs.com/managing-your-profile-settings</span><br><span class="line">npm install npm@latest -g # 升级npm</span><br><span class="line">npm -v # 查看npm版本</span><br><span class="line"></span><br><span class="line">npm outdated # 查看所有已安装的包是否有更新</span><br><span class="line">npm update # 更新所有已安装的包</span><br><span class="line">npm update &lt;package&gt; # 更新指定包</span><br><span class="line">npm update -g # 更新全局安装的包</span><br><span class="line">npm update -g &lt;package&gt; # 更新全局安装的指定包</span><br><span class="line">npm outdated -g # 查看全局安装的包是否有更新</span><br><span class="line">npm update -g &lt;package&gt; # 更新全局安装的指定包</span><br><span class="line"></span><br><span class="line">npm uninstall # 卸载所有已安装的包</span><br><span class="line">npm uninstall &lt;package&gt; # 卸载指定包</span><br><span class="line">npm uninstall -g # 卸载全局安装的包</span><br><span class="line">npm uninstall -g &lt;package&gt; # 卸载全局安装的指定包</span><br><span class="line"></span><br><span class="line">npm audit # 查看安全漏洞</span><br><span class="line">npm audit fix # 扫描项目以查找漏洞，并自动为易受攻击的依赖项安装任何兼容的更新</span><br><span class="line">npm audit fix --force # 强制修复安全漏洞</span><br><span class="line">npm audit fix --package-lock-only # 只修复 package-lock.json 中的安全漏洞</span><br><span class="line"></span><br><span class="line">npm cache add &lt;package-spec&gt; # 将包添加到缓存</span><br><span class="line">npm cache clean [&lt;key&gt;] # 清除缓存。请注意，这通常是不必要的，因为 npm 的缓存是自我修复的，并且能够抵抗数据损坏问题。除了回收磁盘空间之外，永远不需要出于任何原因清除缓存。</span><br><span class="line">npm cache ls [&lt;name&gt;@&lt;version&gt;] # 列出缓存中的包</span><br><span class="line">npm cache verify # 验证缓存的包</span><br><span class="line"></span><br><span class="line">npm ci # 类似于 npm install，主要用于自动化平台。1. 项目必须具有现有的 package-lock.json。2. 如果 package-lock.json 与 package.json 依赖项不匹配，npm ci 将退出并显示错误。3. npm ci 一次只能安装整个项目，不能添加单个依赖项。4. 自动删除已存在的 node_modules。5. npm ci 永远不会写入 package.json 或 package-lock.json。</span><br><span class="line"></span><br><span class="line">npm config set &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt; ...] # 设置 npm 配置项</span><br><span class="line">npm config get [&lt;key&gt; [&lt;key&gt; ...]] # 获取 npm 配置项</span><br><span class="line">npm config delete &lt;key&gt; [&lt;key&gt; ...] # 删除 npm 配置项</span><br><span class="line">npm config list [--json] # 列出 npm 配置项</span><br><span class="line">npm config ls -l # 列出 npm 内部的配置项</span><br><span class="line">npm config edit # 编辑 npm 配置项</span><br><span class="line">npm config fix # 修复 npm 配置项</span><br><span class="line"></span><br><span class="line">npm dedupe # 递归地删除重复的依赖项</span><br><span class="line"></span><br><span class="line">npm doctor # 检查 npm 配置</span><br><span class="line"></span><br><span class="line">npm outdated [&lt;package-spec&gt; ...] # 列出所有已安装的包是否有更新</span><br><span class="line"></span><br><span class="line">npx # 运行 npm 包的无需安装的可执行文件</span><br><span class="line"></span><br><span class="line">pnpm store path # 查看 pnpm 返回活跃的存储目录的路径</span><br></pre></td></tr></table></figure>

<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set proxy http://username:password@server:port</span><br></pre></td></tr></table></figure>

<h3 id="关于-Https"><a href="#关于-Https" class="headerlink" title="关于 Https"></a>关于 Https</h3><p>经过上面设置使用了 http 开头的源，因此不需要设 https_proxy 了，否则还要增加一句:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set https-proxy http://username:password@server:port</span><br></pre></td></tr></table></figure>

<h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><h3 id="调用-package-json-的参数"><a href="#调用-package-json-的参数" class="headerlink" title="调用 package.json 的参数"></a>调用 package.json 的参数</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123abc&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;show-test-key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo $npm_package_config_test_key&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;xo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xo:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run xo -- --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Adding the <code>-- --fix</code>  option is like executing <code>xo --fix</code>.</p>
<h3 id="前脚本后脚本"><a href="#前脚本后脚本" class="headerlink" title="前脚本后脚本"></a>前脚本后脚本</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pretest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo &#x27;This runs before the test script.&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo &#x27;This is the test script.&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;posttest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo &#x27;This runs after the test script.&#x27;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在此示例 npm run test 中，将按所述执行这些脚本。</p>
<p>与 pnpm 不同，pnpm 不会执行前后脚本，参考 <a href="https://pnpm.io/zh/cli/run#%E4%B8%8E-npm-run%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">https://pnpm.io/zh/cli/run#%E4%B8%8E-npm-run%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84</a></p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>参考 <a href="https://docs.npmjs.com/cli/v10/using-npm/scripts#life-cycle-operation-order">https://docs.npmjs.com/cli/v10/using-npm/scripts#life-cycle-operation-order</a></p>
<h2 id="更新-NPM-版本"><a href="#更新-NPM-版本" class="headerlink" title="更新 NPM 版本"></a>更新 NPM 版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure>

<h2 id="设置-init-命令的配置选项"><a href="#设置-init-命令的配置选项" class="headerlink" title="设置 init 命令的配置选项"></a>设置 init 命令的配置选项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm set init-author-email &quot;example-user@example.com&quot;</span><br><span class="line">npm set init-author-name &quot;example_user&quot;</span><br><span class="line">npm set init-license &quot;MIT&quot;</span><br><span class="line"></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h2 id="指定-dependencies-和-devDependencies"><a href="#指定-dependencies-和-devDependencies" class="headerlink" title="指定 dependencies 和 devDependencies"></a>指定 dependencies 和 devDependencies</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 dependencies</span></span><br><span class="line">npm install &lt;package-name&gt; [--save-prod]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 devDependencies</span></span><br><span class="line">npm install &lt;package-name&gt; [--save-dev]</span><br></pre></td></tr></table></figure>

<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm restart</span><br></pre></td></tr></table></figure>

<p>如果当前项目具有 中 package.json 指定的脚本，则将运行以下 “restart” 脚本：</p>
<ol>
<li>prerestart</li>
<li>restart</li>
<li>postrestart</li>
</ol>
<p>如果它没有指定脚本 “restart” ，但它确实有 stop and&#x2F;或 start 脚本，则将运行以下脚本：</p>
<ol>
<li>prerestart</li>
<li>prestop</li>
<li>stop</li>
<li>poststop</li>
<li>prestart</li>
<li>start</li>
<li>poststart</li>
<li>postrestart</li>
</ol>
<h2 id="npmrc"><a href="#npmrc" class="headerlink" title="npmrc"></a>npmrc</h2><p>npm 从命令行、环境变量和 <code>npmrc</code> 文件中获取其配置设置。</p>
<h3 id="每个项目的配置文件"><a href="#每个项目的配置文件" class="headerlink" title="每个项目的配置文件"></a>每个项目的配置文件</h3><p>在项目中本地工作时，项目根目录中 <code>.npmrc</code> 的文件（即 <code>node_modules</code> 和 <code>package.json</code> 的同级）将设置特定于此项目的配置值。</p>
<p>请注意，这仅适用于运行 npm 的项目的根目录。当您的模块发布时，它不起作用。例如，您不能发布强制自身全局安装或安装在其他位置的模块。</p>
<p>此外，在全局模式下不会读取此文件，例如在运行 <code>npm install -g</code> 时。</p>
<h3 id="每个工作区配置文件"><a href="#每个工作区配置文件" class="headerlink" title="每个工作区配置文件"></a>每个工作区配置文件</h3><p>pnpm 的特性，包含 pnpm-workspace.yaml 文件的目录。</p>
<h3 id="每用户配置文件"><a href="#每用户配置文件" class="headerlink" title="每用户配置文件"></a>每用户配置文件</h3><p><code>$HOME/.npmrc</code> （或 <code>userconfig</code> 参数，如果在环境或命令行中设置）。</p>
<h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p><code>$PREFIX/etc/npmrc</code> （或 <code>globalconfig</code> 参数，如果在环境或命令行中设置）。</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>npm_config_</code> 前缀的环境变量将覆盖 <code>npmrc</code> 文件中的任何设置。</p>
<h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><p><code>npm config set</code> 命令将覆盖 <code>npmrc</code> 文件中的任何设置。</p>
<h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><h4 id="store-dir"><a href="#store-dir" class="headerlink" title="store-dir"></a>store-dir</h4><p>所有包被保存在磁盘上的位置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set store-dir ~/.pnpm-store</span><br></pre></td></tr></table></figure>

<ul>
<li>默认值：<ul>
<li>If the $PNPM_HOME env variable is set, then $PNPM_HOME&#x2F;store</li>
<li>如果设置了 $XDG_DATA_HOME 环境变量，则为 $XDG_DATA_HOME&#x2F;pnpm&#x2F;store</li>
<li>在 Windows 上: ~&#x2F;AppData&#x2F;Local&#x2F;pnpm&#x2F;store</li>
<li>在 macOS 上: ~&#x2F;Library&#x2F;pnpm&#x2F;store</li>
<li>在 Linux 上: ~&#x2F;.local&#x2F;share&#x2F;pnpm&#x2F;store</li>
</ul>
</li>
<li>类型：path</li>
</ul>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><ul>
<li>名称必须小于或等于 214 个字符。这包括作用域包的作用域。</li>
<li>作用域包的名称可以以点或下划线开头。如果没有范围，这是不允许的。</li>
<li>新包的名称中不得包含大写字母。</li>
<li>该名称最终成为 URL 的一部分、命令行上的参数和文件夹名称。因此，名称不能包含任何非 URL 安全字符。</li>
<li>不要使用与核心 Node 模块相同的名称。</li>
<li>不要在名称中加入“js”或“node”。</li>
<li>该名称可能会作为参数传递给 require（），因此它应该简短，但也具有合理的描述性。</li>
<li>在你过于依恋它之前，你可能想检查一下 <code>https://www.npmjs.com</code>，看看是否已经有这个名字的东西。</li>
</ul>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install semver</span><br></pre></td></tr></table></figure>

<h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>可选。类似<code>.gitignore</code>语法。</p>
<p><code>.npmignore</code>文件可以排除文件。</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>main 字段是一个模块 ID，它是程序的主要入口点。也就是说，如果您的软件包被命名为 foo ，并且用户安装了它，然后进行了 <code>require(&quot;foo&quot;)</code> 安装，则将返回主模块的导出对象。</p>
<p>如果 <code>main</code> 未设置，则默认位于 <code>index.js</code> 包的根文件夹中。</p>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>“config”对象可用于设置包脚本中使用的配置参数，这些参数在升级后保持不变。例如，如果一个包包含以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以用 <code>npm_package_config_port</code> 引用。</p>
<h3 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h3><p>您可以指定您的内容所使用的 node 或 npm 版本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=0.10.3 &lt;15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;npm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.20&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>除非用户设置了 <code>engine-strict</code> 配置标志，否则此字段仅是建议字段，并且仅在包作为依赖项安装时才会生成警告。</p>
<h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><p>您可以指定模块将在哪些操作系统上运行：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;darwin&quot;</span><span class="punctuation">,</span> <span class="string">&quot;linux&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;!win32&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>主机操作系统由以下因素 <code>process.platform</code> 决定。</p>
<h3 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h3><p>如果您的代码仅在某些 CPU 架构上运行，您可以指定哪些架构。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cpu&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;x64&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ia32&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cpu&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;!arm&quot;</span><span class="punctuation">,</span> <span class="string">&quot;!mips&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>主机体系结构由以下因素 <code>process.arch</code> 决定</p>
<h2 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h2><p><code>package-lock.json</code> 对于 npm 修改树或 <code>node_modules</code> <code>package.json</code> .它描述了生成的确切树，以便后续安装能够生成相同的树，而不考虑中间依赖项更新。</p>
<h2 id="npm-shrinkwrap-json"><a href="#npm-shrinkwrap-json" class="headerlink" title="npm-shrinkwrap.json"></a>npm-shrinkwrap.json</h2><p>区别在于 <code>package-lock.json</code> 无法发布，如果在根项目以外的任何地方找到它，它将被忽略。</p>
<p>相比之下，<code>npm-shrinkwrap.json</code> 允许发布，并从遇到的点定义依赖关系树。除非部署 CLI 工具或以其他方式使用发布过程来生成生产包，否则不建议这样做。</p>
<p>如果 和 <code>npm-shrinkwrap.json</code> 都 <code>package-lock.json</code> 存在于项目的根目录中， <code>npm-shrinkwrap.json</code> 则优先 package-lock.json 并被忽略。</p>
<h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>参考 <a href="https://docs.npmjs.com/cli/v10/using-npm/workspaces">https://docs.npmjs.com/cli/v10/using-npm/workspaces</a></p>
]]></content>
      <categories>
        <category>NPM学习笔记</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM 镜像切换</title>
    <url>/2023/12/npm-mirror-switching/</url>
    <content><![CDATA[<p>本文介绍 NPM 镜像切换的方法。</p>
<span id="more"></span>

<h2 id="可用镜像"><a href="#可用镜像" class="headerlink" title="可用镜像"></a>可用镜像</h2><ul>
<li>官方: <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></li>
<li>阿里云：<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li>
<li>腾讯云: <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li>
<li>华为云: <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></li>
</ul>
<h2 id="使用-NPM-命令切换"><a href="#使用-NPM-命令切换" class="headerlink" title="使用 NPM 命令切换"></a>使用 NPM 命令切换</h2><h3 id="临时切换"><a href="#临时切换" class="headerlink" title="临时切换"></a>临时切换</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>

<h3 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像地址"><a href="#查看镜像地址" class="headerlink" title="查看镜像地址"></a>查看镜像地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h2 id="使用-nrm-切换"><a href="#使用-nrm-切换" class="headerlink" title="使用 nrm 切换"></a>使用 nrm 切换</h2><h3 id="安装-nrm"><a href="#安装-nrm" class="headerlink" title="安装 nrm"></a>安装 nrm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<h3 id="查看可用的镜像源"><a href="#查看可用的镜像源" class="headerlink" title="查看可用的镜像源"></a>查看可用的镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<h3 id="查看当前镜像源"><a href="#查看当前镜像源" class="headerlink" title="查看当前镜像源"></a>查看当前镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm current</span><br></pre></td></tr></table></figure>

<h2 id="使用-cnpm-切换"><a href="#使用-cnpm-切换" class="headerlink" title="使用 cnpm 切换"></a>使用 cnpm 切换</h2><h3 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h3 id="查看-cnpm-可用的镜像源"><a href="#查看-cnpm-可用的镜像源" class="headerlink" title="查看 cnpm 可用的镜像源"></a>查看 cnpm 可用的镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="切换-cnpm-镜像源"><a href="#切换-cnpm-镜像源" class="headerlink" title="切换 cnpm 镜像源"></a>切换 cnpm 镜像源</h3><pre><code class="bash">cnpm config set registry https://registry.npmmirror.com
</code></pre>
]]></content>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
</search>
