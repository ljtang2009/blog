<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐李锦的空间</title>
  <icon>https://www.tanglijin.top/icon.png</icon>
  
  <link href="https://www.tanglijin.top/atom.xml" rel="self"/>
  
  <link href="https://www.tanglijin.top/"/>
  <updated>2023-08-19T02:39:15.528Z</updated>
  <id>https://www.tanglijin.top/</id>
  
  <author>
    <name>唐李锦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题 - 前端 - 微信小程序</title>
    <link href="https://www.tanglijin.top/2023/08/interview-fontend-miniprogram/"/>
    <id>https://www.tanglijin.top/2023/08/interview-fontend-miniprogram/</id>
    <published>2023-08-04T01:08:00.000Z</published>
    <updated>2023-08-19T02:39:15.528Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简述微信小程序原理&quot;&gt;&lt;a href=&quot;#简述微信小程序原理&quot; class=&quot;headerlink&quot; title=&quot;简述微信小程序原理&quot;&gt;&lt;/a&gt;简述微信小程序原理&lt;/h2&gt;&lt;p&gt;微信小程序采用 &lt;code&gt;JavaScript&lt;/code&gt;、&lt;code&gt;WXML&lt;/code&gt;、&lt;code&gt;WXSS&lt;/code&gt; 三种技术进行开发,本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口微信的架构，是数据驱动的架构模式，它的 &lt;code&gt;UI&lt;/code&gt; 和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现 小程序分为两个部分 &lt;code&gt;webview&lt;/code&gt; 和 &lt;code&gt;appService&lt;/code&gt; 。其中 &lt;code&gt;webview&lt;/code&gt; 主要用来展现 &lt;code&gt;UI&lt;/code&gt; ，&lt;code&gt;appService&lt;/code&gt; 有来处理业务逻辑、数据及接口调用。它们在两个进程中运行，通过系统层 &lt;code&gt;JSBridge&lt;/code&gt; 实现通信，实现 &lt;code&gt;UI&lt;/code&gt; 的渲染、事件的处理&lt;/p&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微信小程序" scheme="https://www.tanglijin.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - Vue</title>
    <link href="https://www.tanglijin.top/2023/08/interview-fontend-vue/"/>
    <id>https://www.tanglijin.top/2023/08/interview-fontend-vue/</id>
    <published>2023-08-03T06:00:00.000Z</published>
    <updated>2023-08-03T09:52:16.980Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;解释单向数据流和双向数据绑定&quot;&gt;&lt;a href=&quot;#解释单向数据流和双向数据绑定&quot; class=&quot;headerlink&quot; title=&quot;解释单向数据流和双向数据绑定&quot;&gt;&lt;/a&gt;解释单向数据流和双向数据绑定&lt;/h2&gt;&lt;p&gt;对于 Vue 来说，组件之间的数据传递具有单向数据流这样的特性称为单向数据流，单向数据流（Unidirectional data flow）方式使用一个上传数据流和一个下传数据流进行双向数据通信，两个数据流之间相互独立，单向数据流指只能从一个方向来修改状态。&lt;/p&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://www.tanglijin.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - NodeJS</title>
    <link href="https://www.tanglijin.top/2023/08/interview-fontend-nodejs/"/>
    <id>https://www.tanglijin.top/2023/08/interview-fontend-nodejs/</id>
    <published>2023-08-03T03:19:00.000Z</published>
    <updated>2023-08-03T05:56:44.542Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;nodejs-创建静态服务器&quot;&gt;&lt;a href=&quot;#nodejs-创建静态服务器&quot; class=&quot;headerlink&quot; title=&quot;nodejs 创建静态服务器&quot;&gt;&lt;/a&gt;nodejs 创建静态服务器&lt;/h2&gt;&lt;p&gt;要使用 HTTP 服务器和客户端，则必须 &lt;code&gt;require(&amp;#39;http&amp;#39;)&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nodejs" scheme="https://www.tanglijin.top/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - 工程化&amp;代码管理</title>
    <link href="https://www.tanglijin.top/2023/08/interview-fontend-project/"/>
    <id>https://www.tanglijin.top/2023/08/interview-fontend-project/</id>
    <published>2023-08-02T04:39:00.000Z</published>
    <updated>2023-08-03T03:15:37.664Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;git-常用命令&quot;&gt;&lt;a href=&quot;#git-常用命令&quot; class=&quot;headerlink&quot; title=&quot;git 常用命令&quot;&gt;&lt;/a&gt;git 常用命令&lt;/h2&gt;&lt;p&gt;git init 初始化仓库&lt;/p&gt;
&lt;p&gt;git status 查看当前各个区域的代码状态。&lt;/p&gt;
&lt;p&gt;git log 查看 commit 记录&lt;/p&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://www.tanglijin.top/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="代码管理" scheme="https://www.tanglijin.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - ES6-ES13</title>
    <link href="https://www.tanglijin.top/2023/07/interview-fontend-es6/"/>
    <id>https://www.tanglijin.top/2023/07/interview-fontend-es6/</id>
    <published>2023-07-11T15:20:00.000Z</published>
    <updated>2023-08-02T04:36:59.239Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;ER6-新增方法&quot;&gt;&lt;a href=&quot;#ER6-新增方法&quot; class=&quot;headerlink&quot; title=&quot;ER6 新增方法&quot;&gt;&lt;/a&gt;ER6 新增方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;let 和 const，解构赋值、模板字符串、箭头函数。&lt;/li&gt;
&lt;li&gt;Symbol、Map、Set 三种常用的数据类型。&lt;/li&gt;
&lt;li&gt;Proxy 重新定义了数据劫持的能力. （相对于 Object.defineProperty, Proxy 更多功能，例如可以劫持数组）。&lt;/li&gt;
&lt;li&gt;Reflect 定义了一套标准化的数据操作的方式。&lt;/li&gt;
&lt;li&gt;Promise 确实的解决了异步逻辑嵌套及回调地狱问题。定义了异步逻辑的三种状态 pending、rejected、fullfilled, 搭配 then、catch、all、race 等方法以及 async await 语法糖，大量简化了异步操作。&lt;/li&gt;
&lt;li&gt;Generator 函数，可以将异步逻辑划片执行(async&amp;#x2F;await 是它的语法糖)。&lt;/li&gt;
&lt;li&gt;新增了 class 类的概念&lt;/li&gt;
&lt;li&gt;ES6 Modules</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ES6" scheme="https://www.tanglijin.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - JS</title>
    <link href="https://www.tanglijin.top/2023/06/interview-fontend-js/"/>
    <id>https://www.tanglijin.top/2023/06/interview-fontend-js/</id>
    <published>2023-06-30T02:51:00.000Z</published>
    <updated>2023-07-11T15:26:03.764Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍-JS-有哪些内置对象？&quot;&gt;&lt;a href=&quot;#介绍-JS-有哪些内置对象？&quot; class=&quot;headerlink&quot; title=&quot;介绍 JS 有哪些内置对象？&quot;&gt;&lt;/a&gt;介绍 JS 有哪些内置对象？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据封装类对象(可以 new 的)：Object、Array、Boolean、Number、String&lt;/li&gt;
&lt;li&gt;其他对象：Function、Arguments、Math、Date、RegExp、Error&lt;/li&gt;
&lt;li&gt;ES6 新增对象：Symbol（标识唯一性的 ID）、Map、Set、Promises、Proxy、Reflect</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://www.tanglijin.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - CSS</title>
    <link href="https://www.tanglijin.top/2023/06/interview-fontend-css/"/>
    <id>https://www.tanglijin.top/2023/06/interview-fontend-css/</id>
    <published>2023-06-25T10:32:00.000Z</published>
    <updated>2023-06-30T02:47:16.189Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;display-none-与-visibility-hidden-的区别&quot;&gt;&lt;a href=&quot;#display-none-与-visibility-hidden-的区别&quot; class=&quot;headerlink&quot; title=&quot;display: none; 与 visibility: hidden; 的区别 ?&quot;&gt;&lt;/a&gt;display: none; 与 visibility: hidden; 的区别 ?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;联系：它们都能让元素不可见&lt;/li&gt;
&lt;li&gt;区别：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:none&lt;/code&gt;;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；&lt;code&gt;visibility: hidden&lt;/code&gt;;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见&lt;/li&gt;
&lt;li&gt;修改常规流中元素的&lt;code&gt;display&lt;/code&gt;通常会造成文档重排。修改&lt;code&gt;visibility&lt;/code&gt;属性只会造成本元素的重绘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://www.tanglijin.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>面试题 - 前端 - HTML5</title>
    <link href="https://www.tanglijin.top/2023/06/interview-fontend-html5/"/>
    <id>https://www.tanglijin.top/2023/06/interview-fontend-html5/</id>
    <published>2023-06-25T08:58:00.000Z</published>
    <updated>2023-06-25T10:32:17.343Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;HTML5-有哪些新特性？&quot;&gt;&lt;a href=&quot;#HTML5-有哪些新特性？&quot; class=&quot;headerlink&quot; title=&quot;HTML5 有哪些新特性？&quot;&gt;&lt;/a&gt;HTML5 有哪些新特性？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;增强多媒体功能：video,audio 元素。&lt;/li&gt;
&lt;li&gt;新增本地存储：localStorage, SessionStorage。&lt;/li&gt;
&lt;li&gt;语义化标签：header,article,footer 等。**&lt;em&gt;伴随提问：&lt;/em&gt;**&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3HTML5%E7%BB%93%E6%9E%84%E8%AF%AD%E4%B9%89%E5%8C%96%EF%BC%9F&quot;&gt;如何理解 HTML5 结构语义化？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增表单控件：date, time, email 等。写法是 &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新增位置，多任务等功能：GeoLocation，webWorker。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何理解-HTML5-结构语义化？&quot;&gt;&lt;a href=&quot;#如何理解-HTML5-结构语义化？&quot; class=&quot;headerlink&quot; title=&quot;如何理解 HTML5 结构语义化？&quot;&gt;&lt;/a&gt;如何理解 HTML5 结构语义化？&lt;/h2&gt;</summary>
    
    
    
    <category term="面试题-前端" scheme="https://www.tanglijin.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="面试题" scheme="https://www.tanglijin.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="前端" scheme="https://www.tanglijin.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML5" scheme="https://www.tanglijin.top/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 11. 多级构建</title>
    <link href="https://www.tanglijin.top/2023/06/docker-study-11/"/>
    <id>https://www.tanglijin.top/2023/06/docker-study-11/</id>
    <published>2023-06-12T00:07:00.000Z</published>
    <updated>2023-06-12T00:07:44.614Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1.</summary>
        
      
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 功能推荐 - 对多目录搜索包含和排除目录</title>
    <link href="https://www.tanglijin.top/2023/06/vscode-feature-sticky-scroll/"/>
    <id>https://www.tanglijin.top/2023/06/vscode-feature-sticky-scroll/</id>
    <published>2023-06-06T05:41:10.000Z</published>
    <updated>2023-06-07T04:24:01.273Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当在Search视图的结果树视图中右键单击文件夹时，上下文菜单中现在有两个新选项。&lt;a href=&quot;https://code.visualstudio.com/updates/v1_73#_include-and-exclude-folders-from-search&quot;&gt;官网介绍&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode 功能推荐" scheme="https://www.tanglijin.top/categories/VSCode-%E5%8A%9F%E8%83%BD%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="VSCode" scheme="https://www.tanglijin.top/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 技巧 - 基础</title>
    <link href="https://www.tanglijin.top/2023/05/vscode-skill-basic/"/>
    <id>https://www.tanglijin.top/2023/05/vscode-skill-basic/</id>
    <published>2023-05-29T00:26:10.000Z</published>
    <updated>2023-06-07T04:24:01.273Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;声明： 本文档信息来源于&lt;a href=&quot;https://code.visualstudio.com/docs&quot;&gt;VSCode官方文档&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode 技巧" scheme="https://www.tanglijin.top/categories/VSCode-%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="VSCode" scheme="https://www.tanglijin.top/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 使用 - 编辑器 Editor</title>
    <link href="https://www.tanglijin.top/2023/05/vscode-help-editor/"/>
    <id>https://www.tanglijin.top/2023/05/vscode-help-editor/</id>
    <published>2023-05-25T08:42:10.000Z</published>
    <updated>2023-06-07T04:24:01.273Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;声明： 本文档信息来源于&lt;a href=&quot;https://code.visualstudio.com/docs&quot;&gt;VSCode官方文档&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode 使用" scheme="https://www.tanglijin.top/categories/VSCode-%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="VSCode" scheme="https://www.tanglijin.top/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 快捷键</title>
    <link href="https://www.tanglijin.top/2023/05/iterm2-hot-key/"/>
    <id>https://www.tanglijin.top/2023/05/iterm2-hot-key/</id>
    <published>2023-05-25T02:02:10.000Z</published>
    <updated>2023-06-07T04:24:01.261Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;p&gt;Preferences &amp;gt; Profiles &amp;gt; Other Actions &amp;gt; Import JSON Profiles…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2023/05/iterm2-hot-key/Profiles.json&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="iTerm2" scheme="https://www.tanglijin.top/tags/iTerm2/"/>
    
    <category term="快捷键" scheme="https://www.tanglijin.top/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 功能推荐 - Sticky Scroll 粘性滚动</title>
    <link href="https://www.tanglijin.top/2023/05/vscode-feature-sticky-scroll/"/>
    <id>https://www.tanglijin.top/2023/05/vscode-feature-sticky-scroll/</id>
    <published>2023-05-25T01:19:10.000Z</published>
    <updated>2023-06-07T04:24:01.270Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;“sticky scroll”UI 将显示编辑器顶部所在的类&amp;#x2F;接口&amp;#x2F;名称空间&amp;#x2F;函数&amp;#x2F;方法&amp;#x2F;构造函数，帮助您了解文档中的位置。&lt;a href=&quot;https://code.visualstudio.com/updates/v1_70#_editor-sticky-scroll&quot;&gt;官网介绍&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode 功能推荐" scheme="https://www.tanglijin.top/categories/VSCode-%E5%8A%9F%E8%83%BD%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="VSCode" scheme="https://www.tanglijin.top/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 扩展推荐 - Live Server 实时服务</title>
    <link href="https://www.tanglijin.top/2023/05/vscode-extension-live-server/"/>
    <id>https://www.tanglijin.top/2023/05/vscode-extension-live-server/</id>
    <published>2023-05-25T00:10:10.000Z</published>
    <updated>2023-06-07T04:24:01.262Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;&lt;img src=&quot;/2023/05/vscode-extension-live-server/logo.png&quot; alt=&quot;Live Server&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;预览 HTML，PHP 文件，并实时刷新。&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode 扩展推荐" scheme="https://www.tanglijin.top/categories/VSCode-%E6%89%A9%E5%B1%95%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="VSCode" scheme="https://www.tanglijin.top/tags/VSCode/"/>
    
    <category term="扩展" scheme="https://www.tanglijin.top/tags/%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 10. Docker Compose</title>
    <link href="https://www.tanglijin.top/2023/05/docker-study-10/"/>
    <id>https://www.tanglijin.top/2023/05/docker-study-10/</id>
    <published>2023-05-13T12:33:00.000Z</published>
    <updated>2023-06-12T00:06:08.475Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1.</summary>
        
      
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 9. Docker 本地网络</title>
    <link href="https://www.tanglijin.top/2023/05/docker-study-9/"/>
    <id>https://www.tanglijin.top/2023/05/docker-study-9/</id>
    <published>2023-05-13T07:12:00.000Z</published>
    <updated>2023-06-07T04:24:01.261Z</updated>
    
    
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1. 原理&quot;&gt;Docker 学习 1. 原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-2/&quot; title=&quot;Docker 学习 2. 常用命令&quot;&gt;Docker 学习 2. 常用命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-3/&quot; title=&quot;Docker 学习 3. 编写 Dockerfile&quot;&gt;Docker 学习 3. 编写 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-4/&quot; title=&quot;Docker 学习 4. Docker引擎架构&quot;&gt;Docker 学习 4. Docker引擎架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-5/&quot; title=&quot;Docker 学习 5. 容器退出命令&quot;&gt;Docker 学习 5. 容器退出命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-6/&quot; title=&quot;Docker 学习 6. 镜像导入导出和容器导入导出的区别&quot;&gt;Docker 学习 6. 镜像导入导出和容器导入导出的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-7/&quot; title=&quot;Docker 学习 7. Docker Cache&quot;&gt;Docker 学习 7. Docker Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-8/&quot; title=&quot;Docker 学习 8. 数据卷持久化&quot;&gt;Docker 学习 8. 数据卷持久化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-9/&quot; title=&quot;Docker 学习 9. Docker 本地网络&quot;&gt;Docker 学习 9. Docker 本地网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/details&gt;


&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;实现 linux 虚拟网络 veth pair + bridge 模型。每个容器会有一个或多个网卡，每个网卡会连接到某个网桥上的终端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/docker-study-9/docker-network.drawio.png&quot; alt=&quot;原理&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 8. 数据卷持久化</title>
    <link href="https://www.tanglijin.top/2023/05/docker-study-8/"/>
    <id>https://www.tanglijin.top/2023/05/docker-study-8/</id>
    <published>2023-05-12T08:56:00.000Z</published>
    <updated>2023-06-07T04:24:01.260Z</updated>
    
    
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1. 原理&quot;&gt;Docker 学习 1. 原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-2/&quot; title=&quot;Docker 学习 2. 常用命令&quot;&gt;Docker 学习 2. 常用命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-3/&quot; title=&quot;Docker 学习 3. 编写 Dockerfile&quot;&gt;Docker 学习 3. 编写 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-4/&quot; title=&quot;Docker 学习 4. Docker引擎架构&quot;&gt;Docker 学习 4. Docker引擎架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-5/&quot; title=&quot;Docker 学习 5. 容器退出命令&quot;&gt;Docker 学习 5. 容器退出命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-6/&quot; title=&quot;Docker 学习 6. 镜像导入导出和容器导入导出的区别&quot;&gt;Docker 学习 6. 镜像导入导出和容器导入导出的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-7/&quot; title=&quot;Docker 学习 7. Docker Cache&quot;&gt;Docker 学习 7. Docker Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-8/&quot; title=&quot;Docker 学习 8. 数据卷持久化&quot;&gt;Docker 学习 8. 数据卷持久化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-9/&quot; title=&quot;Docker 学习 9. Docker 本地网络&quot;&gt;Docker 学习 9. Docker 本地网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/details&gt;


&lt;h2 id=&quot;数据卷简介&quot;&gt;&lt;a href=&quot;#数据卷简介&quot; class=&quot;headerlink&quot; title=&quot;数据卷简介&quot;&gt;&lt;/a&gt;数据卷简介&lt;/h2&gt;&lt;p&gt;数据卷是&lt;strong&gt;宿主机&lt;/strong&gt;中的一个特殊的文件&amp;#x2F;目录，这个文件&amp;#x2F;目录与容器中的另一个文件&amp;#x2F;目录进行了直接关联，在任何一端对文件&amp;#x2F;目录的写操作，在另一端都会同时发生相应变化。&lt;br&gt;在宿主中的这个文件&amp;#x2F;目录就称为数据卷，而容器中的这个关联文件&amp;#x2F;目录则称为该数据卷在该容器中的挂载点。·数据卷的设计目的就是为了实现数据持久化，其完全独立于容器的生命周期，属于宿主机文件系统，但不属于 UnionFS。因此，容器被删除时，不会删除其挂载的数据卷。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 7. Docker Cache</title>
    <link href="https://www.tanglijin.top/2023/05/docker-study-7/"/>
    <id>https://www.tanglijin.top/2023/05/docker-study-7/</id>
    <published>2023-05-12T07:45:00.000Z</published>
    <updated>2023-06-07T04:24:01.258Z</updated>
    
    
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1. 原理&quot;&gt;Docker 学习 1. 原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-2/&quot; title=&quot;Docker 学习 2. 常用命令&quot;&gt;Docker 学习 2. 常用命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-3/&quot; title=&quot;Docker 学习 3. 编写 Dockerfile&quot;&gt;Docker 学习 3. 编写 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-4/&quot; title=&quot;Docker 学习 4. Docker引擎架构&quot;&gt;Docker 学习 4. Docker引擎架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-5/&quot; title=&quot;Docker 学习 5. 容器退出命令&quot;&gt;Docker 学习 5. 容器退出命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-6/&quot; title=&quot;Docker 学习 6. 镜像导入导出和容器导入导出的区别&quot;&gt;Docker 学习 6. 镜像导入导出和容器导入导出的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-7/&quot; title=&quot;Docker 学习 7. Docker Cache&quot;&gt;Docker 学习 7. Docker Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-8/&quot; title=&quot;Docker 学习 8. 数据卷持久化&quot;&gt;Docker 学习 8. 数据卷持久化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-9/&quot; title=&quot;Docker 学习 9. Docker 本地网络&quot;&gt;Docker 学习 9. Docker 本地网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/details&gt;


&lt;h2 id=&quot;镜像组成&quot;&gt;&lt;a href=&quot;#镜像组成&quot; class=&quot;headerlink&quot; title=&quot;镜像组成&quot;&gt;&lt;/a&gt;镜像组成&lt;/h2&gt;&lt;p&gt;镜像由文件系统和 JSON 文件组成。所以相同的文件系统和 JSON 文件的镜像是同一个镜像，ImageID 必相同。&lt;br&gt;&lt;img src=&quot;/2023/05/docker-study-7/image-compose.drawio.png&quot; alt=&quot;镜像组成&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习 6. 镜像导入导出和容器导入导出的区别</title>
    <link href="https://www.tanglijin.top/2023/05/docker-study-6/"/>
    <id>https://www.tanglijin.top/2023/05/docker-study-6/</id>
    <published>2023-05-12T01:08:00.000Z</published>
    <updated>2023-06-07T04:24:01.257Z</updated>
    
    
    <summary type="html">&lt;details class=&quot;note info no-icon&quot;&gt;&lt;summary&gt;&lt;p&gt;目录&lt;/p&gt;
&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-1/&quot; title=&quot;Docker 学习 1. 原理&quot;&gt;Docker 学习 1. 原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-2/&quot; title=&quot;Docker 学习 2. 常用命令&quot;&gt;Docker 学习 2. 常用命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/03/docker-study-3/&quot; title=&quot;Docker 学习 3. 编写 Dockerfile&quot;&gt;Docker 学习 3. 编写 Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-4/&quot; title=&quot;Docker 学习 4. Docker引擎架构&quot;&gt;Docker 学习 4. Docker引擎架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-5/&quot; title=&quot;Docker 学习 5. 容器退出命令&quot;&gt;Docker 学习 5. 容器退出命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-6/&quot; title=&quot;Docker 学习 6. 镜像导入导出和容器导入导出的区别&quot;&gt;Docker 学习 6. 镜像导入导出和容器导入导出的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-7/&quot; title=&quot;Docker 学习 7. Docker Cache&quot;&gt;Docker 学习 7. Docker Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-8/&quot; title=&quot;Docker 学习 8. 数据卷持久化&quot;&gt;Docker 学习 8. 数据卷持久化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2023/05/docker-study-9/&quot; title=&quot;Docker 学习 9. Docker 本地网络&quot;&gt;Docker 学习 9. Docker 本地网络&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/details&gt;


&lt;h2 id=&quot;镜像-save-与容器-export&quot;&gt;&lt;a href=&quot;#镜像-save-与容器-export&quot; class=&quot;headerlink&quot; title=&quot;镜像 save 与容器 export&quot;&gt;&lt;/a&gt;镜像 save 与容器 export&lt;/h2&gt;&lt;p&gt;都可以保存为 tar 文件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;镜像 save&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;容器 export&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;save 一次可以对多个镜像导出。&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;export 一次只能对一个容器导出。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;save 保存了原镜像的完整记录。&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;export 只是对当前容器的文件系统快照进行导出，会丢弃原镜像的所有历史记录与原数据信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Docker 学习" scheme="https://www.tanglijin.top/categories/Docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Docker" scheme="https://www.tanglijin.top/tags/Docker/"/>
    
  </entry>
  
</feed>
